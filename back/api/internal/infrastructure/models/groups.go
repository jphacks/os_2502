// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Group is an object representing the database table.
type Group struct {
	// ã‚°ãƒ«ãƒ¼ãƒ—ID (UUID)
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ã‚°ãƒ«ãƒ¼ãƒ—ä½œæˆè€…ã®ãƒ¦ãƒ¼ã‚¶ãƒ¼ID
	OwnerUserID string `boil:"owner_user_id" json:"owner_user_id" toml:"owner_user_id" yaml:"owner_user_id"`
	// ã‚°ãƒ«ãƒ¼ãƒ—å
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// ã‚°ãƒ«ãƒ¼ãƒ—ã‚¿ã‚¤ãƒ—
	GroupType string `boil:"group_type" json:"group_type" toml:"group_type" yaml:"group_type"`
	// ã‚°ãƒ«ãƒ¼ãƒ—ã‚¹ãƒ†ãƒ¼ã‚¿ã‚¹
	Status string `boil:"status" json:"status" toml:"status" yaml:"status"`
	// æœ€å¤§ãƒ¡ãƒ³ãƒãƒ¼æ•°
	MaxMember int `boil:"max_member" json:"max_member" toml:"max_member" yaml:"max_member"`
	// ç¾åœ¨ã®ãƒ¡ãƒ³ãƒãƒ¼æ•°
	CurrentMemberCount int `boil:"current_member_count" json:"current_member_count" toml:"current_member_count" yaml:"current_member_count"`
	// æ‹›å¾…ãƒªãƒ³ã‚¯ç”¨ãƒˆãƒ¼ã‚¯ãƒ³
	InvitationToken string `boil:"invitation_token" json:"invitation_token" toml:"invitation_token" yaml:"invitation_token"`
	// ãƒ¡ãƒ³ãƒãƒ¼ç¢ºå®šæ™‚åˆ»
	FinalizedAt null.Time `boil:"finalized_at" json:"finalized_at,omitempty" toml:"finalized_at" yaml:"finalized_at,omitempty"`
	// ã‚«ã‚¦ãƒ³ãƒˆãƒ€ã‚¦ãƒ³é–‹å§‹æ™‚åˆ»
	CountdownStartedAt null.Time `boil:"countdown_started_at" json:"countdown_started_at,omitempty" toml:"countdown_started_at" yaml:"countdown_started_at,omitempty"`
	// äºˆå®šæ’®å½±æ™‚åˆ»ï¼ˆå…¨ã‚¯ãƒ©ã‚¤ã‚¢ãƒ³ãƒˆåŒæœŸç”¨ï¼‰
	ScheduledCaptureTime null.Time `boil:"scheduled_capture_time" json:"scheduled_capture_time,omitempty" toml:"scheduled_capture_time" yaml:"scheduled_capture_time,omitempty"`
	// é¸æŠžã•ã‚ŒãŸãƒ†ãƒ³ãƒ—ãƒ¬ãƒ¼ãƒˆID
	TemplateID null.String `boil:"template_id" json:"template_id,omitempty" toml:"template_id" yaml:"template_id,omitempty"`
	// æœ‰åŠ¹æœŸé™ï¼ˆä¸€æ™‚ã‚°ãƒ«ãƒ¼ãƒ—ç”¨ï¼‰
	ExpiresAt null.Time `boil:"expires_at" json:"expires_at,omitempty" toml:"expires_at" yaml:"expires_at,omitempty"`
	// ä½œæˆæ—¥æ™‚
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// æ›´æ–°æ—¥æ™‚
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *groupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupColumns = struct {
	ID                   string
	OwnerUserID          string
	Name                 string
	GroupType            string
	Status               string
	MaxMember            string
	CurrentMemberCount   string
	InvitationToken      string
	FinalizedAt          string
	CountdownStartedAt   string
	ScheduledCaptureTime string
	TemplateID           string
	ExpiresAt            string
	CreatedAt            string
	UpdatedAt            string
}{
	ID:                   "id",
	OwnerUserID:          "owner_user_id",
	Name:                 "name",
	GroupType:            "group_type",
	Status:               "status",
	MaxMember:            "max_member",
	CurrentMemberCount:   "current_member_count",
	InvitationToken:      "invitation_token",
	FinalizedAt:          "finalized_at",
	CountdownStartedAt:   "countdown_started_at",
	ScheduledCaptureTime: "scheduled_capture_time",
	TemplateID:           "template_id",
	ExpiresAt:            "expires_at",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
}

var GroupTableColumns = struct {
	ID                   string
	OwnerUserID          string
	Name                 string
	GroupType            string
	Status               string
	MaxMember            string
	CurrentMemberCount   string
	InvitationToken      string
	FinalizedAt          string
	CountdownStartedAt   string
	ScheduledCaptureTime string
	TemplateID           string
	ExpiresAt            string
	CreatedAt            string
	UpdatedAt            string
}{
	ID:                   "groups.id",
	OwnerUserID:          "groups.owner_user_id",
	Name:                 "groups.name",
	GroupType:            "groups.group_type",
	Status:               "groups.status",
	MaxMember:            "groups.max_member",
	CurrentMemberCount:   "groups.current_member_count",
	InvitationToken:      "groups.invitation_token",
	FinalizedAt:          "groups.finalized_at",
	CountdownStartedAt:   "groups.countdown_started_at",
	ScheduledCaptureTime: "groups.scheduled_capture_time",
	TemplateID:           "groups.template_id",
	ExpiresAt:            "groups.expires_at",
	CreatedAt:            "groups.created_at",
	UpdatedAt:            "groups.updated_at",
}

// Generated where

var GroupWhere = struct {
	ID                   whereHelperstring
	OwnerUserID          whereHelperstring
	Name                 whereHelperstring
	GroupType            whereHelperstring
	Status               whereHelperstring
	MaxMember            whereHelperint
	CurrentMemberCount   whereHelperint
	InvitationToken      whereHelperstring
	FinalizedAt          whereHelpernull_Time
	CountdownStartedAt   whereHelpernull_Time
	ScheduledCaptureTime whereHelpernull_Time
	TemplateID           whereHelpernull_String
	ExpiresAt            whereHelpernull_Time
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
}{
	ID:                   whereHelperstring{field: "`groups`.`id`"},
	OwnerUserID:          whereHelperstring{field: "`groups`.`owner_user_id`"},
	Name:                 whereHelperstring{field: "`groups`.`name`"},
	GroupType:            whereHelperstring{field: "`groups`.`group_type`"},
	Status:               whereHelperstring{field: "`groups`.`status`"},
	MaxMember:            whereHelperint{field: "`groups`.`max_member`"},
	CurrentMemberCount:   whereHelperint{field: "`groups`.`current_member_count`"},
	InvitationToken:      whereHelperstring{field: "`groups`.`invitation_token`"},
	FinalizedAt:          whereHelpernull_Time{field: "`groups`.`finalized_at`"},
	CountdownStartedAt:   whereHelpernull_Time{field: "`groups`.`countdown_started_at`"},
	ScheduledCaptureTime: whereHelpernull_Time{field: "`groups`.`scheduled_capture_time`"},
	TemplateID:           whereHelpernull_String{field: "`groups`.`template_id`"},
	ExpiresAt:            whereHelpernull_Time{field: "`groups`.`expires_at`"},
	CreatedAt:            whereHelpertime_Time{field: "`groups`.`created_at`"},
	UpdatedAt:            whereHelpertime_Time{field: "`groups`.`updated_at`"},
}

// GroupRels is where relationship names are stored.
var GroupRels = struct {
	OwnerUser            string
	CollageResults       string
	GroupMembers         string
	GroupPartAssignments string
	UploadImages         string
}{
	OwnerUser:            "OwnerUser",
	CollageResults:       "CollageResults",
	GroupMembers:         "GroupMembers",
	GroupPartAssignments: "GroupPartAssignments",
	UploadImages:         "UploadImages",
}

// groupR is where relationships are stored.
type groupR struct {
	OwnerUser            *User                    `boil:"OwnerUser" json:"OwnerUser" toml:"OwnerUser" yaml:"OwnerUser"`
	CollageResults       CollageResultSlice       `boil:"CollageResults" json:"CollageResults" toml:"CollageResults" yaml:"CollageResults"`
	GroupMembers         GroupMemberSlice         `boil:"GroupMembers" json:"GroupMembers" toml:"GroupMembers" yaml:"GroupMembers"`
	GroupPartAssignments GroupPartAssignmentSlice `boil:"GroupPartAssignments" json:"GroupPartAssignments" toml:"GroupPartAssignments" yaml:"GroupPartAssignments"`
	UploadImages         UploadImageSlice         `boil:"UploadImages" json:"UploadImages" toml:"UploadImages" yaml:"UploadImages"`
}

// NewStruct creates a new relationship struct
func (*groupR) NewStruct() *groupR {
	return &groupR{}
}

func (o *Group) GetOwnerUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetOwnerUser()
}

func (r *groupR) GetOwnerUser() *User {
	if r == nil {
		return nil
	}

	return r.OwnerUser
}

func (o *Group) GetCollageResults() CollageResultSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCollageResults()
}

func (r *groupR) GetCollageResults() CollageResultSlice {
	if r == nil {
		return nil
	}

	return r.CollageResults
}

func (o *Group) GetGroupMembers() GroupMemberSlice {
	if o == nil {
		return nil
	}

	return o.R.GetGroupMembers()
}

func (r *groupR) GetGroupMembers() GroupMemberSlice {
	if r == nil {
		return nil
	}

	return r.GroupMembers
}

func (o *Group) GetGroupPartAssignments() GroupPartAssignmentSlice {
	if o == nil {
		return nil
	}

	return o.R.GetGroupPartAssignments()
}

func (r *groupR) GetGroupPartAssignments() GroupPartAssignmentSlice {
	if r == nil {
		return nil
	}

	return r.GroupPartAssignments
}

func (o *Group) GetUploadImages() UploadImageSlice {
	if o == nil {
		return nil
	}

	return o.R.GetUploadImages()
}

func (r *groupR) GetUploadImages() UploadImageSlice {
	if r == nil {
		return nil
	}

	return r.UploadImages
}

// groupL is where Load methods for each relationship are stored.
type groupL struct{}

var (
	groupAllColumns            = []string{"id", "owner_user_id", "name", "group_type", "status", "max_member", "current_member_count", "invitation_token", "finalized_at", "countdown_started_at", "scheduled_capture_time", "template_id", "expires_at", "created_at", "updated_at"}
	groupColumnsWithoutDefault = []string{"id", "owner_user_id", "name", "max_member", "invitation_token", "finalized_at", "countdown_started_at", "scheduled_capture_time", "template_id", "expires_at"}
	groupColumnsWithDefault    = []string{"group_type", "status", "current_member_count", "created_at", "updated_at"}
	groupPrimaryKeyColumns     = []string{"id"}
	groupGeneratedColumns      = []string{}
)

type (
	// GroupSlice is an alias for a slice of pointers to Group.
	// This should almost always be used instead of []Group.
	GroupSlice []*Group
	// GroupHook is the signature for custom Group hook methods
	GroupHook func(context.Context, boil.ContextExecutor, *Group) error

	groupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupType                 = reflect.TypeOf(&Group{})
	groupMapping              = queries.MakeStructMapping(groupType)
	groupPrimaryKeyMapping, _ = queries.BindMapping(groupType, groupMapping, groupPrimaryKeyColumns)
	groupInsertCacheMut       sync.RWMutex
	groupInsertCache          = make(map[string]insertCache)
	groupUpdateCacheMut       sync.RWMutex
	groupUpdateCache          = make(map[string]updateCache)
	groupUpsertCacheMut       sync.RWMutex
	groupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groupAfterSelectMu sync.Mutex
var groupAfterSelectHooks []GroupHook

var groupBeforeInsertMu sync.Mutex
var groupBeforeInsertHooks []GroupHook
var groupAfterInsertMu sync.Mutex
var groupAfterInsertHooks []GroupHook

var groupBeforeUpdateMu sync.Mutex
var groupBeforeUpdateHooks []GroupHook
var groupAfterUpdateMu sync.Mutex
var groupAfterUpdateHooks []GroupHook

var groupBeforeDeleteMu sync.Mutex
var groupBeforeDeleteHooks []GroupHook
var groupAfterDeleteMu sync.Mutex
var groupAfterDeleteHooks []GroupHook

var groupBeforeUpsertMu sync.Mutex
var groupBeforeUpsertHooks []GroupHook
var groupAfterUpsertMu sync.Mutex
var groupAfterUpsertHooks []GroupHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Group) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Group) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Group) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Group) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Group) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Group) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Group) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Group) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Group) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupHook registers your hook function for all future operations.
func AddGroupHook(hookPoint boil.HookPoint, groupHook GroupHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		groupAfterSelectMu.Lock()
		groupAfterSelectHooks = append(groupAfterSelectHooks, groupHook)
		groupAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		groupBeforeInsertMu.Lock()
		groupBeforeInsertHooks = append(groupBeforeInsertHooks, groupHook)
		groupBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		groupAfterInsertMu.Lock()
		groupAfterInsertHooks = append(groupAfterInsertHooks, groupHook)
		groupAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		groupBeforeUpdateMu.Lock()
		groupBeforeUpdateHooks = append(groupBeforeUpdateHooks, groupHook)
		groupBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		groupAfterUpdateMu.Lock()
		groupAfterUpdateHooks = append(groupAfterUpdateHooks, groupHook)
		groupAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		groupBeforeDeleteMu.Lock()
		groupBeforeDeleteHooks = append(groupBeforeDeleteHooks, groupHook)
		groupBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		groupAfterDeleteMu.Lock()
		groupAfterDeleteHooks = append(groupAfterDeleteHooks, groupHook)
		groupAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		groupBeforeUpsertMu.Lock()
		groupBeforeUpsertHooks = append(groupBeforeUpsertHooks, groupHook)
		groupBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		groupAfterUpsertMu.Lock()
		groupAfterUpsertHooks = append(groupAfterUpsertHooks, groupHook)
		groupAfterUpsertMu.Unlock()
	}
}

// One returns a single group record from the query.
func (q groupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Group, error) {
	o := &Group{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for groups")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Group records from the query.
func (q groupQuery) All(ctx context.Context, exec boil.ContextExecutor) (GroupSlice, error) {
	var o []*Group

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Group slice")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Group records in the query.
func (q groupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count groups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if groups exists")
	}

	return count > 0, nil
}

// OwnerUser pointed to by the foreign key.
func (o *Group) OwnerUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OwnerUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// CollageResults retrieves all the collage_result's CollageResults with an executor.
func (o *Group) CollageResults(mods ...qm.QueryMod) collageResultQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`collage_results`.`group_id`=?", o.ID),
	)

	return CollageResults(queryMods...)
}

// GroupMembers retrieves all the group_member's GroupMembers with an executor.
func (o *Group) GroupMembers(mods ...qm.QueryMod) groupMemberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`group_members`.`group_id`=?", o.ID),
	)

	return GroupMembers(queryMods...)
}

// GroupPartAssignments retrieves all the group_part_assignment's GroupPartAssignments with an executor.
func (o *Group) GroupPartAssignments(mods ...qm.QueryMod) groupPartAssignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`group_part_assignments`.`group_id`=?", o.ID),
	)

	return GroupPartAssignments(queryMods...)
}

// UploadImages retrieves all the upload_image's UploadImages with an executor.
func (o *Group) UploadImages(mods ...qm.QueryMod) uploadImageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`upload_images`.`group_id`=?", o.ID),
	)

	return UploadImages(queryMods...)
}

// LoadOwnerUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupL) LoadOwnerUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroup interface{}, mods queries.Applicator) error {
	var slice []*Group
	var object *Group

	if singular {
		var ok bool
		object, ok = maybeGroup.(*Group)
		if !ok {
			object = new(Group)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroup))
			}
		}
	} else {
		s, ok := maybeGroup.(*[]*Group)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &groupR{}
		}
		args[object.OwnerUserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupR{}
			}

			args[obj.OwnerUserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OwnerUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerUserGroups = append(foreign.R.OwnerUserGroups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerUserID == foreign.ID {
				local.R.OwnerUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerUserGroups = append(foreign.R.OwnerUserGroups, local)
				break
			}
		}
	}

	return nil
}

// LoadCollageResults allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (groupL) LoadCollageResults(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroup interface{}, mods queries.Applicator) error {
	var slice []*Group
	var object *Group

	if singular {
		var ok bool
		object, ok = maybeGroup.(*Group)
		if !ok {
			object = new(Group)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroup))
			}
		}
	} else {
		s, ok := maybeGroup.(*[]*Group)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &groupR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`collage_results`),
		qm.WhereIn(`collage_results.group_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load collage_results")
	}

	var resultSlice []*CollageResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice collage_results")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on collage_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collage_results")
	}

	if len(collageResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CollageResults = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &collageResultR{}
			}
			foreign.R.Group = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GroupID {
				local.R.CollageResults = append(local.R.CollageResults, foreign)
				if foreign.R == nil {
					foreign.R = &collageResultR{}
				}
				foreign.R.Group = local
				break
			}
		}
	}

	return nil
}

// LoadGroupMembers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (groupL) LoadGroupMembers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroup interface{}, mods queries.Applicator) error {
	var slice []*Group
	var object *Group

	if singular {
		var ok bool
		object, ok = maybeGroup.(*Group)
		if !ok {
			object = new(Group)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroup))
			}
		}
	} else {
		s, ok := maybeGroup.(*[]*Group)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &groupR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`group_members`),
		qm.WhereIn(`group_members.group_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load group_members")
	}

	var resultSlice []*GroupMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice group_members")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on group_members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for group_members")
	}

	if len(groupMemberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GroupMembers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &groupMemberR{}
			}
			foreign.R.Group = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GroupID {
				local.R.GroupMembers = append(local.R.GroupMembers, foreign)
				if foreign.R == nil {
					foreign.R = &groupMemberR{}
				}
				foreign.R.Group = local
				break
			}
		}
	}

	return nil
}

// LoadGroupPartAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (groupL) LoadGroupPartAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroup interface{}, mods queries.Applicator) error {
	var slice []*Group
	var object *Group

	if singular {
		var ok bool
		object, ok = maybeGroup.(*Group)
		if !ok {
			object = new(Group)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroup))
			}
		}
	} else {
		s, ok := maybeGroup.(*[]*Group)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &groupR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`group_part_assignments`),
		qm.WhereIn(`group_part_assignments.group_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load group_part_assignments")
	}

	var resultSlice []*GroupPartAssignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice group_part_assignments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on group_part_assignments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for group_part_assignments")
	}

	if len(groupPartAssignmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GroupPartAssignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &groupPartAssignmentR{}
			}
			foreign.R.Group = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GroupID {
				local.R.GroupPartAssignments = append(local.R.GroupPartAssignments, foreign)
				if foreign.R == nil {
					foreign.R = &groupPartAssignmentR{}
				}
				foreign.R.Group = local
				break
			}
		}
	}

	return nil
}

// LoadUploadImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (groupL) LoadUploadImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroup interface{}, mods queries.Applicator) error {
	var slice []*Group
	var object *Group

	if singular {
		var ok bool
		object, ok = maybeGroup.(*Group)
		if !ok {
			object = new(Group)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroup))
			}
		}
	} else {
		s, ok := maybeGroup.(*[]*Group)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroup))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &groupR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`upload_images`),
		qm.WhereIn(`upload_images.group_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upload_images")
	}

	var resultSlice []*UploadImage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upload_images")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on upload_images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for upload_images")
	}

	if len(uploadImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UploadImages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &uploadImageR{}
			}
			foreign.R.Group = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GroupID {
				local.R.UploadImages = append(local.R.UploadImages, foreign)
				if foreign.R == nil {
					foreign.R = &uploadImageR{}
				}
				foreign.R.Group = local
				break
			}
		}
	}

	return nil
}

// SetOwnerUser of the group to the related item.
// Sets o.R.OwnerUser to related.
// Adds o to related.R.OwnerUserGroups.
func (o *Group) SetOwnerUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `groups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"owner_user_id"}),
		strmangle.WhereClause("`", "`", 0, groupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerUserID = related.ID
	if o.R == nil {
		o.R = &groupR{
			OwnerUser: related,
		}
	} else {
		o.R.OwnerUser = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerUserGroups: GroupSlice{o},
		}
	} else {
		related.R.OwnerUserGroups = append(related.R.OwnerUserGroups, o)
	}

	return nil
}

// AddCollageResults adds the given related objects to the existing relationships
// of the group, optionally inserting them as new records.
// Appends related to o.R.CollageResults.
// Sets related.R.Group appropriately.
func (o *Group) AddCollageResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CollageResult) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GroupID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `collage_results` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
				strmangle.WhereClause("`", "`", 0, collageResultPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ResultID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GroupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &groupR{
			CollageResults: related,
		}
	} else {
		o.R.CollageResults = append(o.R.CollageResults, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &collageResultR{
				Group: o,
			}
		} else {
			rel.R.Group = o
		}
	}
	return nil
}

// AddGroupMembers adds the given related objects to the existing relationships
// of the group, optionally inserting them as new records.
// Appends related to o.R.GroupMembers.
// Sets related.R.Group appropriately.
func (o *Group) AddGroupMembers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GroupMember) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GroupID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `group_members` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
				strmangle.WhereClause("`", "`", 0, groupMemberPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.GroupID, rel.UserID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GroupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &groupR{
			GroupMembers: related,
		}
	} else {
		o.R.GroupMembers = append(o.R.GroupMembers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &groupMemberR{
				Group: o,
			}
		} else {
			rel.R.Group = o
		}
	}
	return nil
}

// AddGroupPartAssignments adds the given related objects to the existing relationships
// of the group, optionally inserting them as new records.
// Appends related to o.R.GroupPartAssignments.
// Sets related.R.Group appropriately.
func (o *Group) AddGroupPartAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GroupPartAssignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GroupID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `group_part_assignments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
				strmangle.WhereClause("`", "`", 0, groupPartAssignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.AssignmentID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GroupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &groupR{
			GroupPartAssignments: related,
		}
	} else {
		o.R.GroupPartAssignments = append(o.R.GroupPartAssignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &groupPartAssignmentR{
				Group: o,
			}
		} else {
			rel.R.Group = o
		}
	}
	return nil
}

// AddUploadImages adds the given related objects to the existing relationships
// of the group, optionally inserting them as new records.
// Appends related to o.R.UploadImages.
// Sets related.R.Group appropriately.
func (o *Group) AddUploadImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UploadImage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GroupID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `upload_images` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
				strmangle.WhereClause("`", "`", 0, uploadImagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ImageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GroupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &groupR{
			UploadImages: related,
		}
	} else {
		o.R.UploadImages = append(o.R.UploadImages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &uploadImageR{
				Group: o,
			}
		} else {
			rel.R.Group = o
		}
	}
	return nil
}

// Groups retrieves all the records using an executor.
func Groups(mods ...qm.QueryMod) groupQuery {
	mods = append(mods, qm.From("`groups`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`groups`.*"})
	}

	return groupQuery{q}
}

// FindGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroup(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Group, error) {
	groupObj := &Group{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `groups` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, groupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from groups")
	}

	if err = groupObj.doAfterSelectHooks(ctx, exec); err != nil {
		return groupObj, err
	}

	return groupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Group) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no groups provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupInsertCacheMut.RLock()
	cache, cached := groupInsertCache[key]
	groupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupAllColumns,
			groupColumnsWithDefault,
			groupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupType, groupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupType, groupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `groups` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `groups` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `groups` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, groupPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into groups")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for groups")
	}

CacheNoHooks:
	if !cached {
		groupInsertCacheMut.Lock()
		groupInsertCache[key] = cache
		groupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Group.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Group) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groupUpdateCacheMut.RLock()
	cache, cached := groupUpdateCache[key]
	groupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupAllColumns,
			groupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update groups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `groups` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, groupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupType, groupMapping, append(wl, groupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update groups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for groups")
	}

	if !cached {
		groupUpdateCacheMut.Lock()
		groupUpdateCache[key] = cache
		groupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q groupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for groups")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `groups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in group slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all group")
	}
	return rowsAff, nil
}

var mySQLGroupUniqueColumns = []string{
	"id",
	"invitation_token",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Group) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no groups provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGroupUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupUpsertCacheMut.RLock()
	cache, cached := groupUpsertCache[key]
	groupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			groupAllColumns,
			groupColumnsWithDefault,
			groupColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			groupAllColumns,
			groupPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert groups, could not build update column list")
		}

		ret := strmangle.SetComplement(groupAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`groups`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `groups` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(groupType, groupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupType, groupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for groups")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(groupType, groupMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for groups")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for groups")
	}

CacheNoHooks:
	if !cached {
		groupUpsertCacheMut.Lock()
		groupUpsertCache[key] = cache
		groupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Group record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Group) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Group provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupPrimaryKeyMapping)
	sql := "DELETE FROM `groups` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for groups")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no groupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for groups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(groupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `groups` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from group slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for groups")
	}

	if len(groupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Group) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGroup(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `groups`.* FROM `groups` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GroupSlice")
	}

	*o = slice

	return nil
}

// GroupExists checks if the Group row exists.
func GroupExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `groups` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if groups exists")
	}

	return exists, nil
}

// Exists checks if the Group row exists.
func (o *Group) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GroupExists(ctx, exec, o.ID)
}
