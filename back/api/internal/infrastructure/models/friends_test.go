// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFriends(t *testing.T) {
	t.Parallel()

	query := Friends()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFriendsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Friends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFriendsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Friends().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Friends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFriendsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FriendSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Friends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFriendsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FriendExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Friend exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FriendExists to return true, but got false.")
	}
}

func testFriendsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	friendFound, err := FindFriend(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if friendFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFriendsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Friends().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFriendsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Friends().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFriendsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	friendOne := &Friend{}
	friendTwo := &Friend{}
	if err = randomize.Struct(seed, friendOne, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}
	if err = randomize.Struct(seed, friendTwo, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = friendOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = friendTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Friends().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFriendsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	friendOne := &Friend{}
	friendTwo := &Friend{}
	if err = randomize.Struct(seed, friendOne, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}
	if err = randomize.Struct(seed, friendTwo, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = friendOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = friendTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Friends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func friendBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Friend) error {
	*o = Friend{}
	return nil
}

func friendAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Friend) error {
	*o = Friend{}
	return nil
}

func friendAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Friend) error {
	*o = Friend{}
	return nil
}

func friendBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Friend) error {
	*o = Friend{}
	return nil
}

func friendAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Friend) error {
	*o = Friend{}
	return nil
}

func friendBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Friend) error {
	*o = Friend{}
	return nil
}

func friendAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Friend) error {
	*o = Friend{}
	return nil
}

func friendBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Friend) error {
	*o = Friend{}
	return nil
}

func friendAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Friend) error {
	*o = Friend{}
	return nil
}

func testFriendsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Friend{}
	o := &Friend{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, friendDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Friend object: %s", err)
	}

	AddFriendHook(boil.BeforeInsertHook, friendBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	friendBeforeInsertHooks = []FriendHook{}

	AddFriendHook(boil.AfterInsertHook, friendAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	friendAfterInsertHooks = []FriendHook{}

	AddFriendHook(boil.AfterSelectHook, friendAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	friendAfterSelectHooks = []FriendHook{}

	AddFriendHook(boil.BeforeUpdateHook, friendBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	friendBeforeUpdateHooks = []FriendHook{}

	AddFriendHook(boil.AfterUpdateHook, friendAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	friendAfterUpdateHooks = []FriendHook{}

	AddFriendHook(boil.BeforeDeleteHook, friendBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	friendBeforeDeleteHooks = []FriendHook{}

	AddFriendHook(boil.AfterDeleteHook, friendAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	friendAfterDeleteHooks = []FriendHook{}

	AddFriendHook(boil.BeforeUpsertHook, friendBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	friendBeforeUpsertHooks = []FriendHook{}

	AddFriendHook(boil.AfterUpsertHook, friendAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	friendAfterUpsertHooks = []FriendHook{}
}

func testFriendsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Friends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFriendsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(friendPrimaryKeyColumns, friendColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Friends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFriendToOneUserUsingAddressee(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Friend
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AddresseeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Addressee().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FriendSlice{&local}
	if err = local.L.LoadAddressee(ctx, tx, false, (*[]*Friend)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Addressee == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Addressee = nil
	if err = local.L.LoadAddressee(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Addressee == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFriendToOneUserUsingRequester(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Friend
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, friendDBTypes, false, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RequesterID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Requester().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FriendSlice{&local}
	if err = local.L.LoadRequester(ctx, tx, false, (*[]*Friend)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Requester == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Requester = nil
	if err = local.L.LoadRequester(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Requester == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFriendToOneSetOpUserUsingAddressee(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Friend
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, friendDBTypes, false, strmangle.SetComplement(friendPrimaryKeyColumns, friendColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetAddressee(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Addressee != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AddresseeFriends[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AddresseeID != x.ID {
			t.Error("foreign key was wrong value", a.AddresseeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AddresseeID))
		reflect.Indirect(reflect.ValueOf(&a.AddresseeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AddresseeID != x.ID {
			t.Error("foreign key was wrong value", a.AddresseeID, x.ID)
		}
	}
}
func testFriendToOneSetOpUserUsingRequester(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Friend
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, friendDBTypes, false, strmangle.SetComplement(friendPrimaryKeyColumns, friendColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetRequester(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Requester != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RequesterFriends[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RequesterID != x.ID {
			t.Error("foreign key was wrong value", a.RequesterID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RequesterID))
		reflect.Indirect(reflect.ValueOf(&a.RequesterID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RequesterID != x.ID {
			t.Error("foreign key was wrong value", a.RequesterID, x.ID)
		}
	}
}

func testFriendsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFriendsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FriendSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFriendsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Friends().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	friendDBTypes = map[string]string{`ID`: `char`, `RequesterID`: `char`, `AddresseeID`: `char`, `Status`: `enum('pending','accepted','rejected')`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_             = bytes.MinRead
)

func testFriendsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(friendPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(friendAllColumns) == len(friendPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Friends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, friendDBTypes, true, friendPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFriendsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(friendAllColumns) == len(friendPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Friend{}
	if err = randomize.Struct(seed, o, friendDBTypes, true, friendColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Friends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, friendDBTypes, true, friendPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(friendAllColumns, friendPrimaryKeyColumns) {
		fields = friendAllColumns
	} else {
		fields = strmangle.SetComplement(
			friendAllColumns,
			friendPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FriendSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFriendsUpsert(t *testing.T) {
	t.Parallel()

	if len(friendAllColumns) == len(friendPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLFriendUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Friend{}
	if err = randomize.Struct(seed, &o, friendDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Friend: %s", err)
	}

	count, err := Friends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, friendDBTypes, false, friendPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Friend struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Friend: %s", err)
	}

	count, err = Friends().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
