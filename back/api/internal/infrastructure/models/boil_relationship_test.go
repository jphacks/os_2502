// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CollageResultToGroupUsingGroup", testCollageResultToOneGroupUsingGroup)
	t.Run("CollageResultToCollagesTemplateUsingTemplate", testCollageResultToOneCollagesTemplateUsingTemplate)
	t.Run("DeviceTokenToUserUsingUser", testDeviceTokenToOneUserUsingUser)
	t.Run("FriendToUserUsingAddressee", testFriendToOneUserUsingAddressee)
	t.Run("FriendToUserUsingRequester", testFriendToOneUserUsingRequester)
	t.Run("GroupMemberToGroupUsingGroup", testGroupMemberToOneGroupUsingGroup)
	t.Run("GroupMemberToUserUsingUser", testGroupMemberToOneUserUsingUser)
	t.Run("GroupPartAssignmentToGroupUsingGroup", testGroupPartAssignmentToOneGroupUsingGroup)
	t.Run("GroupPartAssignmentToTemplatePartUsingPart", testGroupPartAssignmentToOneTemplatePartUsingPart)
	t.Run("GroupPartAssignmentToUserUsingUser", testGroupPartAssignmentToOneUserUsingUser)
	t.Run("GroupToUserUsingOwnerUser", testGroupToOneUserUsingOwnerUser)
	t.Run("ResultDownloadToCollageResultUsingResult", testResultDownloadToOneCollageResultUsingResult)
	t.Run("ResultDownloadToUserUsingUser", testResultDownloadToOneUserUsingUser)
	t.Run("TemplatePartToCollagesTemplateUsingTemplate", testTemplatePartToOneCollagesTemplateUsingTemplate)
	t.Run("UploadImageToGroupUsingGroup", testUploadImageToOneGroupUsingGroup)
	t.Run("UploadImageToTemplatePartUsingPart", testUploadImageToOneTemplatePartUsingPart)
	t.Run("UploadImageToUserUsingUser", testUploadImageToOneUserUsingUser)
	t.Run("UploadImagesCollageResultToUploadImageUsingImage", testUploadImagesCollageResultToOneUploadImageUsingImage)
	t.Run("UploadImagesCollageResultToCollageResultUsingResult", testUploadImagesCollageResultToOneCollageResultUsingResult)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CollageResultToResultResultDownloads", testCollageResultToManyResultResultDownloads)
	t.Run("CollageResultToResultUploadImagesCollageResults", testCollageResultToManyResultUploadImagesCollageResults)
	t.Run("CollagesTemplateToTemplateCollageResults", testCollagesTemplateToManyTemplateCollageResults)
	t.Run("CollagesTemplateToTemplateTemplateParts", testCollagesTemplateToManyTemplateTemplateParts)
	t.Run("GroupToCollageResults", testGroupToManyCollageResults)
	t.Run("GroupToGroupMembers", testGroupToManyGroupMembers)
	t.Run("GroupToGroupPartAssignments", testGroupToManyGroupPartAssignments)
	t.Run("GroupToUploadImages", testGroupToManyUploadImages)
	t.Run("TemplatePartToPartGroupPartAssignments", testTemplatePartToManyPartGroupPartAssignments)
	t.Run("TemplatePartToPartUploadImages", testTemplatePartToManyPartUploadImages)
	t.Run("UploadImageToImageUploadImagesCollageResults", testUploadImageToManyImageUploadImagesCollageResults)
	t.Run("UserToDeviceTokens", testUserToManyDeviceTokens)
	t.Run("UserToAddresseeFriends", testUserToManyAddresseeFriends)
	t.Run("UserToRequesterFriends", testUserToManyRequesterFriends)
	t.Run("UserToGroupMembers", testUserToManyGroupMembers)
	t.Run("UserToGroupPartAssignments", testUserToManyGroupPartAssignments)
	t.Run("UserToOwnerUserGroups", testUserToManyOwnerUserGroups)
	t.Run("UserToResultDownloads", testUserToManyResultDownloads)
	t.Run("UserToUploadImages", testUserToManyUploadImages)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CollageResultToGroupUsingCollageResults", testCollageResultToOneSetOpGroupUsingGroup)
	t.Run("CollageResultToCollagesTemplateUsingTemplateCollageResults", testCollageResultToOneSetOpCollagesTemplateUsingTemplate)
	t.Run("DeviceTokenToUserUsingDeviceTokens", testDeviceTokenToOneSetOpUserUsingUser)
	t.Run("FriendToUserUsingAddresseeFriends", testFriendToOneSetOpUserUsingAddressee)
	t.Run("FriendToUserUsingRequesterFriends", testFriendToOneSetOpUserUsingRequester)
	t.Run("GroupMemberToGroupUsingGroupMembers", testGroupMemberToOneSetOpGroupUsingGroup)
	t.Run("GroupMemberToUserUsingGroupMembers", testGroupMemberToOneSetOpUserUsingUser)
	t.Run("GroupPartAssignmentToGroupUsingGroupPartAssignments", testGroupPartAssignmentToOneSetOpGroupUsingGroup)
	t.Run("GroupPartAssignmentToTemplatePartUsingPartGroupPartAssignments", testGroupPartAssignmentToOneSetOpTemplatePartUsingPart)
	t.Run("GroupPartAssignmentToUserUsingGroupPartAssignments", testGroupPartAssignmentToOneSetOpUserUsingUser)
	t.Run("GroupToUserUsingOwnerUserGroups", testGroupToOneSetOpUserUsingOwnerUser)
	t.Run("ResultDownloadToCollageResultUsingResultResultDownloads", testResultDownloadToOneSetOpCollageResultUsingResult)
	t.Run("ResultDownloadToUserUsingResultDownloads", testResultDownloadToOneSetOpUserUsingUser)
	t.Run("TemplatePartToCollagesTemplateUsingTemplateTemplateParts", testTemplatePartToOneSetOpCollagesTemplateUsingTemplate)
	t.Run("UploadImageToGroupUsingUploadImages", testUploadImageToOneSetOpGroupUsingGroup)
	t.Run("UploadImageToTemplatePartUsingPartUploadImages", testUploadImageToOneSetOpTemplatePartUsingPart)
	t.Run("UploadImageToUserUsingUploadImages", testUploadImageToOneSetOpUserUsingUser)
	t.Run("UploadImagesCollageResultToUploadImageUsingImageUploadImagesCollageResults", testUploadImagesCollageResultToOneSetOpUploadImageUsingImage)
	t.Run("UploadImagesCollageResultToCollageResultUsingResultUploadImagesCollageResults", testUploadImagesCollageResultToOneSetOpCollageResultUsingResult)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("UploadImageToTemplatePartUsingPartUploadImages", testUploadImageToOneRemoveOpTemplatePartUsingPart)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CollageResultToResultResultDownloads", testCollageResultToManyAddOpResultResultDownloads)
	t.Run("CollageResultToResultUploadImagesCollageResults", testCollageResultToManyAddOpResultUploadImagesCollageResults)
	t.Run("CollagesTemplateToTemplateCollageResults", testCollagesTemplateToManyAddOpTemplateCollageResults)
	t.Run("CollagesTemplateToTemplateTemplateParts", testCollagesTemplateToManyAddOpTemplateTemplateParts)
	t.Run("GroupToCollageResults", testGroupToManyAddOpCollageResults)
	t.Run("GroupToGroupMembers", testGroupToManyAddOpGroupMembers)
	t.Run("GroupToGroupPartAssignments", testGroupToManyAddOpGroupPartAssignments)
	t.Run("GroupToUploadImages", testGroupToManyAddOpUploadImages)
	t.Run("TemplatePartToPartGroupPartAssignments", testTemplatePartToManyAddOpPartGroupPartAssignments)
	t.Run("TemplatePartToPartUploadImages", testTemplatePartToManyAddOpPartUploadImages)
	t.Run("UploadImageToImageUploadImagesCollageResults", testUploadImageToManyAddOpImageUploadImagesCollageResults)
	t.Run("UserToDeviceTokens", testUserToManyAddOpDeviceTokens)
	t.Run("UserToAddresseeFriends", testUserToManyAddOpAddresseeFriends)
	t.Run("UserToRequesterFriends", testUserToManyAddOpRequesterFriends)
	t.Run("UserToGroupMembers", testUserToManyAddOpGroupMembers)
	t.Run("UserToGroupPartAssignments", testUserToManyAddOpGroupPartAssignments)
	t.Run("UserToOwnerUserGroups", testUserToManyAddOpOwnerUserGroups)
	t.Run("UserToResultDownloads", testUserToManyAddOpResultDownloads)
	t.Run("UserToUploadImages", testUserToManyAddOpUploadImages)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("TemplatePartToPartUploadImages", testTemplatePartToManySetOpPartUploadImages)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("TemplatePartToPartUploadImages", testTemplatePartToManyRemoveOpPartUploadImages)
}
