// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ResultDownload is an object representing the database table.
type ResultDownload struct {
	// çµæžœID
	ResultID string `boil:"result_id" json:"result_id" toml:"result_id" yaml:"result_id"`
	// ãƒ¦ãƒ¼ã‚¶ãƒ¼ID
	UserID string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// ãƒ€ã‚¦ãƒ³ãƒ­ãƒ¼ãƒ‰æ—¥æ™‚
	DownloadedAt time.Time `boil:"downloaded_at" json:"downloaded_at" toml:"downloaded_at" yaml:"downloaded_at"`

	R *resultDownloadR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L resultDownloadL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ResultDownloadColumns = struct {
	ResultID     string
	UserID       string
	DownloadedAt string
}{
	ResultID:     "result_id",
	UserID:       "user_id",
	DownloadedAt: "downloaded_at",
}

var ResultDownloadTableColumns = struct {
	ResultID     string
	UserID       string
	DownloadedAt string
}{
	ResultID:     "result_download.result_id",
	UserID:       "result_download.user_id",
	DownloadedAt: "result_download.downloaded_at",
}

// Generated where

var ResultDownloadWhere = struct {
	ResultID     whereHelperstring
	UserID       whereHelperstring
	DownloadedAt whereHelpertime_Time
}{
	ResultID:     whereHelperstring{field: "`result_download`.`result_id`"},
	UserID:       whereHelperstring{field: "`result_download`.`user_id`"},
	DownloadedAt: whereHelpertime_Time{field: "`result_download`.`downloaded_at`"},
}

// ResultDownloadRels is where relationship names are stored.
var ResultDownloadRels = struct {
	Result string
	User   string
}{
	Result: "Result",
	User:   "User",
}

// resultDownloadR is where relationships are stored.
type resultDownloadR struct {
	Result *CollageResult `boil:"Result" json:"Result" toml:"Result" yaml:"Result"`
	User   *User          `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*resultDownloadR) NewStruct() *resultDownloadR {
	return &resultDownloadR{}
}

func (o *ResultDownload) GetResult() *CollageResult {
	if o == nil {
		return nil
	}

	return o.R.GetResult()
}

func (r *resultDownloadR) GetResult() *CollageResult {
	if r == nil {
		return nil
	}

	return r.Result
}

func (o *ResultDownload) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *resultDownloadR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

// resultDownloadL is where Load methods for each relationship are stored.
type resultDownloadL struct{}

var (
	resultDownloadAllColumns            = []string{"result_id", "user_id", "downloaded_at"}
	resultDownloadColumnsWithoutDefault = []string{"result_id", "user_id"}
	resultDownloadColumnsWithDefault    = []string{"downloaded_at"}
	resultDownloadPrimaryKeyColumns     = []string{"result_id", "user_id"}
	resultDownloadGeneratedColumns      = []string{}
)

type (
	// ResultDownloadSlice is an alias for a slice of pointers to ResultDownload.
	// This should almost always be used instead of []ResultDownload.
	ResultDownloadSlice []*ResultDownload
	// ResultDownloadHook is the signature for custom ResultDownload hook methods
	ResultDownloadHook func(context.Context, boil.ContextExecutor, *ResultDownload) error

	resultDownloadQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	resultDownloadType                 = reflect.TypeOf(&ResultDownload{})
	resultDownloadMapping              = queries.MakeStructMapping(resultDownloadType)
	resultDownloadPrimaryKeyMapping, _ = queries.BindMapping(resultDownloadType, resultDownloadMapping, resultDownloadPrimaryKeyColumns)
	resultDownloadInsertCacheMut       sync.RWMutex
	resultDownloadInsertCache          = make(map[string]insertCache)
	resultDownloadUpdateCacheMut       sync.RWMutex
	resultDownloadUpdateCache          = make(map[string]updateCache)
	resultDownloadUpsertCacheMut       sync.RWMutex
	resultDownloadUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var resultDownloadAfterSelectMu sync.Mutex
var resultDownloadAfterSelectHooks []ResultDownloadHook

var resultDownloadBeforeInsertMu sync.Mutex
var resultDownloadBeforeInsertHooks []ResultDownloadHook
var resultDownloadAfterInsertMu sync.Mutex
var resultDownloadAfterInsertHooks []ResultDownloadHook

var resultDownloadBeforeUpdateMu sync.Mutex
var resultDownloadBeforeUpdateHooks []ResultDownloadHook
var resultDownloadAfterUpdateMu sync.Mutex
var resultDownloadAfterUpdateHooks []ResultDownloadHook

var resultDownloadBeforeDeleteMu sync.Mutex
var resultDownloadBeforeDeleteHooks []ResultDownloadHook
var resultDownloadAfterDeleteMu sync.Mutex
var resultDownloadAfterDeleteHooks []ResultDownloadHook

var resultDownloadBeforeUpsertMu sync.Mutex
var resultDownloadBeforeUpsertHooks []ResultDownloadHook
var resultDownloadAfterUpsertMu sync.Mutex
var resultDownloadAfterUpsertHooks []ResultDownloadHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ResultDownload) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resultDownloadAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ResultDownload) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resultDownloadBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ResultDownload) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resultDownloadAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ResultDownload) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resultDownloadBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ResultDownload) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resultDownloadAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ResultDownload) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resultDownloadBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ResultDownload) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resultDownloadAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ResultDownload) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resultDownloadBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ResultDownload) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resultDownloadAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddResultDownloadHook registers your hook function for all future operations.
func AddResultDownloadHook(hookPoint boil.HookPoint, resultDownloadHook ResultDownloadHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		resultDownloadAfterSelectMu.Lock()
		resultDownloadAfterSelectHooks = append(resultDownloadAfterSelectHooks, resultDownloadHook)
		resultDownloadAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		resultDownloadBeforeInsertMu.Lock()
		resultDownloadBeforeInsertHooks = append(resultDownloadBeforeInsertHooks, resultDownloadHook)
		resultDownloadBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		resultDownloadAfterInsertMu.Lock()
		resultDownloadAfterInsertHooks = append(resultDownloadAfterInsertHooks, resultDownloadHook)
		resultDownloadAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		resultDownloadBeforeUpdateMu.Lock()
		resultDownloadBeforeUpdateHooks = append(resultDownloadBeforeUpdateHooks, resultDownloadHook)
		resultDownloadBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		resultDownloadAfterUpdateMu.Lock()
		resultDownloadAfterUpdateHooks = append(resultDownloadAfterUpdateHooks, resultDownloadHook)
		resultDownloadAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		resultDownloadBeforeDeleteMu.Lock()
		resultDownloadBeforeDeleteHooks = append(resultDownloadBeforeDeleteHooks, resultDownloadHook)
		resultDownloadBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		resultDownloadAfterDeleteMu.Lock()
		resultDownloadAfterDeleteHooks = append(resultDownloadAfterDeleteHooks, resultDownloadHook)
		resultDownloadAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		resultDownloadBeforeUpsertMu.Lock()
		resultDownloadBeforeUpsertHooks = append(resultDownloadBeforeUpsertHooks, resultDownloadHook)
		resultDownloadBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		resultDownloadAfterUpsertMu.Lock()
		resultDownloadAfterUpsertHooks = append(resultDownloadAfterUpsertHooks, resultDownloadHook)
		resultDownloadAfterUpsertMu.Unlock()
	}
}

// One returns a single resultDownload record from the query.
func (q resultDownloadQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ResultDownload, error) {
	o := &ResultDownload{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for result_download")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ResultDownload records from the query.
func (q resultDownloadQuery) All(ctx context.Context, exec boil.ContextExecutor) (ResultDownloadSlice, error) {
	var o []*ResultDownload

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ResultDownload slice")
	}

	if len(resultDownloadAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ResultDownload records in the query.
func (q resultDownloadQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count result_download rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q resultDownloadQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if result_download exists")
	}

	return count > 0, nil
}

// Result pointed to by the foreign key.
func (o *ResultDownload) Result(mods ...qm.QueryMod) collageResultQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`result_id` = ?", o.ResultID),
	}

	queryMods = append(queryMods, mods...)

	return CollageResults(queryMods...)
}

// User pointed to by the foreign key.
func (o *ResultDownload) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadResult allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (resultDownloadL) LoadResult(ctx context.Context, e boil.ContextExecutor, singular bool, maybeResultDownload interface{}, mods queries.Applicator) error {
	var slice []*ResultDownload
	var object *ResultDownload

	if singular {
		var ok bool
		object, ok = maybeResultDownload.(*ResultDownload)
		if !ok {
			object = new(ResultDownload)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeResultDownload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeResultDownload))
			}
		}
	} else {
		s, ok := maybeResultDownload.(*[]*ResultDownload)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeResultDownload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeResultDownload))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &resultDownloadR{}
		}
		args[object.ResultID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &resultDownloadR{}
			}

			args[obj.ResultID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`collage_results`),
		qm.WhereIn(`collage_results.result_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CollageResult")
	}

	var resultSlice []*CollageResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CollageResult")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collage_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collage_results")
	}

	if len(collageResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Result = foreign
		if foreign.R == nil {
			foreign.R = &collageResultR{}
		}
		foreign.R.ResultResultDownloads = append(foreign.R.ResultResultDownloads, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ResultID == foreign.ResultID {
				local.R.Result = foreign
				if foreign.R == nil {
					foreign.R = &collageResultR{}
				}
				foreign.R.ResultResultDownloads = append(foreign.R.ResultResultDownloads, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (resultDownloadL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeResultDownload interface{}, mods queries.Applicator) error {
	var slice []*ResultDownload
	var object *ResultDownload

	if singular {
		var ok bool
		object, ok = maybeResultDownload.(*ResultDownload)
		if !ok {
			object = new(ResultDownload)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeResultDownload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeResultDownload))
			}
		}
	} else {
		s, ok := maybeResultDownload.(*[]*ResultDownload)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeResultDownload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeResultDownload))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &resultDownloadR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &resultDownloadR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ResultDownloads = append(foreign.R.ResultDownloads, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ResultDownloads = append(foreign.R.ResultDownloads, local)
				break
			}
		}
	}

	return nil
}

// SetResult of the resultDownload to the related item.
// Sets o.R.Result to related.
// Adds o to related.R.ResultResultDownloads.
func (o *ResultDownload) SetResult(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CollageResult) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `result_download` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"result_id"}),
		strmangle.WhereClause("`", "`", 0, resultDownloadPrimaryKeyColumns),
	)
	values := []interface{}{related.ResultID, o.ResultID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ResultID = related.ResultID
	if o.R == nil {
		o.R = &resultDownloadR{
			Result: related,
		}
	} else {
		o.R.Result = related
	}

	if related.R == nil {
		related.R = &collageResultR{
			ResultResultDownloads: ResultDownloadSlice{o},
		}
	} else {
		related.R.ResultResultDownloads = append(related.R.ResultResultDownloads, o)
	}

	return nil
}

// SetUser of the resultDownload to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ResultDownloads.
func (o *ResultDownload) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `result_download` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, resultDownloadPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ResultID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &resultDownloadR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ResultDownloads: ResultDownloadSlice{o},
		}
	} else {
		related.R.ResultDownloads = append(related.R.ResultDownloads, o)
	}

	return nil
}

// ResultDownloads retrieves all the records using an executor.
func ResultDownloads(mods ...qm.QueryMod) resultDownloadQuery {
	mods = append(mods, qm.From("`result_download`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`result_download`.*"})
	}

	return resultDownloadQuery{q}
}

// FindResultDownload retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindResultDownload(ctx context.Context, exec boil.ContextExecutor, resultID string, userID string, selectCols ...string) (*ResultDownload, error) {
	resultDownloadObj := &ResultDownload{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `result_download` where `result_id`=? AND `user_id`=?", sel,
	)

	q := queries.Raw(query, resultID, userID)

	err := q.Bind(ctx, exec, resultDownloadObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from result_download")
	}

	if err = resultDownloadObj.doAfterSelectHooks(ctx, exec); err != nil {
		return resultDownloadObj, err
	}

	return resultDownloadObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ResultDownload) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no result_download provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(resultDownloadColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	resultDownloadInsertCacheMut.RLock()
	cache, cached := resultDownloadInsertCache[key]
	resultDownloadInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			resultDownloadAllColumns,
			resultDownloadColumnsWithDefault,
			resultDownloadColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(resultDownloadType, resultDownloadMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(resultDownloadType, resultDownloadMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `result_download` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `result_download` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `result_download` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, resultDownloadPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into result_download")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ResultID,
		o.UserID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for result_download")
	}

CacheNoHooks:
	if !cached {
		resultDownloadInsertCacheMut.Lock()
		resultDownloadInsertCache[key] = cache
		resultDownloadInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ResultDownload.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ResultDownload) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	resultDownloadUpdateCacheMut.RLock()
	cache, cached := resultDownloadUpdateCache[key]
	resultDownloadUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			resultDownloadAllColumns,
			resultDownloadPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update result_download, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `result_download` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, resultDownloadPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(resultDownloadType, resultDownloadMapping, append(wl, resultDownloadPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update result_download row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for result_download")
	}

	if !cached {
		resultDownloadUpdateCacheMut.Lock()
		resultDownloadUpdateCache[key] = cache
		resultDownloadUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q resultDownloadQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for result_download")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for result_download")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ResultDownloadSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resultDownloadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `result_download` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, resultDownloadPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in resultDownload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all resultDownload")
	}
	return rowsAff, nil
}

var mySQLResultDownloadUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ResultDownload) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no result_download provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(resultDownloadColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLResultDownloadUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	resultDownloadUpsertCacheMut.RLock()
	cache, cached := resultDownloadUpsertCache[key]
	resultDownloadUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			resultDownloadAllColumns,
			resultDownloadColumnsWithDefault,
			resultDownloadColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			resultDownloadAllColumns,
			resultDownloadPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert result_download, could not build update column list")
		}

		ret := strmangle.SetComplement(resultDownloadAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`result_download`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `result_download` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(resultDownloadType, resultDownloadMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(resultDownloadType, resultDownloadMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for result_download")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(resultDownloadType, resultDownloadMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for result_download")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for result_download")
	}

CacheNoHooks:
	if !cached {
		resultDownloadUpsertCacheMut.Lock()
		resultDownloadUpsertCache[key] = cache
		resultDownloadUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ResultDownload record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ResultDownload) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ResultDownload provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), resultDownloadPrimaryKeyMapping)
	sql := "DELETE FROM `result_download` WHERE `result_id`=? AND `user_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from result_download")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for result_download")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q resultDownloadQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no resultDownloadQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from result_download")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for result_download")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ResultDownloadSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(resultDownloadBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resultDownloadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `result_download` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, resultDownloadPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from resultDownload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for result_download")
	}

	if len(resultDownloadAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ResultDownload) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindResultDownload(ctx, exec, o.ResultID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ResultDownloadSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ResultDownloadSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resultDownloadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `result_download`.* FROM `result_download` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, resultDownloadPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ResultDownloadSlice")
	}

	*o = slice

	return nil
}

// ResultDownloadExists checks if the ResultDownload row exists.
func ResultDownloadExists(ctx context.Context, exec boil.ContextExecutor, resultID string, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `result_download` where `result_id`=? AND `user_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, resultID, userID)
	}
	row := exec.QueryRowContext(ctx, sql, resultID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if result_download exists")
	}

	return exists, nil
}

// Exists checks if the ResultDownload row exists.
func (o *ResultDownload) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ResultDownloadExists(ctx, exec, o.ResultID, o.UserID)
}
