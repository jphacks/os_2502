// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CollageResult is an object representing the database table.
type CollageResult struct { // çµæžœID (UUID)
	ResultID string `boil:"result_id" json:"result_id" toml:"result_id" yaml:"result_id"`
	// ãƒ†ãƒ³ãƒ—ãƒ¬ãƒ¼ãƒˆID
	TemplateID string `boil:"template_id" json:"template_id" toml:"template_id" yaml:"template_id"`
	// ã‚°ãƒ«ãƒ¼ãƒ—ID
	GroupID string `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	// ã‚³ãƒ©ãƒ¼ã‚¸ãƒ¥ç”»åƒURL
	FileURL string `boil:"file_url" json:"file_url" toml:"file_url" yaml:"file_url"`
	// å¯¾è±¡ãƒ¦ãƒ¼ã‚¶ãƒ¼æ•°
	TargetUserNumber int `boil:"target_user_number" json:"target_user_number" toml:"target_user_number" yaml:"target_user_number"`
	// é€šçŸ¥æ¸ˆã¿ãƒ•ãƒ©ã‚°
	IsNotification bool `boil:"is_notification" json:"is_notification" toml:"is_notification" yaml:"is_notification"`
	// ä½œæˆæ—¥æ™‚
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *collageResultR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L collageResultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CollageResultColumns = struct {
	ResultID         string
	TemplateID       string
	GroupID          string
	FileURL          string
	TargetUserNumber string
	IsNotification   string
	CreatedAt        string
}{
	ResultID:         "result_id",
	TemplateID:       "template_id",
	GroupID:          "group_id",
	FileURL:          "file_url",
	TargetUserNumber: "target_user_number",
	IsNotification:   "is_notification",
	CreatedAt:        "created_at",
}

var CollageResultTableColumns = struct {
	ResultID         string
	TemplateID       string
	GroupID          string
	FileURL          string
	TargetUserNumber string
	IsNotification   string
	CreatedAt        string
}{
	ResultID:         "collage_results.result_id",
	TemplateID:       "collage_results.template_id",
	GroupID:          "collage_results.group_id",
	FileURL:          "collage_results.file_url",
	TargetUserNumber: "collage_results.target_user_number",
	IsNotification:   "collage_results.is_notification",
	CreatedAt:        "collage_results.created_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CollageResultWhere = struct {
	ResultID         whereHelperstring
	TemplateID       whereHelperstring
	GroupID          whereHelperstring
	FileURL          whereHelperstring
	TargetUserNumber whereHelperint
	IsNotification   whereHelperbool
	CreatedAt        whereHelpertime_Time
}{
	ResultID:         whereHelperstring{field: "`collage_results`.`result_id`"},
	TemplateID:       whereHelperstring{field: "`collage_results`.`template_id`"},
	GroupID:          whereHelperstring{field: "`collage_results`.`group_id`"},
	FileURL:          whereHelperstring{field: "`collage_results`.`file_url`"},
	TargetUserNumber: whereHelperint{field: "`collage_results`.`target_user_number`"},
	IsNotification:   whereHelperbool{field: "`collage_results`.`is_notification`"},
	CreatedAt:        whereHelpertime_Time{field: "`collage_results`.`created_at`"},
}

// CollageResultRels is where relationship names are stored.
var CollageResultRels = struct {
	Group                            string
	Template                         string
	ResultResultDownloads            string
	ResultUploadImagesCollageResults string
}{
	Group:                            "Group",
	Template:                         "Template",
	ResultResultDownloads:            "ResultResultDownloads",
	ResultUploadImagesCollageResults: "ResultUploadImagesCollageResults",
}

// collageResultR is where relationships are stored.
type collageResultR struct {
	Group                            *Group                         `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
	Template                         *CollagesTemplate              `boil:"Template" json:"Template" toml:"Template" yaml:"Template"`
	ResultResultDownloads            ResultDownloadSlice            `boil:"ResultResultDownloads" json:"ResultResultDownloads" toml:"ResultResultDownloads" yaml:"ResultResultDownloads"`
	ResultUploadImagesCollageResults UploadImagesCollageResultSlice `boil:"ResultUploadImagesCollageResults" json:"ResultUploadImagesCollageResults" toml:"ResultUploadImagesCollageResults" yaml:"ResultUploadImagesCollageResults"`
}

// NewStruct creates a new relationship struct
func (*collageResultR) NewStruct() *collageResultR {
	return &collageResultR{}
}

func (r *collageResultR) GetGroup() *Group {
	if r == nil {
		return nil
	}
	return r.Group
}

func (r *collageResultR) GetTemplate() *CollagesTemplate {
	if r == nil {
		return nil
	}
	return r.Template
}

func (r *collageResultR) GetResultResultDownloads() ResultDownloadSlice {
	if r == nil {
		return nil
	}
	return r.ResultResultDownloads
}

func (r *collageResultR) GetResultUploadImagesCollageResults() UploadImagesCollageResultSlice {
	if r == nil {
		return nil
	}
	return r.ResultUploadImagesCollageResults
}

// collageResultL is where Load methods for each relationship are stored.
type collageResultL struct{}

var (
	collageResultAllColumns            = []string{"result_id", "template_id", "group_id", "file_url", "target_user_number", "is_notification", "created_at"}
	collageResultColumnsWithoutDefault = []string{"result_id", "template_id", "group_id", "file_url", "target_user_number"}
	collageResultColumnsWithDefault    = []string{"is_notification", "created_at"}
	collageResultPrimaryKeyColumns     = []string{"result_id"}
	collageResultGeneratedColumns      = []string{}
)

type (
	// CollageResultSlice is an alias for a slice of pointers to CollageResult.
	// This should almost always be used instead of []CollageResult.
	CollageResultSlice []*CollageResult
	// CollageResultHook is the signature for custom CollageResult hook methods
	CollageResultHook func(context.Context, boil.ContextExecutor, *CollageResult) error

	collageResultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	collageResultType                 = reflect.TypeOf(&CollageResult{})
	collageResultMapping              = queries.MakeStructMapping(collageResultType)
	collageResultPrimaryKeyMapping, _ = queries.BindMapping(collageResultType, collageResultMapping, collageResultPrimaryKeyColumns)
	collageResultInsertCacheMut       sync.RWMutex
	collageResultInsertCache          = make(map[string]insertCache)
	collageResultUpdateCacheMut       sync.RWMutex
	collageResultUpdateCache          = make(map[string]updateCache)
	collageResultUpsertCacheMut       sync.RWMutex
	collageResultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var collageResultAfterSelectMu sync.Mutex
var collageResultAfterSelectHooks []CollageResultHook

var collageResultBeforeInsertMu sync.Mutex
var collageResultBeforeInsertHooks []CollageResultHook
var collageResultAfterInsertMu sync.Mutex
var collageResultAfterInsertHooks []CollageResultHook

var collageResultBeforeUpdateMu sync.Mutex
var collageResultBeforeUpdateHooks []CollageResultHook
var collageResultAfterUpdateMu sync.Mutex
var collageResultAfterUpdateHooks []CollageResultHook

var collageResultBeforeDeleteMu sync.Mutex
var collageResultBeforeDeleteHooks []CollageResultHook
var collageResultAfterDeleteMu sync.Mutex
var collageResultAfterDeleteHooks []CollageResultHook

var collageResultBeforeUpsertMu sync.Mutex
var collageResultBeforeUpsertHooks []CollageResultHook
var collageResultAfterUpsertMu sync.Mutex
var collageResultAfterUpsertHooks []CollageResultHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CollageResult) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collageResultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CollageResult) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collageResultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CollageResult) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collageResultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CollageResult) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collageResultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CollageResult) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collageResultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CollageResult) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collageResultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CollageResult) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collageResultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CollageResult) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collageResultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CollageResult) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collageResultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCollageResultHook registers your hook function for all future operations.
func AddCollageResultHook(hookPoint boil.HookPoint, collageResultHook CollageResultHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		collageResultAfterSelectMu.Lock()
		collageResultAfterSelectHooks = append(collageResultAfterSelectHooks, collageResultHook)
		collageResultAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		collageResultBeforeInsertMu.Lock()
		collageResultBeforeInsertHooks = append(collageResultBeforeInsertHooks, collageResultHook)
		collageResultBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		collageResultAfterInsertMu.Lock()
		collageResultAfterInsertHooks = append(collageResultAfterInsertHooks, collageResultHook)
		collageResultAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		collageResultBeforeUpdateMu.Lock()
		collageResultBeforeUpdateHooks = append(collageResultBeforeUpdateHooks, collageResultHook)
		collageResultBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		collageResultAfterUpdateMu.Lock()
		collageResultAfterUpdateHooks = append(collageResultAfterUpdateHooks, collageResultHook)
		collageResultAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		collageResultBeforeDeleteMu.Lock()
		collageResultBeforeDeleteHooks = append(collageResultBeforeDeleteHooks, collageResultHook)
		collageResultBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		collageResultAfterDeleteMu.Lock()
		collageResultAfterDeleteHooks = append(collageResultAfterDeleteHooks, collageResultHook)
		collageResultAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		collageResultBeforeUpsertMu.Lock()
		collageResultBeforeUpsertHooks = append(collageResultBeforeUpsertHooks, collageResultHook)
		collageResultBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		collageResultAfterUpsertMu.Lock()
		collageResultAfterUpsertHooks = append(collageResultAfterUpsertHooks, collageResultHook)
		collageResultAfterUpsertMu.Unlock()
	}
}

// One returns a single collageResult record from the query.
func (q collageResultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CollageResult, error) {
	o := &CollageResult{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for collage_results")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CollageResult records from the query.
func (q collageResultQuery) All(ctx context.Context, exec boil.ContextExecutor) (CollageResultSlice, error) {
	var o []*CollageResult

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CollageResult slice")
	}

	if len(collageResultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CollageResult records in the query.
func (q collageResultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count collage_results rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q collageResultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if collage_results exists")
	}

	return count > 0, nil
}

// Group pointed to by the foreign key.
func (o *CollageResult) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// Template pointed to by the foreign key.
func (o *CollageResult) Template(mods ...qm.QueryMod) collagesTemplateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`template_id` = ?", o.TemplateID),
	}

	queryMods = append(queryMods, mods...)

	return CollagesTemplates(queryMods...)
}

// ResultResultDownloads retrieves all the result_download's ResultDownloads with an executor via result_id column.
func (o *CollageResult) ResultResultDownloads(mods ...qm.QueryMod) resultDownloadQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`result_download`.`result_id`=?", o.ResultID),
	)

	return ResultDownloads(queryMods...)
}

// ResultUploadImagesCollageResults retrieves all the upload_images_collage_result's UploadImagesCollageResults with an executor via result_id column.
func (o *CollageResult) ResultUploadImagesCollageResults(mods ...qm.QueryMod) uploadImagesCollageResultQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`upload_images_collage_results`.`result_id`=?", o.ResultID),
	)

	return UploadImagesCollageResults(queryMods...)
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (collageResultL) LoadGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollageResult interface{}, mods queries.Applicator) error {
	var slice []*CollageResult
	var object *CollageResult

	if singular {
		var ok bool
		object, ok = maybeCollageResult.(*CollageResult)
		if !ok {
			object = new(CollageResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollageResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollageResult))
			}
		}
	} else {
		s, ok := maybeCollageResult.(*[]*CollageResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollageResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollageResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &collageResultR{}
		}
		args[object.GroupID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collageResultR{}
			}

			args[obj.GroupID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.CollageResults = append(foreign.R.CollageResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupID == foreign.ID {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.CollageResults = append(foreign.R.CollageResults, local)
				break
			}
		}
	}

	return nil
}

// LoadTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (collageResultL) LoadTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollageResult interface{}, mods queries.Applicator) error {
	var slice []*CollageResult
	var object *CollageResult

	if singular {
		var ok bool
		object, ok = maybeCollageResult.(*CollageResult)
		if !ok {
			object = new(CollageResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollageResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollageResult))
			}
		}
	} else {
		s, ok := maybeCollageResult.(*[]*CollageResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollageResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollageResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &collageResultR{}
		}
		args[object.TemplateID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collageResultR{}
			}

			args[obj.TemplateID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`collages_template`),
		qm.WhereIn(`collages_template.template_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CollagesTemplate")
	}

	var resultSlice []*CollagesTemplate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CollagesTemplate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collages_template")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collages_template")
	}

	if len(collagesTemplateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Template = foreign
		if foreign.R == nil {
			foreign.R = &collagesTemplateR{}
		}
		foreign.R.TemplateCollageResults = append(foreign.R.TemplateCollageResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateID == foreign.TemplateID {
				local.R.Template = foreign
				if foreign.R == nil {
					foreign.R = &collagesTemplateR{}
				}
				foreign.R.TemplateCollageResults = append(foreign.R.TemplateCollageResults, local)
				break
			}
		}
	}

	return nil
}

// LoadResultResultDownloads allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (collageResultL) LoadResultResultDownloads(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollageResult interface{}, mods queries.Applicator) error {
	var slice []*CollageResult
	var object *CollageResult

	if singular {
		var ok bool
		object, ok = maybeCollageResult.(*CollageResult)
		if !ok {
			object = new(CollageResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollageResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollageResult))
			}
		}
	} else {
		s, ok := maybeCollageResult.(*[]*CollageResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollageResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollageResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &collageResultR{}
		}
		args[object.ResultID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collageResultR{}
			}
			args[obj.ResultID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`result_download`),
		qm.WhereIn(`result_download.result_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load result_download")
	}

	var resultSlice []*ResultDownload
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice result_download")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on result_download")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for result_download")
	}

	if len(resultDownloadAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResultResultDownloads = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &resultDownloadR{}
			}
			foreign.R.Result = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ResultID == foreign.ResultID {
				local.R.ResultResultDownloads = append(local.R.ResultResultDownloads, foreign)
				if foreign.R == nil {
					foreign.R = &resultDownloadR{}
				}
				foreign.R.Result = local
				break
			}
		}
	}

	return nil
}

// LoadResultUploadImagesCollageResults allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (collageResultL) LoadResultUploadImagesCollageResults(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollageResult interface{}, mods queries.Applicator) error {
	var slice []*CollageResult
	var object *CollageResult

	if singular {
		var ok bool
		object, ok = maybeCollageResult.(*CollageResult)
		if !ok {
			object = new(CollageResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollageResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollageResult))
			}
		}
	} else {
		s, ok := maybeCollageResult.(*[]*CollageResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollageResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollageResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &collageResultR{}
		}
		args[object.ResultID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collageResultR{}
			}
			args[obj.ResultID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`upload_images_collage_results`),
		qm.WhereIn(`upload_images_collage_results.result_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upload_images_collage_results")
	}

	var resultSlice []*UploadImagesCollageResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upload_images_collage_results")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on upload_images_collage_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for upload_images_collage_results")
	}

	if len(uploadImagesCollageResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResultUploadImagesCollageResults = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &uploadImagesCollageResultR{}
			}
			foreign.R.Result = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ResultID == foreign.ResultID {
				local.R.ResultUploadImagesCollageResults = append(local.R.ResultUploadImagesCollageResults, foreign)
				if foreign.R == nil {
					foreign.R = &uploadImagesCollageResultR{}
				}
				foreign.R.Result = local
				break
			}
		}
	}

	return nil
}

// SetGroup of the collageResult to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.CollageResults.
func (o *CollageResult) SetGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `collage_results` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
		strmangle.WhereClause("`", "`", 0, collageResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ResultID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupID = related.ID
	if o.R == nil {
		o.R = &collageResultR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			CollageResults: CollageResultSlice{o},
		}
	} else {
		related.R.CollageResults = append(related.R.CollageResults, o)
	}

	return nil
}

// SetTemplate of the collageResult to the related item.
// Sets o.R.Template to related.
// Adds o to related.R.TemplateCollageResults.
func (o *CollageResult) SetTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CollagesTemplate) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `collage_results` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"template_id"}),
		strmangle.WhereClause("`", "`", 0, collageResultPrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateID, o.ResultID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplateID = related.TemplateID
	if o.R == nil {
		o.R = &collageResultR{
			Template: related,
		}
	} else {
		o.R.Template = related
	}

	if related.R == nil {
		related.R = &collagesTemplateR{
			TemplateCollageResults: CollageResultSlice{o},
		}
	} else {
		related.R.TemplateCollageResults = append(related.R.TemplateCollageResults, o)
	}

	return nil
}

// AddResultResultDownloads adds the given related objects to the existing relationships
// of the collage_result, optionally inserting them as new records.
// Appends related to o.R.ResultResultDownloads.
// Sets related.R.Result appropriately.
func (o *CollageResult) AddResultResultDownloads(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ResultDownload) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ResultID = o.ResultID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `result_download` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"result_id"}),
				strmangle.WhereClause("`", "`", 0, resultDownloadPrimaryKeyColumns),
			)
			values := []interface{}{o.ResultID, rel.ResultID, rel.UserID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ResultID = o.ResultID
		}
	}

	if o.R == nil {
		o.R = &collageResultR{
			ResultResultDownloads: related,
		}
	} else {
		o.R.ResultResultDownloads = append(o.R.ResultResultDownloads, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &resultDownloadR{
				Result: o,
			}
		} else {
			rel.R.Result = o
		}
	}
	return nil
}

// AddResultUploadImagesCollageResults adds the given related objects to the existing relationships
// of the collage_result, optionally inserting them as new records.
// Appends related to o.R.ResultUploadImagesCollageResults.
// Sets related.R.Result appropriately.
func (o *CollageResult) AddResultUploadImagesCollageResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UploadImagesCollageResult) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ResultID = o.ResultID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `upload_images_collage_results` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"result_id"}),
				strmangle.WhereClause("`", "`", 0, uploadImagesCollageResultPrimaryKeyColumns),
			)
			values := []interface{}{o.ResultID, rel.ImageID, rel.ResultID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ResultID = o.ResultID
		}
	}

	if o.R == nil {
		o.R = &collageResultR{
			ResultUploadImagesCollageResults: related,
		}
	} else {
		o.R.ResultUploadImagesCollageResults = append(o.R.ResultUploadImagesCollageResults, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &uploadImagesCollageResultR{
				Result: o,
			}
		} else {
			rel.R.Result = o
		}
	}
	return nil
}

// CollageResults retrieves all the records using an executor.
func CollageResults(mods ...qm.QueryMod) collageResultQuery {
	mods = append(mods, qm.From("`collage_results`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`collage_results`.*"})
	}

	return collageResultQuery{q}
}

// FindCollageResult retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCollageResult(ctx context.Context, exec boil.ContextExecutor, resultID string, selectCols ...string) (*CollageResult, error) {
	collageResultObj := &CollageResult{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `collage_results` where `result_id`=?", sel,
	)

	q := queries.Raw(query, resultID)

	err := q.Bind(ctx, exec, collageResultObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from collage_results")
	}

	if err = collageResultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return collageResultObj, err
	}

	return collageResultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CollageResult) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no collage_results provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(collageResultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	collageResultInsertCacheMut.RLock()
	cache, cached := collageResultInsertCache[key]
	collageResultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			collageResultAllColumns,
			collageResultColumnsWithDefault,
			collageResultColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(collageResultType, collageResultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(collageResultType, collageResultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `collage_results` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `collage_results` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `collage_results` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, collageResultPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into collage_results")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ResultID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for collage_results")
	}

CacheNoHooks:
	if !cached {
		collageResultInsertCacheMut.Lock()
		collageResultInsertCache[key] = cache
		collageResultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CollageResult.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CollageResult) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	collageResultUpdateCacheMut.RLock()
	cache, cached := collageResultUpdateCache[key]
	collageResultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			collageResultAllColumns,
			collageResultPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update collage_results, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `collage_results` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, collageResultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(collageResultType, collageResultMapping, append(wl, collageResultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update collage_results row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for collage_results")
	}

	if !cached {
		collageResultUpdateCacheMut.Lock()
		collageResultUpdateCache[key] = cache
		collageResultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q collageResultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for collage_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for collage_results")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CollageResultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collageResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `collage_results` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, collageResultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in collageResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all collageResult")
	}
	return rowsAff, nil
}

var mySQLCollageResultUniqueColumns = []string{
	"result_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CollageResult) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no collage_results provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(collageResultColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCollageResultUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	collageResultUpsertCacheMut.RLock()
	cache, cached := collageResultUpsertCache[key]
	collageResultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			collageResultAllColumns,
			collageResultColumnsWithDefault,
			collageResultColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			collageResultAllColumns,
			collageResultPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert collage_results, could not build update column list")
		}

		ret := strmangle.SetComplement(collageResultAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`collage_results`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `collage_results` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(collageResultType, collageResultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(collageResultType, collageResultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for collage_results")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(collageResultType, collageResultMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for collage_results")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for collage_results")
	}

CacheNoHooks:
	if !cached {
		collageResultUpsertCacheMut.Lock()
		collageResultUpsertCache[key] = cache
		collageResultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CollageResult record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CollageResult) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CollageResult provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), collageResultPrimaryKeyMapping)
	sql := "DELETE FROM `collage_results` WHERE `result_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from collage_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for collage_results")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q collageResultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no collageResultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from collage_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for collage_results")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CollageResultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(collageResultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collageResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `collage_results` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, collageResultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from collageResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for collage_results")
	}

	if len(collageResultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CollageResult) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCollageResult(ctx, exec, o.ResultID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CollageResultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CollageResultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collageResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `collage_results`.* FROM `collage_results` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, collageResultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CollageResultSlice")
	}

	*o = slice

	return nil
}

// CollageResultExists checks if the CollageResult row exists.
func CollageResultExists(ctx context.Context, exec boil.ContextExecutor, resultID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `collage_results` where `result_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, resultID)
	}
	row := exec.QueryRowContext(ctx, sql, resultID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if collage_results exists")
	}

	return exists, nil
}

// Exists checks if the CollageResult row exists.
func (o *CollageResult) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CollageResultExists(ctx, exec, o.ResultID)
}
