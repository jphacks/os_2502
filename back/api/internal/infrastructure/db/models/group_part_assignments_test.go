// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGroupPartAssignments(t *testing.T) {
	t.Parallel()

	query := GroupPartAssignments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGroupPartAssignmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupPartAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupPartAssignmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GroupPartAssignments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupPartAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupPartAssignmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GroupPartAssignmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupPartAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupPartAssignmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GroupPartAssignmentExists(ctx, tx, o.AssignmentID)
	if err != nil {
		t.Errorf("Unable to check if GroupPartAssignment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GroupPartAssignmentExists to return true, but got false.")
	}
}

func testGroupPartAssignmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	groupPartAssignmentFound, err := FindGroupPartAssignment(ctx, tx, o.AssignmentID)
	if err != nil {
		t.Error(err)
	}

	if groupPartAssignmentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGroupPartAssignmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GroupPartAssignments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGroupPartAssignmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GroupPartAssignments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGroupPartAssignmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	groupPartAssignmentOne := &GroupPartAssignment{}
	groupPartAssignmentTwo := &GroupPartAssignment{}
	if err = randomize.Struct(seed, groupPartAssignmentOne, groupPartAssignmentDBTypes, false, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}
	if err = randomize.Struct(seed, groupPartAssignmentTwo, groupPartAssignmentDBTypes, false, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = groupPartAssignmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = groupPartAssignmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GroupPartAssignments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGroupPartAssignmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	groupPartAssignmentOne := &GroupPartAssignment{}
	groupPartAssignmentTwo := &GroupPartAssignment{}
	if err = randomize.Struct(seed, groupPartAssignmentOne, groupPartAssignmentDBTypes, false, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}
	if err = randomize.Struct(seed, groupPartAssignmentTwo, groupPartAssignmentDBTypes, false, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = groupPartAssignmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = groupPartAssignmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupPartAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func groupPartAssignmentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupPartAssignment) error {
	*o = GroupPartAssignment{}
	return nil
}

func groupPartAssignmentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupPartAssignment) error {
	*o = GroupPartAssignment{}
	return nil
}

func groupPartAssignmentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GroupPartAssignment) error {
	*o = GroupPartAssignment{}
	return nil
}

func groupPartAssignmentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GroupPartAssignment) error {
	*o = GroupPartAssignment{}
	return nil
}

func groupPartAssignmentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GroupPartAssignment) error {
	*o = GroupPartAssignment{}
	return nil
}

func groupPartAssignmentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GroupPartAssignment) error {
	*o = GroupPartAssignment{}
	return nil
}

func groupPartAssignmentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GroupPartAssignment) error {
	*o = GroupPartAssignment{}
	return nil
}

func groupPartAssignmentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupPartAssignment) error {
	*o = GroupPartAssignment{}
	return nil
}

func groupPartAssignmentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupPartAssignment) error {
	*o = GroupPartAssignment{}
	return nil
}

func testGroupPartAssignmentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GroupPartAssignment{}
	o := &GroupPartAssignment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment object: %s", err)
	}

	AddGroupPartAssignmentHook(boil.BeforeInsertHook, groupPartAssignmentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	groupPartAssignmentBeforeInsertHooks = []GroupPartAssignmentHook{}

	AddGroupPartAssignmentHook(boil.AfterInsertHook, groupPartAssignmentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	groupPartAssignmentAfterInsertHooks = []GroupPartAssignmentHook{}

	AddGroupPartAssignmentHook(boil.AfterSelectHook, groupPartAssignmentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	groupPartAssignmentAfterSelectHooks = []GroupPartAssignmentHook{}

	AddGroupPartAssignmentHook(boil.BeforeUpdateHook, groupPartAssignmentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	groupPartAssignmentBeforeUpdateHooks = []GroupPartAssignmentHook{}

	AddGroupPartAssignmentHook(boil.AfterUpdateHook, groupPartAssignmentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	groupPartAssignmentAfterUpdateHooks = []GroupPartAssignmentHook{}

	AddGroupPartAssignmentHook(boil.BeforeDeleteHook, groupPartAssignmentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	groupPartAssignmentBeforeDeleteHooks = []GroupPartAssignmentHook{}

	AddGroupPartAssignmentHook(boil.AfterDeleteHook, groupPartAssignmentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	groupPartAssignmentAfterDeleteHooks = []GroupPartAssignmentHook{}

	AddGroupPartAssignmentHook(boil.BeforeUpsertHook, groupPartAssignmentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	groupPartAssignmentBeforeUpsertHooks = []GroupPartAssignmentHook{}

	AddGroupPartAssignmentHook(boil.AfterUpsertHook, groupPartAssignmentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	groupPartAssignmentAfterUpsertHooks = []GroupPartAssignmentHook{}
}

func testGroupPartAssignmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupPartAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGroupPartAssignmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(groupPartAssignmentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GroupPartAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGroupPartAssignmentToOneGroupUsingGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GroupPartAssignment
	var foreign Group

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, groupPartAssignmentDBTypes, false, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, groupDBTypes, false, groupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Group struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GroupID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddGroupHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Group) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GroupPartAssignmentSlice{&local}
	if err = local.L.LoadGroup(ctx, tx, false, (*[]*GroupPartAssignment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGroupPartAssignmentToOneTemplatePartUsingPart(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GroupPartAssignment
	var foreign TemplatePart

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, groupPartAssignmentDBTypes, false, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, templatePartDBTypes, false, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PartID = foreign.PartID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Part().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PartID != foreign.PartID {
		t.Errorf("want: %v, got %v", foreign.PartID, check.PartID)
	}

	ranAfterSelectHook := false
	AddTemplatePartHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *TemplatePart) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GroupPartAssignmentSlice{&local}
	if err = local.L.LoadPart(ctx, tx, false, (*[]*GroupPartAssignment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Part == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Part = nil
	if err = local.L.LoadPart(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Part == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGroupPartAssignmentToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GroupPartAssignment
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, groupPartAssignmentDBTypes, false, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GroupPartAssignmentSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*GroupPartAssignment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGroupPartAssignmentToOneSetOpGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroupPartAssignment
	var b, c Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groupPartAssignmentDBTypes, false, strmangle.SetComplement(groupPartAssignmentPrimaryKeyColumns, groupPartAssignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Group{&b, &c} {
		err = a.SetGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GroupPartAssignments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID, x.ID)
		}
	}
}
func testGroupPartAssignmentToOneSetOpTemplatePartUsingPart(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroupPartAssignment
	var b, c TemplatePart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groupPartAssignmentDBTypes, false, strmangle.SetComplement(groupPartAssignmentPrimaryKeyColumns, groupPartAssignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, templatePartDBTypes, false, strmangle.SetComplement(templatePartPrimaryKeyColumns, templatePartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, templatePartDBTypes, false, strmangle.SetComplement(templatePartPrimaryKeyColumns, templatePartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*TemplatePart{&b, &c} {
		err = a.SetPart(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Part != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PartGroupPartAssignments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PartID != x.PartID {
			t.Error("foreign key was wrong value", a.PartID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PartID))
		reflect.Indirect(reflect.ValueOf(&a.PartID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PartID != x.PartID {
			t.Error("foreign key was wrong value", a.PartID, x.PartID)
		}
	}
}
func testGroupPartAssignmentToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroupPartAssignment
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groupPartAssignmentDBTypes, false, strmangle.SetComplement(groupPartAssignmentPrimaryKeyColumns, groupPartAssignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GroupPartAssignments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testGroupPartAssignmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGroupPartAssignmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GroupPartAssignmentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGroupPartAssignmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GroupPartAssignments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	groupPartAssignmentDBTypes = map[string]string{`AssignmentID`: `char`, `GroupID`: `char`, `UserID`: `char`, `PartID`: `char`, `CollageDay`: `date`, `AssignedAt`: `timestamp`}
	_                          = bytes.MinRead
)

func testGroupPartAssignmentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(groupPartAssignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(groupPartAssignmentAllColumns) == len(groupPartAssignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupPartAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGroupPartAssignmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(groupPartAssignmentAllColumns) == len(groupPartAssignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GroupPartAssignment{}
	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupPartAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, groupPartAssignmentDBTypes, true, groupPartAssignmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(groupPartAssignmentAllColumns, groupPartAssignmentPrimaryKeyColumns) {
		fields = groupPartAssignmentAllColumns
	} else {
		fields = strmangle.SetComplement(
			groupPartAssignmentAllColumns,
			groupPartAssignmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GroupPartAssignmentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGroupPartAssignmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(groupPartAssignmentAllColumns) == len(groupPartAssignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLGroupPartAssignmentUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GroupPartAssignment{}
	if err = randomize.Struct(seed, &o, groupPartAssignmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GroupPartAssignment: %s", err)
	}

	count, err := GroupPartAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, groupPartAssignmentDBTypes, false, groupPartAssignmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupPartAssignment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GroupPartAssignment: %s", err)
	}

	count, err = GroupPartAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
