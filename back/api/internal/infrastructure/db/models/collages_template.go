// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
)

// CollagesTemplate is an object representing the database table.
type CollagesTemplate struct { // ãƒ†ãƒ³ãƒ—ãƒ¬ãƒ¼ãƒˆID (UUID)
	TemplateID string `boil:"template_id" json:"template_id" toml:"template_id" yaml:"template_id"`
	// ãƒ†ãƒ³ãƒ—ãƒ¬ãƒ¼ãƒˆå
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// ãƒ†ãƒ³ãƒ—ãƒ¬ãƒ¼ãƒˆãƒ•ã‚¡ã‚¤ãƒ«ãƒ‘ã‚¹
	FilePath string `boil:"file_path" json:"file_path" toml:"file_path" yaml:"file_path"`
	// ä½œæˆæ—¥æ™‚
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// æ›´æ–°æ—¥æ™‚
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *collagesTemplateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L collagesTemplateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CollagesTemplateColumns = struct {
	TemplateID string
	Name       string
	FilePath   string
	CreatedAt  string
	UpdatedAt  string
}{
	TemplateID: "template_id",
	Name:       "name",
	FilePath:   "file_path",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var CollagesTemplateTableColumns = struct {
	TemplateID string
	Name       string
	FilePath   string
	CreatedAt  string
	UpdatedAt  string
}{
	TemplateID: "collages_template.template_id",
	Name:       "collages_template.name",
	FilePath:   "collages_template.file_path",
	CreatedAt:  "collages_template.created_at",
	UpdatedAt:  "collages_template.updated_at",
}

// Generated where

var CollagesTemplateWhere = struct {
	TemplateID whereHelperstring
	Name       whereHelperstring
	FilePath   whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	TemplateID: whereHelperstring{field: "`collages_template`.`template_id`"},
	Name:       whereHelperstring{field: "`collages_template`.`name`"},
	FilePath:   whereHelperstring{field: "`collages_template`.`file_path`"},
	CreatedAt:  whereHelpertime_Time{field: "`collages_template`.`created_at`"},
	UpdatedAt:  whereHelpertime_Time{field: "`collages_template`.`updated_at`"},
}

// CollagesTemplateRels is where relationship names are stored.
var CollagesTemplateRels = struct {
	TemplateCollageResults string
	TemplateTemplateParts  string
}{
	TemplateCollageResults: "TemplateCollageResults",
	TemplateTemplateParts:  "TemplateTemplateParts",
}

// collagesTemplateR is where relationships are stored.
type collagesTemplateR struct {
	TemplateCollageResults CollageResultSlice `boil:"TemplateCollageResults" json:"TemplateCollageResults" toml:"TemplateCollageResults" yaml:"TemplateCollageResults"`
	TemplateTemplateParts  TemplatePartSlice  `boil:"TemplateTemplateParts" json:"TemplateTemplateParts" toml:"TemplateTemplateParts" yaml:"TemplateTemplateParts"`
}

// NewStruct creates a new relationship struct
func (*collagesTemplateR) NewStruct() *collagesTemplateR {
	return &collagesTemplateR{}
}

func (r *collagesTemplateR) GetTemplateCollageResults() CollageResultSlice {
	if r == nil {
		return nil
	}
	return r.TemplateCollageResults
}

func (r *collagesTemplateR) GetTemplateTemplateParts() TemplatePartSlice {
	if r == nil {
		return nil
	}
	return r.TemplateTemplateParts
}

// collagesTemplateL is where Load methods for each relationship are stored.
type collagesTemplateL struct{}

var (
	collagesTemplateAllColumns            = []string{"template_id", "name", "file_path", "created_at", "updated_at"}
	collagesTemplateColumnsWithoutDefault = []string{"template_id", "name", "file_path"}
	collagesTemplateColumnsWithDefault    = []string{"created_at", "updated_at"}
	collagesTemplatePrimaryKeyColumns     = []string{"template_id"}
	collagesTemplateGeneratedColumns      = []string{}
)

type (
	// CollagesTemplateSlice is an alias for a slice of pointers to CollagesTemplate.
	// This should almost always be used instead of []CollagesTemplate.
	CollagesTemplateSlice []*CollagesTemplate
	// CollagesTemplateHook is the signature for custom CollagesTemplate hook methods
	CollagesTemplateHook func(context.Context, boil.ContextExecutor, *CollagesTemplate) error

	collagesTemplateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	collagesTemplateType                 = reflect.TypeOf(&CollagesTemplate{})
	collagesTemplateMapping              = queries.MakeStructMapping(collagesTemplateType)
	collagesTemplatePrimaryKeyMapping, _ = queries.BindMapping(collagesTemplateType, collagesTemplateMapping, collagesTemplatePrimaryKeyColumns)
	collagesTemplateInsertCacheMut       sync.RWMutex
	collagesTemplateInsertCache          = make(map[string]insertCache)
	collagesTemplateUpdateCacheMut       sync.RWMutex
	collagesTemplateUpdateCache          = make(map[string]updateCache)
	collagesTemplateUpsertCacheMut       sync.RWMutex
	collagesTemplateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var collagesTemplateAfterSelectMu sync.Mutex
var collagesTemplateAfterSelectHooks []CollagesTemplateHook

var collagesTemplateBeforeInsertMu sync.Mutex
var collagesTemplateBeforeInsertHooks []CollagesTemplateHook
var collagesTemplateAfterInsertMu sync.Mutex
var collagesTemplateAfterInsertHooks []CollagesTemplateHook

var collagesTemplateBeforeUpdateMu sync.Mutex
var collagesTemplateBeforeUpdateHooks []CollagesTemplateHook
var collagesTemplateAfterUpdateMu sync.Mutex
var collagesTemplateAfterUpdateHooks []CollagesTemplateHook

var collagesTemplateBeforeDeleteMu sync.Mutex
var collagesTemplateBeforeDeleteHooks []CollagesTemplateHook
var collagesTemplateAfterDeleteMu sync.Mutex
var collagesTemplateAfterDeleteHooks []CollagesTemplateHook

var collagesTemplateBeforeUpsertMu sync.Mutex
var collagesTemplateBeforeUpsertHooks []CollagesTemplateHook
var collagesTemplateAfterUpsertMu sync.Mutex
var collagesTemplateAfterUpsertHooks []CollagesTemplateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CollagesTemplate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collagesTemplateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CollagesTemplate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collagesTemplateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CollagesTemplate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collagesTemplateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CollagesTemplate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collagesTemplateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CollagesTemplate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collagesTemplateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CollagesTemplate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collagesTemplateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CollagesTemplate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collagesTemplateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CollagesTemplate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collagesTemplateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CollagesTemplate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collagesTemplateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCollagesTemplateHook registers your hook function for all future operations.
func AddCollagesTemplateHook(hookPoint boil.HookPoint, collagesTemplateHook CollagesTemplateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		collagesTemplateAfterSelectMu.Lock()
		collagesTemplateAfterSelectHooks = append(collagesTemplateAfterSelectHooks, collagesTemplateHook)
		collagesTemplateAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		collagesTemplateBeforeInsertMu.Lock()
		collagesTemplateBeforeInsertHooks = append(collagesTemplateBeforeInsertHooks, collagesTemplateHook)
		collagesTemplateBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		collagesTemplateAfterInsertMu.Lock()
		collagesTemplateAfterInsertHooks = append(collagesTemplateAfterInsertHooks, collagesTemplateHook)
		collagesTemplateAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		collagesTemplateBeforeUpdateMu.Lock()
		collagesTemplateBeforeUpdateHooks = append(collagesTemplateBeforeUpdateHooks, collagesTemplateHook)
		collagesTemplateBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		collagesTemplateAfterUpdateMu.Lock()
		collagesTemplateAfterUpdateHooks = append(collagesTemplateAfterUpdateHooks, collagesTemplateHook)
		collagesTemplateAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		collagesTemplateBeforeDeleteMu.Lock()
		collagesTemplateBeforeDeleteHooks = append(collagesTemplateBeforeDeleteHooks, collagesTemplateHook)
		collagesTemplateBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		collagesTemplateAfterDeleteMu.Lock()
		collagesTemplateAfterDeleteHooks = append(collagesTemplateAfterDeleteHooks, collagesTemplateHook)
		collagesTemplateAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		collagesTemplateBeforeUpsertMu.Lock()
		collagesTemplateBeforeUpsertHooks = append(collagesTemplateBeforeUpsertHooks, collagesTemplateHook)
		collagesTemplateBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		collagesTemplateAfterUpsertMu.Lock()
		collagesTemplateAfterUpsertHooks = append(collagesTemplateAfterUpsertHooks, collagesTemplateHook)
		collagesTemplateAfterUpsertMu.Unlock()
	}
}

// One returns a single collagesTemplate record from the query.
func (q collagesTemplateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CollagesTemplate, error) {
	o := &CollagesTemplate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for collages_template")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CollagesTemplate records from the query.
func (q collagesTemplateQuery) All(ctx context.Context, exec boil.ContextExecutor) (CollagesTemplateSlice, error) {
	var o []*CollagesTemplate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CollagesTemplate slice")
	}

	if len(collagesTemplateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CollagesTemplate records in the query.
func (q collagesTemplateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count collages_template rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q collagesTemplateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if collages_template exists")
	}

	return count > 0, nil
}

// TemplateCollageResults retrieves all the collage_result's CollageResults with an executor via template_id column.
func (o *CollagesTemplate) TemplateCollageResults(mods ...qm.QueryMod) collageResultQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`collage_results`.`template_id`=?", o.TemplateID),
	)

	return CollageResults(queryMods...)
}

// TemplateTemplateParts retrieves all the template_part's TemplateParts with an executor via template_id column.
func (o *CollagesTemplate) TemplateTemplateParts(mods ...qm.QueryMod) templatePartQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`template_parts`.`template_id`=?", o.TemplateID),
	)

	return TemplateParts(queryMods...)
}

// LoadTemplateCollageResults allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (collagesTemplateL) LoadTemplateCollageResults(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollagesTemplate interface{}, mods queries.Applicator) error {
	var slice []*CollagesTemplate
	var object *CollagesTemplate

	if singular {
		var ok bool
		object, ok = maybeCollagesTemplate.(*CollagesTemplate)
		if !ok {
			object = new(CollagesTemplate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollagesTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollagesTemplate))
			}
		}
	} else {
		s, ok := maybeCollagesTemplate.(*[]*CollagesTemplate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollagesTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollagesTemplate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &collagesTemplateR{}
		}
		args[object.TemplateID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collagesTemplateR{}
			}
			args[obj.TemplateID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`collage_results`),
		qm.WhereIn(`collage_results.template_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load collage_results")
	}

	var resultSlice []*CollageResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice collage_results")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on collage_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collage_results")
	}

	if len(collageResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TemplateCollageResults = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &collageResultR{}
			}
			foreign.R.Template = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TemplateID == foreign.TemplateID {
				local.R.TemplateCollageResults = append(local.R.TemplateCollageResults, foreign)
				if foreign.R == nil {
					foreign.R = &collageResultR{}
				}
				foreign.R.Template = local
				break
			}
		}
	}

	return nil
}

// LoadTemplateTemplateParts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (collagesTemplateL) LoadTemplateTemplateParts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollagesTemplate interface{}, mods queries.Applicator) error {
	var slice []*CollagesTemplate
	var object *CollagesTemplate

	if singular {
		var ok bool
		object, ok = maybeCollagesTemplate.(*CollagesTemplate)
		if !ok {
			object = new(CollagesTemplate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollagesTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollagesTemplate))
			}
		}
	} else {
		s, ok := maybeCollagesTemplate.(*[]*CollagesTemplate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollagesTemplate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollagesTemplate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &collagesTemplateR{}
		}
		args[object.TemplateID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collagesTemplateR{}
			}
			args[obj.TemplateID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`template_parts`),
		qm.WhereIn(`template_parts.template_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load template_parts")
	}

	var resultSlice []*TemplatePart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice template_parts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on template_parts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for template_parts")
	}

	if len(templatePartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TemplateTemplateParts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &templatePartR{}
			}
			foreign.R.Template = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TemplateID == foreign.TemplateID {
				local.R.TemplateTemplateParts = append(local.R.TemplateTemplateParts, foreign)
				if foreign.R == nil {
					foreign.R = &templatePartR{}
				}
				foreign.R.Template = local
				break
			}
		}
	}

	return nil
}

// AddTemplateCollageResults adds the given related objects to the existing relationships
// of the collages_template, optionally inserting them as new records.
// Appends related to o.R.TemplateCollageResults.
// Sets related.R.Template appropriately.
func (o *CollagesTemplate) AddTemplateCollageResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CollageResult) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TemplateID = o.TemplateID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `collage_results` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"template_id"}),
				strmangle.WhereClause("`", "`", 0, collageResultPrimaryKeyColumns),
			)
			values := []interface{}{o.TemplateID, rel.ResultID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TemplateID = o.TemplateID
		}
	}

	if o.R == nil {
		o.R = &collagesTemplateR{
			TemplateCollageResults: related,
		}
	} else {
		o.R.TemplateCollageResults = append(o.R.TemplateCollageResults, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &collageResultR{
				Template: o,
			}
		} else {
			rel.R.Template = o
		}
	}
	return nil
}

// AddTemplateTemplateParts adds the given related objects to the existing relationships
// of the collages_template, optionally inserting them as new records.
// Appends related to o.R.TemplateTemplateParts.
// Sets related.R.Template appropriately.
func (o *CollagesTemplate) AddTemplateTemplateParts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TemplatePart) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TemplateID = o.TemplateID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `template_parts` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"template_id"}),
				strmangle.WhereClause("`", "`", 0, templatePartPrimaryKeyColumns),
			)
			values := []interface{}{o.TemplateID, rel.PartID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TemplateID = o.TemplateID
		}
	}

	if o.R == nil {
		o.R = &collagesTemplateR{
			TemplateTemplateParts: related,
		}
	} else {
		o.R.TemplateTemplateParts = append(o.R.TemplateTemplateParts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &templatePartR{
				Template: o,
			}
		} else {
			rel.R.Template = o
		}
	}
	return nil
}

// CollagesTemplates retrieves all the records using an executor.
func CollagesTemplates(mods ...qm.QueryMod) collagesTemplateQuery {
	mods = append(mods, qm.From("`collages_template`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`collages_template`.*"})
	}

	return collagesTemplateQuery{q}
}

// FindCollagesTemplate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCollagesTemplate(ctx context.Context, exec boil.ContextExecutor, templateID string, selectCols ...string) (*CollagesTemplate, error) {
	collagesTemplateObj := &CollagesTemplate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `collages_template` where `template_id`=?", sel,
	)

	q := queries.Raw(query, templateID)

	err := q.Bind(ctx, exec, collagesTemplateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from collages_template")
	}

	if err = collagesTemplateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return collagesTemplateObj, err
	}

	return collagesTemplateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CollagesTemplate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no collages_template provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(collagesTemplateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	collagesTemplateInsertCacheMut.RLock()
	cache, cached := collagesTemplateInsertCache[key]
	collagesTemplateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			collagesTemplateAllColumns,
			collagesTemplateColumnsWithDefault,
			collagesTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(collagesTemplateType, collagesTemplateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(collagesTemplateType, collagesTemplateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `collages_template` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `collages_template` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `collages_template` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, collagesTemplatePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into collages_template")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TemplateID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for collages_template")
	}

CacheNoHooks:
	if !cached {
		collagesTemplateInsertCacheMut.Lock()
		collagesTemplateInsertCache[key] = cache
		collagesTemplateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CollagesTemplate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CollagesTemplate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	collagesTemplateUpdateCacheMut.RLock()
	cache, cached := collagesTemplateUpdateCache[key]
	collagesTemplateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			collagesTemplateAllColumns,
			collagesTemplatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update collages_template, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `collages_template` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, collagesTemplatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(collagesTemplateType, collagesTemplateMapping, append(wl, collagesTemplatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update collages_template row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for collages_template")
	}

	if !cached {
		collagesTemplateUpdateCacheMut.Lock()
		collagesTemplateUpdateCache[key] = cache
		collagesTemplateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q collagesTemplateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for collages_template")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for collages_template")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CollagesTemplateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collagesTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `collages_template` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, collagesTemplatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in collagesTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all collagesTemplate")
	}
	return rowsAff, nil
}

var mySQLCollagesTemplateUniqueColumns = []string{
	"template_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CollagesTemplate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no collages_template provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(collagesTemplateColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCollagesTemplateUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	collagesTemplateUpsertCacheMut.RLock()
	cache, cached := collagesTemplateUpsertCache[key]
	collagesTemplateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			collagesTemplateAllColumns,
			collagesTemplateColumnsWithDefault,
			collagesTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			collagesTemplateAllColumns,
			collagesTemplatePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert collages_template, could not build update column list")
		}

		ret := strmangle.SetComplement(collagesTemplateAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`collages_template`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `collages_template` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(collagesTemplateType, collagesTemplateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(collagesTemplateType, collagesTemplateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for collages_template")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(collagesTemplateType, collagesTemplateMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for collages_template")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for collages_template")
	}

CacheNoHooks:
	if !cached {
		collagesTemplateUpsertCacheMut.Lock()
		collagesTemplateUpsertCache[key] = cache
		collagesTemplateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CollagesTemplate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CollagesTemplate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CollagesTemplate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), collagesTemplatePrimaryKeyMapping)
	sql := "DELETE FROM `collages_template` WHERE `template_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from collages_template")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for collages_template")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q collagesTemplateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no collagesTemplateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from collages_template")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for collages_template")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CollagesTemplateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(collagesTemplateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collagesTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `collages_template` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, collagesTemplatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from collagesTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for collages_template")
	}

	if len(collagesTemplateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CollagesTemplate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCollagesTemplate(ctx, exec, o.TemplateID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CollagesTemplateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CollagesTemplateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collagesTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `collages_template`.* FROM `collages_template` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, collagesTemplatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CollagesTemplateSlice")
	}

	*o = slice

	return nil
}

// CollagesTemplateExists checks if the CollagesTemplate row exists.
func CollagesTemplateExists(ctx context.Context, exec boil.ContextExecutor, templateID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `collages_template` where `template_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, templateID)
	}
	row := exec.QueryRowContext(ctx, sql, templateID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if collages_template exists")
	}

	return exists, nil
}

// Exists checks if the CollagesTemplate row exists.
func (o *CollagesTemplate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CollagesTemplateExists(ctx, exec, o.TemplateID)
}
