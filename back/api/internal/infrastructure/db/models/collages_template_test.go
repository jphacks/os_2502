// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCollagesTemplates(t *testing.T) {
	t.Parallel()

	query := CollagesTemplates()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCollagesTemplatesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CollagesTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollagesTemplatesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CollagesTemplates().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CollagesTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollagesTemplatesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CollagesTemplateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CollagesTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollagesTemplatesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CollagesTemplateExists(ctx, tx, o.TemplateID)
	if err != nil {
		t.Errorf("Unable to check if CollagesTemplate exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CollagesTemplateExists to return true, but got false.")
	}
}

func testCollagesTemplatesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	collagesTemplateFound, err := FindCollagesTemplate(ctx, tx, o.TemplateID)
	if err != nil {
		t.Error(err)
	}

	if collagesTemplateFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCollagesTemplatesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CollagesTemplates().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCollagesTemplatesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CollagesTemplates().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCollagesTemplatesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	collagesTemplateOne := &CollagesTemplate{}
	collagesTemplateTwo := &CollagesTemplate{}
	if err = randomize.Struct(seed, collagesTemplateOne, collagesTemplateDBTypes, false, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}
	if err = randomize.Struct(seed, collagesTemplateTwo, collagesTemplateDBTypes, false, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = collagesTemplateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = collagesTemplateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CollagesTemplates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCollagesTemplatesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	collagesTemplateOne := &CollagesTemplate{}
	collagesTemplateTwo := &CollagesTemplate{}
	if err = randomize.Struct(seed, collagesTemplateOne, collagesTemplateDBTypes, false, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}
	if err = randomize.Struct(seed, collagesTemplateTwo, collagesTemplateDBTypes, false, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = collagesTemplateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = collagesTemplateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollagesTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func collagesTemplateBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CollagesTemplate) error {
	*o = CollagesTemplate{}
	return nil
}

func collagesTemplateAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CollagesTemplate) error {
	*o = CollagesTemplate{}
	return nil
}

func collagesTemplateAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CollagesTemplate) error {
	*o = CollagesTemplate{}
	return nil
}

func collagesTemplateBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CollagesTemplate) error {
	*o = CollagesTemplate{}
	return nil
}

func collagesTemplateAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CollagesTemplate) error {
	*o = CollagesTemplate{}
	return nil
}

func collagesTemplateBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CollagesTemplate) error {
	*o = CollagesTemplate{}
	return nil
}

func collagesTemplateAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CollagesTemplate) error {
	*o = CollagesTemplate{}
	return nil
}

func collagesTemplateBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CollagesTemplate) error {
	*o = CollagesTemplate{}
	return nil
}

func collagesTemplateAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CollagesTemplate) error {
	*o = CollagesTemplate{}
	return nil
}

func testCollagesTemplatesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CollagesTemplate{}
	o := &CollagesTemplate{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate object: %s", err)
	}

	AddCollagesTemplateHook(boil.BeforeInsertHook, collagesTemplateBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	collagesTemplateBeforeInsertHooks = []CollagesTemplateHook{}

	AddCollagesTemplateHook(boil.AfterInsertHook, collagesTemplateAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	collagesTemplateAfterInsertHooks = []CollagesTemplateHook{}

	AddCollagesTemplateHook(boil.AfterSelectHook, collagesTemplateAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	collagesTemplateAfterSelectHooks = []CollagesTemplateHook{}

	AddCollagesTemplateHook(boil.BeforeUpdateHook, collagesTemplateBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	collagesTemplateBeforeUpdateHooks = []CollagesTemplateHook{}

	AddCollagesTemplateHook(boil.AfterUpdateHook, collagesTemplateAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	collagesTemplateAfterUpdateHooks = []CollagesTemplateHook{}

	AddCollagesTemplateHook(boil.BeforeDeleteHook, collagesTemplateBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	collagesTemplateBeforeDeleteHooks = []CollagesTemplateHook{}

	AddCollagesTemplateHook(boil.AfterDeleteHook, collagesTemplateAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	collagesTemplateAfterDeleteHooks = []CollagesTemplateHook{}

	AddCollagesTemplateHook(boil.BeforeUpsertHook, collagesTemplateBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	collagesTemplateBeforeUpsertHooks = []CollagesTemplateHook{}

	AddCollagesTemplateHook(boil.AfterUpsertHook, collagesTemplateAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	collagesTemplateAfterUpsertHooks = []CollagesTemplateHook{}
}

func testCollagesTemplatesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollagesTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCollagesTemplatesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(collagesTemplateColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CollagesTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCollagesTemplateToManyTemplateCollageResults(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollagesTemplate
	var b, c CollageResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, collageResultDBTypes, false, collageResultColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collageResultDBTypes, false, collageResultColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TemplateID = a.TemplateID
	c.TemplateID = a.TemplateID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TemplateCollageResults().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TemplateID == b.TemplateID {
			bFound = true
		}
		if v.TemplateID == c.TemplateID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CollagesTemplateSlice{&a}
	if err = a.L.LoadTemplateCollageResults(ctx, tx, false, (*[]*CollagesTemplate)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TemplateCollageResults); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TemplateCollageResults = nil
	if err = a.L.LoadTemplateCollageResults(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TemplateCollageResults); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCollagesTemplateToManyTemplateTemplateParts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollagesTemplate
	var b, c TemplatePart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, templatePartDBTypes, false, templatePartColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, templatePartDBTypes, false, templatePartColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TemplateID = a.TemplateID
	c.TemplateID = a.TemplateID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TemplateTemplateParts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TemplateID == b.TemplateID {
			bFound = true
		}
		if v.TemplateID == c.TemplateID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CollagesTemplateSlice{&a}
	if err = a.L.LoadTemplateTemplateParts(ctx, tx, false, (*[]*CollagesTemplate)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TemplateTemplateParts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TemplateTemplateParts = nil
	if err = a.L.LoadTemplateTemplateParts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TemplateTemplateParts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCollagesTemplateToManyAddOpTemplateCollageResults(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollagesTemplate
	var b, c, d, e CollageResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collagesTemplateDBTypes, false, strmangle.SetComplement(collagesTemplatePrimaryKeyColumns, collagesTemplateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CollageResult{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, collageResultDBTypes, false, strmangle.SetComplement(collageResultPrimaryKeyColumns, collageResultColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CollageResult{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTemplateCollageResults(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.TemplateID != first.TemplateID {
			t.Error("foreign key was wrong value", a.TemplateID, first.TemplateID)
		}
		if a.TemplateID != second.TemplateID {
			t.Error("foreign key was wrong value", a.TemplateID, second.TemplateID)
		}

		if first.R.Template != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Template != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TemplateCollageResults[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TemplateCollageResults[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TemplateCollageResults().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCollagesTemplateToManyAddOpTemplateTemplateParts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollagesTemplate
	var b, c, d, e TemplatePart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collagesTemplateDBTypes, false, strmangle.SetComplement(collagesTemplatePrimaryKeyColumns, collagesTemplateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TemplatePart{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, templatePartDBTypes, false, strmangle.SetComplement(templatePartPrimaryKeyColumns, templatePartColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TemplatePart{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTemplateTemplateParts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.TemplateID != first.TemplateID {
			t.Error("foreign key was wrong value", a.TemplateID, first.TemplateID)
		}
		if a.TemplateID != second.TemplateID {
			t.Error("foreign key was wrong value", a.TemplateID, second.TemplateID)
		}

		if first.R.Template != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Template != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TemplateTemplateParts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TemplateTemplateParts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TemplateTemplateParts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCollagesTemplatesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCollagesTemplatesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CollagesTemplateSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCollagesTemplatesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CollagesTemplates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	collagesTemplateDBTypes = map[string]string{`TemplateID`: `char`, `Name`: `varchar`, `FilePath`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                       = bytes.MinRead
)

func testCollagesTemplatesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(collagesTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(collagesTemplateAllColumns) == len(collagesTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollagesTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCollagesTemplatesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(collagesTemplateAllColumns) == len(collagesTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CollagesTemplate{}
	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollagesTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, collagesTemplateDBTypes, true, collagesTemplatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(collagesTemplateAllColumns, collagesTemplatePrimaryKeyColumns) {
		fields = collagesTemplateAllColumns
	} else {
		fields = strmangle.SetComplement(
			collagesTemplateAllColumns,
			collagesTemplatePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CollagesTemplateSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCollagesTemplatesUpsert(t *testing.T) {
	t.Parallel()

	if len(collagesTemplateAllColumns) == len(collagesTemplatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCollagesTemplateUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CollagesTemplate{}
	if err = randomize.Struct(seed, &o, collagesTemplateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CollagesTemplate: %s", err)
	}

	count, err := CollagesTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, collagesTemplateDBTypes, false, collagesTemplatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CollagesTemplate: %s", err)
	}

	count, err = CollagesTemplates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
