// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
)

// DeviceToken is an object representing the database table.
type DeviceToken struct { // ãƒ‡ãƒã‚¤ã‚¹ãƒˆãƒ¼ã‚¯ãƒ³ID (UUID)
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ãƒ¦ãƒ¼ã‚¶ãƒ¼ID
	UserID string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// ãƒ‡ãƒã‚¤ã‚¹ãƒˆãƒ¼ã‚¯ãƒ³
	DeviceToken string `boil:"device_token" json:"device_token" toml:"device_token" yaml:"device_token"`
	// ãƒ‡ãƒã‚¤ã‚¹ã‚¿ã‚¤ãƒ—
	DeviceType string `boil:"device_type" json:"device_type" toml:"device_type" yaml:"device_type"`
	// ãƒ‡ãƒã‚¤ã‚¹å
	DeviceName null.String `boil:"device_name" json:"device_name,omitempty" toml:"device_name" yaml:"device_name,omitempty"`
	// ã‚¢ã‚¯ãƒ†ã‚£ãƒ–ãƒ•ãƒ©ã‚°
	IsActive bool `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	// æœ€çµ‚ä½¿ç”¨æ—¥æ™‚
	LastUsedAt null.Time `boil:"last_used_at" json:"last_used_at,omitempty" toml:"last_used_at" yaml:"last_used_at,omitempty"`
	// ä½œæˆæ—¥æ™‚
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// æ›´æ–°æ—¥æ™‚
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *deviceTokenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceTokenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceTokenColumns = struct {
	ID          string
	UserID      string
	DeviceToken string
	DeviceType  string
	DeviceName  string
	IsActive    string
	LastUsedAt  string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	UserID:      "user_id",
	DeviceToken: "device_token",
	DeviceType:  "device_type",
	DeviceName:  "device_name",
	IsActive:    "is_active",
	LastUsedAt:  "last_used_at",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var DeviceTokenTableColumns = struct {
	ID          string
	UserID      string
	DeviceToken string
	DeviceType  string
	DeviceName  string
	IsActive    string
	LastUsedAt  string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "device_tokens.id",
	UserID:      "device_tokens.user_id",
	DeviceToken: "device_tokens.device_token",
	DeviceType:  "device_tokens.device_type",
	DeviceName:  "device_tokens.device_name",
	IsActive:    "device_tokens.is_active",
	LastUsedAt:  "device_tokens.last_used_at",
	CreatedAt:   "device_tokens.created_at",
	UpdatedAt:   "device_tokens.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DeviceTokenWhere = struct {
	ID          whereHelperstring
	UserID      whereHelperstring
	DeviceToken whereHelperstring
	DeviceType  whereHelperstring
	DeviceName  whereHelpernull_String
	IsActive    whereHelperbool
	LastUsedAt  whereHelpernull_Time
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "`device_tokens`.`id`"},
	UserID:      whereHelperstring{field: "`device_tokens`.`user_id`"},
	DeviceToken: whereHelperstring{field: "`device_tokens`.`device_token`"},
	DeviceType:  whereHelperstring{field: "`device_tokens`.`device_type`"},
	DeviceName:  whereHelpernull_String{field: "`device_tokens`.`device_name`"},
	IsActive:    whereHelperbool{field: "`device_tokens`.`is_active`"},
	LastUsedAt:  whereHelpernull_Time{field: "`device_tokens`.`last_used_at`"},
	CreatedAt:   whereHelpertime_Time{field: "`device_tokens`.`created_at`"},
	UpdatedAt:   whereHelpertime_Time{field: "`device_tokens`.`updated_at`"},
}

// DeviceTokenRels is where relationship names are stored.
var DeviceTokenRels = struct {
	User string
}{
	User: "User",
}

// deviceTokenR is where relationships are stored.
type deviceTokenR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*deviceTokenR) NewStruct() *deviceTokenR {
	return &deviceTokenR{}
}

func (r *deviceTokenR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// deviceTokenL is where Load methods for each relationship are stored.
type deviceTokenL struct{}

var (
	deviceTokenAllColumns            = []string{"id", "user_id", "device_token", "device_type", "device_name", "is_active", "last_used_at", "created_at", "updated_at"}
	deviceTokenColumnsWithoutDefault = []string{"id", "user_id", "device_token", "device_type", "device_name", "last_used_at"}
	deviceTokenColumnsWithDefault    = []string{"is_active", "created_at", "updated_at"}
	deviceTokenPrimaryKeyColumns     = []string{"id"}
	deviceTokenGeneratedColumns      = []string{}
)

type (
	// DeviceTokenSlice is an alias for a slice of pointers to DeviceToken.
	// This should almost always be used instead of []DeviceToken.
	DeviceTokenSlice []*DeviceToken
	// DeviceTokenHook is the signature for custom DeviceToken hook methods
	DeviceTokenHook func(context.Context, boil.ContextExecutor, *DeviceToken) error

	deviceTokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceTokenType                 = reflect.TypeOf(&DeviceToken{})
	deviceTokenMapping              = queries.MakeStructMapping(deviceTokenType)
	deviceTokenPrimaryKeyMapping, _ = queries.BindMapping(deviceTokenType, deviceTokenMapping, deviceTokenPrimaryKeyColumns)
	deviceTokenInsertCacheMut       sync.RWMutex
	deviceTokenInsertCache          = make(map[string]insertCache)
	deviceTokenUpdateCacheMut       sync.RWMutex
	deviceTokenUpdateCache          = make(map[string]updateCache)
	deviceTokenUpsertCacheMut       sync.RWMutex
	deviceTokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deviceTokenAfterSelectMu sync.Mutex
var deviceTokenAfterSelectHooks []DeviceTokenHook

var deviceTokenBeforeInsertMu sync.Mutex
var deviceTokenBeforeInsertHooks []DeviceTokenHook
var deviceTokenAfterInsertMu sync.Mutex
var deviceTokenAfterInsertHooks []DeviceTokenHook

var deviceTokenBeforeUpdateMu sync.Mutex
var deviceTokenBeforeUpdateHooks []DeviceTokenHook
var deviceTokenAfterUpdateMu sync.Mutex
var deviceTokenAfterUpdateHooks []DeviceTokenHook

var deviceTokenBeforeDeleteMu sync.Mutex
var deviceTokenBeforeDeleteHooks []DeviceTokenHook
var deviceTokenAfterDeleteMu sync.Mutex
var deviceTokenAfterDeleteHooks []DeviceTokenHook

var deviceTokenBeforeUpsertMu sync.Mutex
var deviceTokenBeforeUpsertHooks []DeviceTokenHook
var deviceTokenAfterUpsertMu sync.Mutex
var deviceTokenAfterUpsertHooks []DeviceTokenHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeviceToken) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTokenAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeviceToken) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTokenBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeviceToken) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTokenAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeviceToken) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTokenBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeviceToken) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTokenAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeviceToken) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTokenBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeviceToken) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTokenAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeviceToken) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTokenBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeviceToken) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceTokenAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeviceTokenHook registers your hook function for all future operations.
func AddDeviceTokenHook(hookPoint boil.HookPoint, deviceTokenHook DeviceTokenHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deviceTokenAfterSelectMu.Lock()
		deviceTokenAfterSelectHooks = append(deviceTokenAfterSelectHooks, deviceTokenHook)
		deviceTokenAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		deviceTokenBeforeInsertMu.Lock()
		deviceTokenBeforeInsertHooks = append(deviceTokenBeforeInsertHooks, deviceTokenHook)
		deviceTokenBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		deviceTokenAfterInsertMu.Lock()
		deviceTokenAfterInsertHooks = append(deviceTokenAfterInsertHooks, deviceTokenHook)
		deviceTokenAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		deviceTokenBeforeUpdateMu.Lock()
		deviceTokenBeforeUpdateHooks = append(deviceTokenBeforeUpdateHooks, deviceTokenHook)
		deviceTokenBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		deviceTokenAfterUpdateMu.Lock()
		deviceTokenAfterUpdateHooks = append(deviceTokenAfterUpdateHooks, deviceTokenHook)
		deviceTokenAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		deviceTokenBeforeDeleteMu.Lock()
		deviceTokenBeforeDeleteHooks = append(deviceTokenBeforeDeleteHooks, deviceTokenHook)
		deviceTokenBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		deviceTokenAfterDeleteMu.Lock()
		deviceTokenAfterDeleteHooks = append(deviceTokenAfterDeleteHooks, deviceTokenHook)
		deviceTokenAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		deviceTokenBeforeUpsertMu.Lock()
		deviceTokenBeforeUpsertHooks = append(deviceTokenBeforeUpsertHooks, deviceTokenHook)
		deviceTokenBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		deviceTokenAfterUpsertMu.Lock()
		deviceTokenAfterUpsertHooks = append(deviceTokenAfterUpsertHooks, deviceTokenHook)
		deviceTokenAfterUpsertMu.Unlock()
	}
}

// One returns a single deviceToken record from the query.
func (q deviceTokenQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeviceToken, error) {
	o := &DeviceToken{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for device_tokens")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeviceToken records from the query.
func (q deviceTokenQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeviceTokenSlice, error) {
	var o []*DeviceToken

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DeviceToken slice")
	}

	if len(deviceTokenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeviceToken records in the query.
func (q deviceTokenQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count device_tokens rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deviceTokenQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if device_tokens exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *DeviceToken) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceTokenL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeviceToken interface{}, mods queries.Applicator) error {
	var slice []*DeviceToken
	var object *DeviceToken

	if singular {
		var ok bool
		object, ok = maybeDeviceToken.(*DeviceToken)
		if !ok {
			object = new(DeviceToken)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeviceToken)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeviceToken))
			}
		}
	} else {
		s, ok := maybeDeviceToken.(*[]*DeviceToken)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeviceToken)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeviceToken))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deviceTokenR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceTokenR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.DeviceTokens = append(foreign.R.DeviceTokens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.DeviceTokens = append(foreign.R.DeviceTokens, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the deviceToken to the related item.
// Sets o.R.User to related.
// Adds o to related.R.DeviceTokens.
func (o *DeviceToken) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `device_tokens` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, deviceTokenPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &deviceTokenR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			DeviceTokens: DeviceTokenSlice{o},
		}
	} else {
		related.R.DeviceTokens = append(related.R.DeviceTokens, o)
	}

	return nil
}

// DeviceTokens retrieves all the records using an executor.
func DeviceTokens(mods ...qm.QueryMod) deviceTokenQuery {
	mods = append(mods, qm.From("`device_tokens`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`device_tokens`.*"})
	}

	return deviceTokenQuery{q}
}

// FindDeviceToken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeviceToken(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DeviceToken, error) {
	deviceTokenObj := &DeviceToken{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `device_tokens` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deviceTokenObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from device_tokens")
	}

	if err = deviceTokenObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deviceTokenObj, err
	}

	return deviceTokenObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeviceToken) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_tokens provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceTokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceTokenInsertCacheMut.RLock()
	cache, cached := deviceTokenInsertCache[key]
	deviceTokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceTokenAllColumns,
			deviceTokenColumnsWithDefault,
			deviceTokenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceTokenType, deviceTokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceTokenType, deviceTokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `device_tokens` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `device_tokens` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `device_tokens` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, deviceTokenPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into device_tokens")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for device_tokens")
	}

CacheNoHooks:
	if !cached {
		deviceTokenInsertCacheMut.Lock()
		deviceTokenInsertCache[key] = cache
		deviceTokenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeviceToken.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeviceToken) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deviceTokenUpdateCacheMut.RLock()
	cache, cached := deviceTokenUpdateCache[key]
	deviceTokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceTokenAllColumns,
			deviceTokenPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update device_tokens, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `device_tokens` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, deviceTokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceTokenType, deviceTokenMapping, append(wl, deviceTokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update device_tokens row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for device_tokens")
	}

	if !cached {
		deviceTokenUpdateCacheMut.Lock()
		deviceTokenUpdateCache[key] = cache
		deviceTokenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deviceTokenQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for device_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for device_tokens")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceTokenSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `device_tokens` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, deviceTokenPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deviceToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deviceToken")
	}
	return rowsAff, nil
}

var mySQLDeviceTokenUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeviceToken) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_tokens provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceTokenColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDeviceTokenUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceTokenUpsertCacheMut.RLock()
	cache, cached := deviceTokenUpsertCache[key]
	deviceTokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			deviceTokenAllColumns,
			deviceTokenColumnsWithDefault,
			deviceTokenColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceTokenAllColumns,
			deviceTokenPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert device_tokens, could not build update column list")
		}

		ret := strmangle.SetComplement(deviceTokenAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`device_tokens`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `device_tokens` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(deviceTokenType, deviceTokenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceTokenType, deviceTokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for device_tokens")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(deviceTokenType, deviceTokenMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for device_tokens")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for device_tokens")
	}

CacheNoHooks:
	if !cached {
		deviceTokenUpsertCacheMut.Lock()
		deviceTokenUpsertCache[key] = cache
		deviceTokenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeviceToken record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeviceToken) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DeviceToken provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deviceTokenPrimaryKeyMapping)
	sql := "DELETE FROM `device_tokens` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from device_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for device_tokens")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deviceTokenQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deviceTokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from device_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_tokens")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceTokenSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deviceTokenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `device_tokens` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, deviceTokenPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deviceToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_tokens")
	}

	if len(deviceTokenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeviceToken) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeviceToken(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceTokenSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceTokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `device_tokens`.* FROM `device_tokens` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, deviceTokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeviceTokenSlice")
	}

	*o = slice

	return nil
}

// DeviceTokenExists checks if the DeviceToken row exists.
func DeviceTokenExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `device_tokens` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if device_tokens exists")
	}

	return exists, nil
}

// Exists checks if the DeviceToken row exists.
func (o *DeviceToken) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeviceTokenExists(ctx, exec, o.ID)
}
