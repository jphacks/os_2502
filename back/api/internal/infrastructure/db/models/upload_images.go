// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UploadImage is an object representing the database table.
type UploadImage struct { // ç”»åƒID (UUID)
	ImageID string `boil:"image_id" json:"image_id" toml:"image_id" yaml:"image_id"`
	// ç”»åƒãƒ•ã‚¡ã‚¤ãƒ«URL
	FileURL string `boil:"file_url" json:"file_url" toml:"file_url" yaml:"file_url"`
	// ã‚°ãƒ«ãƒ¼ãƒ—ID
	GroupID string `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	// ã‚¢ãƒƒãƒ—ãƒ­ãƒ¼ãƒ‰ãƒ¦ãƒ¼ã‚¶ãƒ¼ID
	UserID string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// ãƒ‘ãƒ¼ãƒ„IDï¼ˆã©ã®ãƒ‘ãƒ¼ãƒ„ç”¨ã®ç”»åƒã‹ï¼‰
	PartID null.String `boil:"part_id" json:"part_id,omitempty" toml:"part_id" yaml:"part_id,omitempty"`
	// ã‚³ãƒ©ãƒ¼ã‚¸ãƒ¥å¯¾è±¡æ—¥
	CollageDay time.Time `boil:"collage_day" json:"collage_day" toml:"collage_day" yaml:"collage_day"`
	// ã‚¢ãƒƒãƒ—ãƒ­ãƒ¼ãƒ‰æ—¥æ™‚
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *uploadImageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uploadImageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UploadImageColumns = struct {
	ImageID    string
	FileURL    string
	GroupID    string
	UserID     string
	PartID     string
	CollageDay string
	CreatedAt  string
}{
	ImageID:    "image_id",
	FileURL:    "file_url",
	GroupID:    "group_id",
	UserID:     "user_id",
	PartID:     "part_id",
	CollageDay: "collage_day",
	CreatedAt:  "created_at",
}

var UploadImageTableColumns = struct {
	ImageID    string
	FileURL    string
	GroupID    string
	UserID     string
	PartID     string
	CollageDay string
	CreatedAt  string
}{
	ImageID:    "upload_images.image_id",
	FileURL:    "upload_images.file_url",
	GroupID:    "upload_images.group_id",
	UserID:     "upload_images.user_id",
	PartID:     "upload_images.part_id",
	CollageDay: "upload_images.collage_day",
	CreatedAt:  "upload_images.created_at",
}

// Generated where

var UploadImageWhere = struct {
	ImageID    whereHelperstring
	FileURL    whereHelperstring
	GroupID    whereHelperstring
	UserID     whereHelperstring
	PartID     whereHelpernull_String
	CollageDay whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
}{
	ImageID:    whereHelperstring{field: "`upload_images`.`image_id`"},
	FileURL:    whereHelperstring{field: "`upload_images`.`file_url`"},
	GroupID:    whereHelperstring{field: "`upload_images`.`group_id`"},
	UserID:     whereHelperstring{field: "`upload_images`.`user_id`"},
	PartID:     whereHelpernull_String{field: "`upload_images`.`part_id`"},
	CollageDay: whereHelpertime_Time{field: "`upload_images`.`collage_day`"},
	CreatedAt:  whereHelpertime_Time{field: "`upload_images`.`created_at`"},
}

// UploadImageRels is where relationship names are stored.
var UploadImageRels = struct {
	Group                           string
	Part                            string
	User                            string
	ImageUploadImagesCollageResults string
}{
	Group:                           "Group",
	Part:                            "Part",
	User:                            "User",
	ImageUploadImagesCollageResults: "ImageUploadImagesCollageResults",
}

// uploadImageR is where relationships are stored.
type uploadImageR struct {
	Group                           *Group                         `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
	Part                            *TemplatePart                  `boil:"Part" json:"Part" toml:"Part" yaml:"Part"`
	User                            *User                          `boil:"User" json:"User" toml:"User" yaml:"User"`
	ImageUploadImagesCollageResults UploadImagesCollageResultSlice `boil:"ImageUploadImagesCollageResults" json:"ImageUploadImagesCollageResults" toml:"ImageUploadImagesCollageResults" yaml:"ImageUploadImagesCollageResults"`
}

// NewStruct creates a new relationship struct
func (*uploadImageR) NewStruct() *uploadImageR {
	return &uploadImageR{}
}

func (r *uploadImageR) GetGroup() *Group {
	if r == nil {
		return nil
	}
	return r.Group
}

func (r *uploadImageR) GetPart() *TemplatePart {
	if r == nil {
		return nil
	}
	return r.Part
}

func (r *uploadImageR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *uploadImageR) GetImageUploadImagesCollageResults() UploadImagesCollageResultSlice {
	if r == nil {
		return nil
	}
	return r.ImageUploadImagesCollageResults
}

// uploadImageL is where Load methods for each relationship are stored.
type uploadImageL struct{}

var (
	uploadImageAllColumns            = []string{"image_id", "file_url", "group_id", "user_id", "part_id", "collage_day", "created_at"}
	uploadImageColumnsWithoutDefault = []string{"image_id", "file_url", "group_id", "user_id", "part_id", "collage_day"}
	uploadImageColumnsWithDefault    = []string{"created_at"}
	uploadImagePrimaryKeyColumns     = []string{"image_id"}
	uploadImageGeneratedColumns      = []string{}
)

type (
	// UploadImageSlice is an alias for a slice of pointers to UploadImage.
	// This should almost always be used instead of []UploadImage.
	UploadImageSlice []*UploadImage
	// UploadImageHook is the signature for custom UploadImage hook methods
	UploadImageHook func(context.Context, boil.ContextExecutor, *UploadImage) error

	uploadImageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uploadImageType                 = reflect.TypeOf(&UploadImage{})
	uploadImageMapping              = queries.MakeStructMapping(uploadImageType)
	uploadImagePrimaryKeyMapping, _ = queries.BindMapping(uploadImageType, uploadImageMapping, uploadImagePrimaryKeyColumns)
	uploadImageInsertCacheMut       sync.RWMutex
	uploadImageInsertCache          = make(map[string]insertCache)
	uploadImageUpdateCacheMut       sync.RWMutex
	uploadImageUpdateCache          = make(map[string]updateCache)
	uploadImageUpsertCacheMut       sync.RWMutex
	uploadImageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uploadImageAfterSelectMu sync.Mutex
var uploadImageAfterSelectHooks []UploadImageHook

var uploadImageBeforeInsertMu sync.Mutex
var uploadImageBeforeInsertHooks []UploadImageHook
var uploadImageAfterInsertMu sync.Mutex
var uploadImageAfterInsertHooks []UploadImageHook

var uploadImageBeforeUpdateMu sync.Mutex
var uploadImageBeforeUpdateHooks []UploadImageHook
var uploadImageAfterUpdateMu sync.Mutex
var uploadImageAfterUpdateHooks []UploadImageHook

var uploadImageBeforeDeleteMu sync.Mutex
var uploadImageBeforeDeleteHooks []UploadImageHook
var uploadImageAfterDeleteMu sync.Mutex
var uploadImageAfterDeleteHooks []UploadImageHook

var uploadImageBeforeUpsertMu sync.Mutex
var uploadImageBeforeUpsertHooks []UploadImageHook
var uploadImageAfterUpsertMu sync.Mutex
var uploadImageAfterUpsertHooks []UploadImageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UploadImage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UploadImage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UploadImage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UploadImage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UploadImage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UploadImage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UploadImage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UploadImage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UploadImage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUploadImageHook registers your hook function for all future operations.
func AddUploadImageHook(hookPoint boil.HookPoint, uploadImageHook UploadImageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		uploadImageAfterSelectMu.Lock()
		uploadImageAfterSelectHooks = append(uploadImageAfterSelectHooks, uploadImageHook)
		uploadImageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		uploadImageBeforeInsertMu.Lock()
		uploadImageBeforeInsertHooks = append(uploadImageBeforeInsertHooks, uploadImageHook)
		uploadImageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		uploadImageAfterInsertMu.Lock()
		uploadImageAfterInsertHooks = append(uploadImageAfterInsertHooks, uploadImageHook)
		uploadImageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		uploadImageBeforeUpdateMu.Lock()
		uploadImageBeforeUpdateHooks = append(uploadImageBeforeUpdateHooks, uploadImageHook)
		uploadImageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		uploadImageAfterUpdateMu.Lock()
		uploadImageAfterUpdateHooks = append(uploadImageAfterUpdateHooks, uploadImageHook)
		uploadImageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		uploadImageBeforeDeleteMu.Lock()
		uploadImageBeforeDeleteHooks = append(uploadImageBeforeDeleteHooks, uploadImageHook)
		uploadImageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		uploadImageAfterDeleteMu.Lock()
		uploadImageAfterDeleteHooks = append(uploadImageAfterDeleteHooks, uploadImageHook)
		uploadImageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		uploadImageBeforeUpsertMu.Lock()
		uploadImageBeforeUpsertHooks = append(uploadImageBeforeUpsertHooks, uploadImageHook)
		uploadImageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		uploadImageAfterUpsertMu.Lock()
		uploadImageAfterUpsertHooks = append(uploadImageAfterUpsertHooks, uploadImageHook)
		uploadImageAfterUpsertMu.Unlock()
	}
}

// One returns a single uploadImage record from the query.
func (q uploadImageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UploadImage, error) {
	o := &UploadImage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for upload_images")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UploadImage records from the query.
func (q uploadImageQuery) All(ctx context.Context, exec boil.ContextExecutor) (UploadImageSlice, error) {
	var o []*UploadImage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UploadImage slice")
	}

	if len(uploadImageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UploadImage records in the query.
func (q uploadImageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count upload_images rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q uploadImageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if upload_images exists")
	}

	return count > 0, nil
}

// Group pointed to by the foreign key.
func (o *UploadImage) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// Part pointed to by the foreign key.
func (o *UploadImage) Part(mods ...qm.QueryMod) templatePartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`part_id` = ?", o.PartID),
	}

	queryMods = append(queryMods, mods...)

	return TemplateParts(queryMods...)
}

// User pointed to by the foreign key.
func (o *UploadImage) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// ImageUploadImagesCollageResults retrieves all the upload_images_collage_result's UploadImagesCollageResults with an executor via image_id column.
func (o *UploadImage) ImageUploadImagesCollageResults(mods ...qm.QueryMod) uploadImagesCollageResultQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`upload_images_collage_results`.`image_id`=?", o.ImageID),
	)

	return UploadImagesCollageResults(queryMods...)
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (uploadImageL) LoadGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUploadImage interface{}, mods queries.Applicator) error {
	var slice []*UploadImage
	var object *UploadImage

	if singular {
		var ok bool
		object, ok = maybeUploadImage.(*UploadImage)
		if !ok {
			object = new(UploadImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUploadImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUploadImage))
			}
		}
	} else {
		s, ok := maybeUploadImage.(*[]*UploadImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUploadImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUploadImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &uploadImageR{}
		}
		args[object.GroupID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadImageR{}
			}

			args[obj.GroupID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.UploadImages = append(foreign.R.UploadImages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupID == foreign.ID {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.UploadImages = append(foreign.R.UploadImages, local)
				break
			}
		}
	}

	return nil
}

// LoadPart allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (uploadImageL) LoadPart(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUploadImage interface{}, mods queries.Applicator) error {
	var slice []*UploadImage
	var object *UploadImage

	if singular {
		var ok bool
		object, ok = maybeUploadImage.(*UploadImage)
		if !ok {
			object = new(UploadImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUploadImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUploadImage))
			}
		}
	} else {
		s, ok := maybeUploadImage.(*[]*UploadImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUploadImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUploadImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &uploadImageR{}
		}
		if !queries.IsNil(object.PartID) {
			args[object.PartID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadImageR{}
			}

			if !queries.IsNil(obj.PartID) {
				args[obj.PartID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`template_parts`),
		qm.WhereIn(`template_parts.part_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TemplatePart")
	}

	var resultSlice []*TemplatePart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TemplatePart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for template_parts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for template_parts")
	}

	if len(templatePartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Part = foreign
		if foreign.R == nil {
			foreign.R = &templatePartR{}
		}
		foreign.R.PartUploadImages = append(foreign.R.PartUploadImages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PartID, foreign.PartID) {
				local.R.Part = foreign
				if foreign.R == nil {
					foreign.R = &templatePartR{}
				}
				foreign.R.PartUploadImages = append(foreign.R.PartUploadImages, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (uploadImageL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUploadImage interface{}, mods queries.Applicator) error {
	var slice []*UploadImage
	var object *UploadImage

	if singular {
		var ok bool
		object, ok = maybeUploadImage.(*UploadImage)
		if !ok {
			object = new(UploadImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUploadImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUploadImage))
			}
		}
	} else {
		s, ok := maybeUploadImage.(*[]*UploadImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUploadImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUploadImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &uploadImageR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadImageR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UploadImages = append(foreign.R.UploadImages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UploadImages = append(foreign.R.UploadImages, local)
				break
			}
		}
	}

	return nil
}

// LoadImageUploadImagesCollageResults allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (uploadImageL) LoadImageUploadImagesCollageResults(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUploadImage interface{}, mods queries.Applicator) error {
	var slice []*UploadImage
	var object *UploadImage

	if singular {
		var ok bool
		object, ok = maybeUploadImage.(*UploadImage)
		if !ok {
			object = new(UploadImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUploadImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUploadImage))
			}
		}
	} else {
		s, ok := maybeUploadImage.(*[]*UploadImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUploadImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUploadImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &uploadImageR{}
		}
		args[object.ImageID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadImageR{}
			}
			args[obj.ImageID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`upload_images_collage_results`),
		qm.WhereIn(`upload_images_collage_results.image_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upload_images_collage_results")
	}

	var resultSlice []*UploadImagesCollageResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upload_images_collage_results")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on upload_images_collage_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for upload_images_collage_results")
	}

	if len(uploadImagesCollageResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ImageUploadImagesCollageResults = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &uploadImagesCollageResultR{}
			}
			foreign.R.Image = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ImageID == foreign.ImageID {
				local.R.ImageUploadImagesCollageResults = append(local.R.ImageUploadImagesCollageResults, foreign)
				if foreign.R == nil {
					foreign.R = &uploadImagesCollageResultR{}
				}
				foreign.R.Image = local
				break
			}
		}
	}

	return nil
}

// SetGroup of the uploadImage to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.UploadImages.
func (o *UploadImage) SetGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `upload_images` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
		strmangle.WhereClause("`", "`", 0, uploadImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ImageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupID = related.ID
	if o.R == nil {
		o.R = &uploadImageR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			UploadImages: UploadImageSlice{o},
		}
	} else {
		related.R.UploadImages = append(related.R.UploadImages, o)
	}

	return nil
}

// SetPart of the uploadImage to the related item.
// Sets o.R.Part to related.
// Adds o to related.R.PartUploadImages.
func (o *UploadImage) SetPart(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TemplatePart) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `upload_images` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"part_id"}),
		strmangle.WhereClause("`", "`", 0, uploadImagePrimaryKeyColumns),
	)
	values := []interface{}{related.PartID, o.ImageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PartID, related.PartID)
	if o.R == nil {
		o.R = &uploadImageR{
			Part: related,
		}
	} else {
		o.R.Part = related
	}

	if related.R == nil {
		related.R = &templatePartR{
			PartUploadImages: UploadImageSlice{o},
		}
	} else {
		related.R.PartUploadImages = append(related.R.PartUploadImages, o)
	}

	return nil
}

// RemovePart relationship.
// Sets o.R.Part to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UploadImage) RemovePart(ctx context.Context, exec boil.ContextExecutor, related *TemplatePart) error {
	var err error

	queries.SetScanner(&o.PartID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("part_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Part = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PartUploadImages {
		if queries.Equal(o.PartID, ri.PartID) {
			continue
		}

		ln := len(related.R.PartUploadImages)
		if ln > 1 && i < ln-1 {
			related.R.PartUploadImages[i] = related.R.PartUploadImages[ln-1]
		}
		related.R.PartUploadImages = related.R.PartUploadImages[:ln-1]
		break
	}
	return nil
}

// SetUser of the uploadImage to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UploadImages.
func (o *UploadImage) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `upload_images` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, uploadImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ImageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &uploadImageR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UploadImages: UploadImageSlice{o},
		}
	} else {
		related.R.UploadImages = append(related.R.UploadImages, o)
	}

	return nil
}

// AddImageUploadImagesCollageResults adds the given related objects to the existing relationships
// of the upload_image, optionally inserting them as new records.
// Appends related to o.R.ImageUploadImagesCollageResults.
// Sets related.R.Image appropriately.
func (o *UploadImage) AddImageUploadImagesCollageResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UploadImagesCollageResult) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ImageID = o.ImageID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `upload_images_collage_results` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"image_id"}),
				strmangle.WhereClause("`", "`", 0, uploadImagesCollageResultPrimaryKeyColumns),
			)
			values := []interface{}{o.ImageID, rel.ImageID, rel.ResultID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ImageID = o.ImageID
		}
	}

	if o.R == nil {
		o.R = &uploadImageR{
			ImageUploadImagesCollageResults: related,
		}
	} else {
		o.R.ImageUploadImagesCollageResults = append(o.R.ImageUploadImagesCollageResults, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &uploadImagesCollageResultR{
				Image: o,
			}
		} else {
			rel.R.Image = o
		}
	}
	return nil
}

// UploadImages retrieves all the records using an executor.
func UploadImages(mods ...qm.QueryMod) uploadImageQuery {
	mods = append(mods, qm.From("`upload_images`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`upload_images`.*"})
	}

	return uploadImageQuery{q}
}

// FindUploadImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUploadImage(ctx context.Context, exec boil.ContextExecutor, imageID string, selectCols ...string) (*UploadImage, error) {
	uploadImageObj := &UploadImage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `upload_images` where `image_id`=?", sel,
	)

	q := queries.Raw(query, imageID)

	err := q.Bind(ctx, exec, uploadImageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from upload_images")
	}

	if err = uploadImageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return uploadImageObj, err
	}

	return uploadImageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UploadImage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no upload_images provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadImageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uploadImageInsertCacheMut.RLock()
	cache, cached := uploadImageInsertCache[key]
	uploadImageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uploadImageAllColumns,
			uploadImageColumnsWithDefault,
			uploadImageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uploadImageType, uploadImageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uploadImageType, uploadImageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `upload_images` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `upload_images` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `upload_images` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, uploadImagePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into upload_images")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ImageID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for upload_images")
	}

CacheNoHooks:
	if !cached {
		uploadImageInsertCacheMut.Lock()
		uploadImageInsertCache[key] = cache
		uploadImageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UploadImage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UploadImage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uploadImageUpdateCacheMut.RLock()
	cache, cached := uploadImageUpdateCache[key]
	uploadImageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uploadImageAllColumns,
			uploadImagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update upload_images, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `upload_images` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, uploadImagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uploadImageType, uploadImageMapping, append(wl, uploadImagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update upload_images row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for upload_images")
	}

	if !cached {
		uploadImageUpdateCacheMut.Lock()
		uploadImageUpdateCache[key] = cache
		uploadImageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q uploadImageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for upload_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for upload_images")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UploadImageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `upload_images` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uploadImagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in uploadImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all uploadImage")
	}
	return rowsAff, nil
}

var mySQLUploadImageUniqueColumns = []string{
	"image_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UploadImage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no upload_images provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadImageColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUploadImageUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uploadImageUpsertCacheMut.RLock()
	cache, cached := uploadImageUpsertCache[key]
	uploadImageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			uploadImageAllColumns,
			uploadImageColumnsWithDefault,
			uploadImageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			uploadImageAllColumns,
			uploadImagePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert upload_images, could not build update column list")
		}

		ret := strmangle.SetComplement(uploadImageAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`upload_images`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `upload_images` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(uploadImageType, uploadImageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uploadImageType, uploadImageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for upload_images")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(uploadImageType, uploadImageMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for upload_images")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for upload_images")
	}

CacheNoHooks:
	if !cached {
		uploadImageUpsertCacheMut.Lock()
		uploadImageUpsertCache[key] = cache
		uploadImageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UploadImage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UploadImage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UploadImage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uploadImagePrimaryKeyMapping)
	sql := "DELETE FROM `upload_images` WHERE `image_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from upload_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for upload_images")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uploadImageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no uploadImageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from upload_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for upload_images")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UploadImageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uploadImageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `upload_images` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uploadImagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from uploadImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for upload_images")
	}

	if len(uploadImageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UploadImage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUploadImage(ctx, exec, o.ImageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadImageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UploadImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `upload_images`.* FROM `upload_images` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uploadImagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UploadImageSlice")
	}

	*o = slice

	return nil
}

// UploadImageExists checks if the UploadImage row exists.
func UploadImageExists(ctx context.Context, exec boil.ContextExecutor, imageID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `upload_images` where `image_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, imageID)
	}
	row := exec.QueryRowContext(ctx, sql, imageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if upload_images exists")
	}

	return exists, nil
}

// Exists checks if the UploadImage row exists.
func (o *UploadImage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UploadImageExists(ctx, exec, o.ImageID)
}
