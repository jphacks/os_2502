// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
)

// GroupPartAssignment is an object representing the database table.
type GroupPartAssignment struct { // å‰²ã‚Šå½“ã¦ID (UUID)
	AssignmentID string `boil:"assignment_id" json:"assignment_id" toml:"assignment_id" yaml:"assignment_id"`
	// ã‚°ãƒ«ãƒ¼ãƒ—ID
	GroupID string `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	// ãƒ¦ãƒ¼ã‚¶ãƒ¼ID
	UserID string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// ãƒ‘ãƒ¼ãƒ„ID
	PartID string `boil:"part_id" json:"part_id" toml:"part_id" yaml:"part_id"`
	// ã‚³ãƒ©ãƒ¼ã‚¸ãƒ¥å¯¾è±¡æ—¥
	CollageDay time.Time `boil:"collage_day" json:"collage_day" toml:"collage_day" yaml:"collage_day"`
	// å‰²ã‚Šå½“ã¦æ—¥æ™‚
	AssignedAt time.Time `boil:"assigned_at" json:"assigned_at" toml:"assigned_at" yaml:"assigned_at"`

	R *groupPartAssignmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupPartAssignmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupPartAssignmentColumns = struct {
	AssignmentID string
	GroupID      string
	UserID       string
	PartID       string
	CollageDay   string
	AssignedAt   string
}{
	AssignmentID: "assignment_id",
	GroupID:      "group_id",
	UserID:       "user_id",
	PartID:       "part_id",
	CollageDay:   "collage_day",
	AssignedAt:   "assigned_at",
}

var GroupPartAssignmentTableColumns = struct {
	AssignmentID string
	GroupID      string
	UserID       string
	PartID       string
	CollageDay   string
	AssignedAt   string
}{
	AssignmentID: "group_part_assignments.assignment_id",
	GroupID:      "group_part_assignments.group_id",
	UserID:       "group_part_assignments.user_id",
	PartID:       "group_part_assignments.part_id",
	CollageDay:   "group_part_assignments.collage_day",
	AssignedAt:   "group_part_assignments.assigned_at",
}

// Generated where

var GroupPartAssignmentWhere = struct {
	AssignmentID whereHelperstring
	GroupID      whereHelperstring
	UserID       whereHelperstring
	PartID       whereHelperstring
	CollageDay   whereHelpertime_Time
	AssignedAt   whereHelpertime_Time
}{
	AssignmentID: whereHelperstring{field: "`group_part_assignments`.`assignment_id`"},
	GroupID:      whereHelperstring{field: "`group_part_assignments`.`group_id`"},
	UserID:       whereHelperstring{field: "`group_part_assignments`.`user_id`"},
	PartID:       whereHelperstring{field: "`group_part_assignments`.`part_id`"},
	CollageDay:   whereHelpertime_Time{field: "`group_part_assignments`.`collage_day`"},
	AssignedAt:   whereHelpertime_Time{field: "`group_part_assignments`.`assigned_at`"},
}

// GroupPartAssignmentRels is where relationship names are stored.
var GroupPartAssignmentRels = struct {
	Group string
	Part  string
	User  string
}{
	Group: "Group",
	Part:  "Part",
	User:  "User",
}

// groupPartAssignmentR is where relationships are stored.
type groupPartAssignmentR struct {
	Group *Group        `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
	Part  *TemplatePart `boil:"Part" json:"Part" toml:"Part" yaml:"Part"`
	User  *User         `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*groupPartAssignmentR) NewStruct() *groupPartAssignmentR {
	return &groupPartAssignmentR{}
}

func (r *groupPartAssignmentR) GetGroup() *Group {
	if r == nil {
		return nil
	}
	return r.Group
}

func (r *groupPartAssignmentR) GetPart() *TemplatePart {
	if r == nil {
		return nil
	}
	return r.Part
}

func (r *groupPartAssignmentR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// groupPartAssignmentL is where Load methods for each relationship are stored.
type groupPartAssignmentL struct{}

var (
	groupPartAssignmentAllColumns            = []string{"assignment_id", "group_id", "user_id", "part_id", "collage_day", "assigned_at"}
	groupPartAssignmentColumnsWithoutDefault = []string{"assignment_id", "group_id", "user_id", "part_id", "collage_day"}
	groupPartAssignmentColumnsWithDefault    = []string{"assigned_at"}
	groupPartAssignmentPrimaryKeyColumns     = []string{"assignment_id"}
	groupPartAssignmentGeneratedColumns      = []string{}
)

type (
	// GroupPartAssignmentSlice is an alias for a slice of pointers to GroupPartAssignment.
	// This should almost always be used instead of []GroupPartAssignment.
	GroupPartAssignmentSlice []*GroupPartAssignment
	// GroupPartAssignmentHook is the signature for custom GroupPartAssignment hook methods
	GroupPartAssignmentHook func(context.Context, boil.ContextExecutor, *GroupPartAssignment) error

	groupPartAssignmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupPartAssignmentType                 = reflect.TypeOf(&GroupPartAssignment{})
	groupPartAssignmentMapping              = queries.MakeStructMapping(groupPartAssignmentType)
	groupPartAssignmentPrimaryKeyMapping, _ = queries.BindMapping(groupPartAssignmentType, groupPartAssignmentMapping, groupPartAssignmentPrimaryKeyColumns)
	groupPartAssignmentInsertCacheMut       sync.RWMutex
	groupPartAssignmentInsertCache          = make(map[string]insertCache)
	groupPartAssignmentUpdateCacheMut       sync.RWMutex
	groupPartAssignmentUpdateCache          = make(map[string]updateCache)
	groupPartAssignmentUpsertCacheMut       sync.RWMutex
	groupPartAssignmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groupPartAssignmentAfterSelectMu sync.Mutex
var groupPartAssignmentAfterSelectHooks []GroupPartAssignmentHook

var groupPartAssignmentBeforeInsertMu sync.Mutex
var groupPartAssignmentBeforeInsertHooks []GroupPartAssignmentHook
var groupPartAssignmentAfterInsertMu sync.Mutex
var groupPartAssignmentAfterInsertHooks []GroupPartAssignmentHook

var groupPartAssignmentBeforeUpdateMu sync.Mutex
var groupPartAssignmentBeforeUpdateHooks []GroupPartAssignmentHook
var groupPartAssignmentAfterUpdateMu sync.Mutex
var groupPartAssignmentAfterUpdateHooks []GroupPartAssignmentHook

var groupPartAssignmentBeforeDeleteMu sync.Mutex
var groupPartAssignmentBeforeDeleteHooks []GroupPartAssignmentHook
var groupPartAssignmentAfterDeleteMu sync.Mutex
var groupPartAssignmentAfterDeleteHooks []GroupPartAssignmentHook

var groupPartAssignmentBeforeUpsertMu sync.Mutex
var groupPartAssignmentBeforeUpsertHooks []GroupPartAssignmentHook
var groupPartAssignmentAfterUpsertMu sync.Mutex
var groupPartAssignmentAfterUpsertHooks []GroupPartAssignmentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GroupPartAssignment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupPartAssignmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GroupPartAssignment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupPartAssignmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GroupPartAssignment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupPartAssignmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GroupPartAssignment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupPartAssignmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GroupPartAssignment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupPartAssignmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GroupPartAssignment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupPartAssignmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GroupPartAssignment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupPartAssignmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GroupPartAssignment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupPartAssignmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GroupPartAssignment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupPartAssignmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupPartAssignmentHook registers your hook function for all future operations.
func AddGroupPartAssignmentHook(hookPoint boil.HookPoint, groupPartAssignmentHook GroupPartAssignmentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		groupPartAssignmentAfterSelectMu.Lock()
		groupPartAssignmentAfterSelectHooks = append(groupPartAssignmentAfterSelectHooks, groupPartAssignmentHook)
		groupPartAssignmentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		groupPartAssignmentBeforeInsertMu.Lock()
		groupPartAssignmentBeforeInsertHooks = append(groupPartAssignmentBeforeInsertHooks, groupPartAssignmentHook)
		groupPartAssignmentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		groupPartAssignmentAfterInsertMu.Lock()
		groupPartAssignmentAfterInsertHooks = append(groupPartAssignmentAfterInsertHooks, groupPartAssignmentHook)
		groupPartAssignmentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		groupPartAssignmentBeforeUpdateMu.Lock()
		groupPartAssignmentBeforeUpdateHooks = append(groupPartAssignmentBeforeUpdateHooks, groupPartAssignmentHook)
		groupPartAssignmentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		groupPartAssignmentAfterUpdateMu.Lock()
		groupPartAssignmentAfterUpdateHooks = append(groupPartAssignmentAfterUpdateHooks, groupPartAssignmentHook)
		groupPartAssignmentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		groupPartAssignmentBeforeDeleteMu.Lock()
		groupPartAssignmentBeforeDeleteHooks = append(groupPartAssignmentBeforeDeleteHooks, groupPartAssignmentHook)
		groupPartAssignmentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		groupPartAssignmentAfterDeleteMu.Lock()
		groupPartAssignmentAfterDeleteHooks = append(groupPartAssignmentAfterDeleteHooks, groupPartAssignmentHook)
		groupPartAssignmentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		groupPartAssignmentBeforeUpsertMu.Lock()
		groupPartAssignmentBeforeUpsertHooks = append(groupPartAssignmentBeforeUpsertHooks, groupPartAssignmentHook)
		groupPartAssignmentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		groupPartAssignmentAfterUpsertMu.Lock()
		groupPartAssignmentAfterUpsertHooks = append(groupPartAssignmentAfterUpsertHooks, groupPartAssignmentHook)
		groupPartAssignmentAfterUpsertMu.Unlock()
	}
}

// One returns a single groupPartAssignment record from the query.
func (q groupPartAssignmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GroupPartAssignment, error) {
	o := &GroupPartAssignment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for group_part_assignments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GroupPartAssignment records from the query.
func (q groupPartAssignmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (GroupPartAssignmentSlice, error) {
	var o []*GroupPartAssignment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GroupPartAssignment slice")
	}

	if len(groupPartAssignmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GroupPartAssignment records in the query.
func (q groupPartAssignmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count group_part_assignments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupPartAssignmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if group_part_assignments exists")
	}

	return count > 0, nil
}

// Group pointed to by the foreign key.
func (o *GroupPartAssignment) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// Part pointed to by the foreign key.
func (o *GroupPartAssignment) Part(mods ...qm.QueryMod) templatePartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`part_id` = ?", o.PartID),
	}

	queryMods = append(queryMods, mods...)

	return TemplateParts(queryMods...)
}

// User pointed to by the foreign key.
func (o *GroupPartAssignment) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupPartAssignmentL) LoadGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupPartAssignment interface{}, mods queries.Applicator) error {
	var slice []*GroupPartAssignment
	var object *GroupPartAssignment

	if singular {
		var ok bool
		object, ok = maybeGroupPartAssignment.(*GroupPartAssignment)
		if !ok {
			object = new(GroupPartAssignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupPartAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupPartAssignment))
			}
		}
	} else {
		s, ok := maybeGroupPartAssignment.(*[]*GroupPartAssignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupPartAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupPartAssignment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &groupPartAssignmentR{}
		}
		args[object.GroupID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupPartAssignmentR{}
			}

			args[obj.GroupID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.GroupPartAssignments = append(foreign.R.GroupPartAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupID == foreign.ID {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.GroupPartAssignments = append(foreign.R.GroupPartAssignments, local)
				break
			}
		}
	}

	return nil
}

// LoadPart allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupPartAssignmentL) LoadPart(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupPartAssignment interface{}, mods queries.Applicator) error {
	var slice []*GroupPartAssignment
	var object *GroupPartAssignment

	if singular {
		var ok bool
		object, ok = maybeGroupPartAssignment.(*GroupPartAssignment)
		if !ok {
			object = new(GroupPartAssignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupPartAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupPartAssignment))
			}
		}
	} else {
		s, ok := maybeGroupPartAssignment.(*[]*GroupPartAssignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupPartAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupPartAssignment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &groupPartAssignmentR{}
		}
		args[object.PartID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupPartAssignmentR{}
			}

			args[obj.PartID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`template_parts`),
		qm.WhereIn(`template_parts.part_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TemplatePart")
	}

	var resultSlice []*TemplatePart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TemplatePart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for template_parts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for template_parts")
	}

	if len(templatePartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Part = foreign
		if foreign.R == nil {
			foreign.R = &templatePartR{}
		}
		foreign.R.PartGroupPartAssignments = append(foreign.R.PartGroupPartAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartID == foreign.PartID {
				local.R.Part = foreign
				if foreign.R == nil {
					foreign.R = &templatePartR{}
				}
				foreign.R.PartGroupPartAssignments = append(foreign.R.PartGroupPartAssignments, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupPartAssignmentL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupPartAssignment interface{}, mods queries.Applicator) error {
	var slice []*GroupPartAssignment
	var object *GroupPartAssignment

	if singular {
		var ok bool
		object, ok = maybeGroupPartAssignment.(*GroupPartAssignment)
		if !ok {
			object = new(GroupPartAssignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupPartAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupPartAssignment))
			}
		}
	} else {
		s, ok := maybeGroupPartAssignment.(*[]*GroupPartAssignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupPartAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupPartAssignment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &groupPartAssignmentR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupPartAssignmentR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.GroupPartAssignments = append(foreign.R.GroupPartAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.GroupPartAssignments = append(foreign.R.GroupPartAssignments, local)
				break
			}
		}
	}

	return nil
}

// SetGroup of the groupPartAssignment to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupPartAssignments.
func (o *GroupPartAssignment) SetGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `group_part_assignments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
		strmangle.WhereClause("`", "`", 0, groupPartAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AssignmentID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupID = related.ID
	if o.R == nil {
		o.R = &groupPartAssignmentR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			GroupPartAssignments: GroupPartAssignmentSlice{o},
		}
	} else {
		related.R.GroupPartAssignments = append(related.R.GroupPartAssignments, o)
	}

	return nil
}

// SetPart of the groupPartAssignment to the related item.
// Sets o.R.Part to related.
// Adds o to related.R.PartGroupPartAssignments.
func (o *GroupPartAssignment) SetPart(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TemplatePart) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `group_part_assignments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"part_id"}),
		strmangle.WhereClause("`", "`", 0, groupPartAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.PartID, o.AssignmentID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartID = related.PartID
	if o.R == nil {
		o.R = &groupPartAssignmentR{
			Part: related,
		}
	} else {
		o.R.Part = related
	}

	if related.R == nil {
		related.R = &templatePartR{
			PartGroupPartAssignments: GroupPartAssignmentSlice{o},
		}
	} else {
		related.R.PartGroupPartAssignments = append(related.R.PartGroupPartAssignments, o)
	}

	return nil
}

// SetUser of the groupPartAssignment to the related item.
// Sets o.R.User to related.
// Adds o to related.R.GroupPartAssignments.
func (o *GroupPartAssignment) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `group_part_assignments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, groupPartAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AssignmentID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &groupPartAssignmentR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			GroupPartAssignments: GroupPartAssignmentSlice{o},
		}
	} else {
		related.R.GroupPartAssignments = append(related.R.GroupPartAssignments, o)
	}

	return nil
}

// GroupPartAssignments retrieves all the records using an executor.
func GroupPartAssignments(mods ...qm.QueryMod) groupPartAssignmentQuery {
	mods = append(mods, qm.From("`group_part_assignments`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`group_part_assignments`.*"})
	}

	return groupPartAssignmentQuery{q}
}

// FindGroupPartAssignment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupPartAssignment(ctx context.Context, exec boil.ContextExecutor, assignmentID string, selectCols ...string) (*GroupPartAssignment, error) {
	groupPartAssignmentObj := &GroupPartAssignment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `group_part_assignments` where `assignment_id`=?", sel,
	)

	q := queries.Raw(query, assignmentID)

	err := q.Bind(ctx, exec, groupPartAssignmentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from group_part_assignments")
	}

	if err = groupPartAssignmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return groupPartAssignmentObj, err
	}

	return groupPartAssignmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroupPartAssignment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_part_assignments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupPartAssignmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupPartAssignmentInsertCacheMut.RLock()
	cache, cached := groupPartAssignmentInsertCache[key]
	groupPartAssignmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupPartAssignmentAllColumns,
			groupPartAssignmentColumnsWithDefault,
			groupPartAssignmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupPartAssignmentType, groupPartAssignmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupPartAssignmentType, groupPartAssignmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `group_part_assignments` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `group_part_assignments` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `group_part_assignments` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, groupPartAssignmentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into group_part_assignments")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AssignmentID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for group_part_assignments")
	}

CacheNoHooks:
	if !cached {
		groupPartAssignmentInsertCacheMut.Lock()
		groupPartAssignmentInsertCache[key] = cache
		groupPartAssignmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GroupPartAssignment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroupPartAssignment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groupPartAssignmentUpdateCacheMut.RLock()
	cache, cached := groupPartAssignmentUpdateCache[key]
	groupPartAssignmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupPartAssignmentAllColumns,
			groupPartAssignmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update group_part_assignments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `group_part_assignments` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, groupPartAssignmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupPartAssignmentType, groupPartAssignmentMapping, append(wl, groupPartAssignmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update group_part_assignments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for group_part_assignments")
	}

	if !cached {
		groupPartAssignmentUpdateCacheMut.Lock()
		groupPartAssignmentUpdateCache[key] = cache
		groupPartAssignmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q groupPartAssignmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for group_part_assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for group_part_assignments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupPartAssignmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupPartAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `group_part_assignments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupPartAssignmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in groupPartAssignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all groupPartAssignment")
	}
	return rowsAff, nil
}

var mySQLGroupPartAssignmentUniqueColumns = []string{
	"assignment_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GroupPartAssignment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_part_assignments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupPartAssignmentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGroupPartAssignmentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupPartAssignmentUpsertCacheMut.RLock()
	cache, cached := groupPartAssignmentUpsertCache[key]
	groupPartAssignmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			groupPartAssignmentAllColumns,
			groupPartAssignmentColumnsWithDefault,
			groupPartAssignmentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			groupPartAssignmentAllColumns,
			groupPartAssignmentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert group_part_assignments, could not build update column list")
		}

		ret := strmangle.SetComplement(groupPartAssignmentAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`group_part_assignments`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `group_part_assignments` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(groupPartAssignmentType, groupPartAssignmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupPartAssignmentType, groupPartAssignmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for group_part_assignments")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(groupPartAssignmentType, groupPartAssignmentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for group_part_assignments")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for group_part_assignments")
	}

CacheNoHooks:
	if !cached {
		groupPartAssignmentUpsertCacheMut.Lock()
		groupPartAssignmentUpsertCache[key] = cache
		groupPartAssignmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GroupPartAssignment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupPartAssignment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GroupPartAssignment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupPartAssignmentPrimaryKeyMapping)
	sql := "DELETE FROM `group_part_assignments` WHERE `assignment_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from group_part_assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for group_part_assignments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupPartAssignmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no groupPartAssignmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from group_part_assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_part_assignments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupPartAssignmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(groupPartAssignmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupPartAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `group_part_assignments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupPartAssignmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from groupPartAssignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_part_assignments")
	}

	if len(groupPartAssignmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupPartAssignment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGroupPartAssignment(ctx, exec, o.AssignmentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupPartAssignmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupPartAssignmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupPartAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `group_part_assignments`.* FROM `group_part_assignments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupPartAssignmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GroupPartAssignmentSlice")
	}

	*o = slice

	return nil
}

// GroupPartAssignmentExists checks if the GroupPartAssignment row exists.
func GroupPartAssignmentExists(ctx context.Context, exec boil.ContextExecutor, assignmentID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `group_part_assignments` where `assignment_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, assignmentID)
	}
	row := exec.QueryRowContext(ctx, sql, assignmentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if group_part_assignments exists")
	}

	return exists, nil
}

// Exists checks if the GroupPartAssignment row exists.
func (o *GroupPartAssignment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GroupPartAssignmentExists(ctx, exec, o.AssignmentID)
}
