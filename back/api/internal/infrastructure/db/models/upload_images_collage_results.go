// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
)

// UploadImagesCollageResult is an object representing the database table.
type UploadImagesCollageResult struct { // ç”»åƒID
	ImageID string `boil:"image_id" json:"image_id" toml:"image_id" yaml:"image_id"`
	// çµæžœID
	ResultID string `boil:"result_id" json:"result_id" toml:"result_id" yaml:"result_id"`
	// Xåº§æ¨™
	PositionX int `boil:"position_x" json:"position_x" toml:"position_x" yaml:"position_x"`
	// Yåº§æ¨™
	PositionY int `boil:"position_y" json:"position_y" toml:"position_y" yaml:"position_y"`
	// å¹…
	Width int `boil:"width" json:"width" toml:"width" yaml:"width"`
	// é«˜ã•
	Height int `boil:"height" json:"height" toml:"height" yaml:"height"`
	// è¡¨ç¤ºé †åº
	SortOrder int `boil:"sort_order" json:"sort_order" toml:"sort_order" yaml:"sort_order"`
	// ä½œæˆæ—¥æ™‚
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *uploadImagesCollageResultR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uploadImagesCollageResultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UploadImagesCollageResultColumns = struct {
	ImageID   string
	ResultID  string
	PositionX string
	PositionY string
	Width     string
	Height    string
	SortOrder string
	CreatedAt string
}{
	ImageID:   "image_id",
	ResultID:  "result_id",
	PositionX: "position_x",
	PositionY: "position_y",
	Width:     "width",
	Height:    "height",
	SortOrder: "sort_order",
	CreatedAt: "created_at",
}

var UploadImagesCollageResultTableColumns = struct {
	ImageID   string
	ResultID  string
	PositionX string
	PositionY string
	Width     string
	Height    string
	SortOrder string
	CreatedAt string
}{
	ImageID:   "upload_images_collage_results.image_id",
	ResultID:  "upload_images_collage_results.result_id",
	PositionX: "upload_images_collage_results.position_x",
	PositionY: "upload_images_collage_results.position_y",
	Width:     "upload_images_collage_results.width",
	Height:    "upload_images_collage_results.height",
	SortOrder: "upload_images_collage_results.sort_order",
	CreatedAt: "upload_images_collage_results.created_at",
}

// Generated where

var UploadImagesCollageResultWhere = struct {
	ImageID   whereHelperstring
	ResultID  whereHelperstring
	PositionX whereHelperint
	PositionY whereHelperint
	Width     whereHelperint
	Height    whereHelperint
	SortOrder whereHelperint
	CreatedAt whereHelpertime_Time
}{
	ImageID:   whereHelperstring{field: "`upload_images_collage_results`.`image_id`"},
	ResultID:  whereHelperstring{field: "`upload_images_collage_results`.`result_id`"},
	PositionX: whereHelperint{field: "`upload_images_collage_results`.`position_x`"},
	PositionY: whereHelperint{field: "`upload_images_collage_results`.`position_y`"},
	Width:     whereHelperint{field: "`upload_images_collage_results`.`width`"},
	Height:    whereHelperint{field: "`upload_images_collage_results`.`height`"},
	SortOrder: whereHelperint{field: "`upload_images_collage_results`.`sort_order`"},
	CreatedAt: whereHelpertime_Time{field: "`upload_images_collage_results`.`created_at`"},
}

// UploadImagesCollageResultRels is where relationship names are stored.
var UploadImagesCollageResultRels = struct {
	Image  string
	Result string
}{
	Image:  "Image",
	Result: "Result",
}

// uploadImagesCollageResultR is where relationships are stored.
type uploadImagesCollageResultR struct {
	Image  *UploadImage   `boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
	Result *CollageResult `boil:"Result" json:"Result" toml:"Result" yaml:"Result"`
}

// NewStruct creates a new relationship struct
func (*uploadImagesCollageResultR) NewStruct() *uploadImagesCollageResultR {
	return &uploadImagesCollageResultR{}
}

func (r *uploadImagesCollageResultR) GetImage() *UploadImage {
	if r == nil {
		return nil
	}
	return r.Image
}

func (r *uploadImagesCollageResultR) GetResult() *CollageResult {
	if r == nil {
		return nil
	}
	return r.Result
}

// uploadImagesCollageResultL is where Load methods for each relationship are stored.
type uploadImagesCollageResultL struct{}

var (
	uploadImagesCollageResultAllColumns            = []string{"image_id", "result_id", "position_x", "position_y", "width", "height", "sort_order", "created_at"}
	uploadImagesCollageResultColumnsWithoutDefault = []string{"image_id", "result_id", "position_x", "position_y", "width", "height", "sort_order"}
	uploadImagesCollageResultColumnsWithDefault    = []string{"created_at"}
	uploadImagesCollageResultPrimaryKeyColumns     = []string{"image_id", "result_id"}
	uploadImagesCollageResultGeneratedColumns      = []string{}
)

type (
	// UploadImagesCollageResultSlice is an alias for a slice of pointers to UploadImagesCollageResult.
	// This should almost always be used instead of []UploadImagesCollageResult.
	UploadImagesCollageResultSlice []*UploadImagesCollageResult
	// UploadImagesCollageResultHook is the signature for custom UploadImagesCollageResult hook methods
	UploadImagesCollageResultHook func(context.Context, boil.ContextExecutor, *UploadImagesCollageResult) error

	uploadImagesCollageResultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uploadImagesCollageResultType                 = reflect.TypeOf(&UploadImagesCollageResult{})
	uploadImagesCollageResultMapping              = queries.MakeStructMapping(uploadImagesCollageResultType)
	uploadImagesCollageResultPrimaryKeyMapping, _ = queries.BindMapping(uploadImagesCollageResultType, uploadImagesCollageResultMapping, uploadImagesCollageResultPrimaryKeyColumns)
	uploadImagesCollageResultInsertCacheMut       sync.RWMutex
	uploadImagesCollageResultInsertCache          = make(map[string]insertCache)
	uploadImagesCollageResultUpdateCacheMut       sync.RWMutex
	uploadImagesCollageResultUpdateCache          = make(map[string]updateCache)
	uploadImagesCollageResultUpsertCacheMut       sync.RWMutex
	uploadImagesCollageResultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uploadImagesCollageResultAfterSelectMu sync.Mutex
var uploadImagesCollageResultAfterSelectHooks []UploadImagesCollageResultHook

var uploadImagesCollageResultBeforeInsertMu sync.Mutex
var uploadImagesCollageResultBeforeInsertHooks []UploadImagesCollageResultHook
var uploadImagesCollageResultAfterInsertMu sync.Mutex
var uploadImagesCollageResultAfterInsertHooks []UploadImagesCollageResultHook

var uploadImagesCollageResultBeforeUpdateMu sync.Mutex
var uploadImagesCollageResultBeforeUpdateHooks []UploadImagesCollageResultHook
var uploadImagesCollageResultAfterUpdateMu sync.Mutex
var uploadImagesCollageResultAfterUpdateHooks []UploadImagesCollageResultHook

var uploadImagesCollageResultBeforeDeleteMu sync.Mutex
var uploadImagesCollageResultBeforeDeleteHooks []UploadImagesCollageResultHook
var uploadImagesCollageResultAfterDeleteMu sync.Mutex
var uploadImagesCollageResultAfterDeleteHooks []UploadImagesCollageResultHook

var uploadImagesCollageResultBeforeUpsertMu sync.Mutex
var uploadImagesCollageResultBeforeUpsertHooks []UploadImagesCollageResultHook
var uploadImagesCollageResultAfterUpsertMu sync.Mutex
var uploadImagesCollageResultAfterUpsertHooks []UploadImagesCollageResultHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UploadImagesCollageResult) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImagesCollageResultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UploadImagesCollageResult) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImagesCollageResultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UploadImagesCollageResult) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImagesCollageResultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UploadImagesCollageResult) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImagesCollageResultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UploadImagesCollageResult) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImagesCollageResultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UploadImagesCollageResult) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImagesCollageResultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UploadImagesCollageResult) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImagesCollageResultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UploadImagesCollageResult) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImagesCollageResultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UploadImagesCollageResult) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadImagesCollageResultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUploadImagesCollageResultHook registers your hook function for all future operations.
func AddUploadImagesCollageResultHook(hookPoint boil.HookPoint, uploadImagesCollageResultHook UploadImagesCollageResultHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		uploadImagesCollageResultAfterSelectMu.Lock()
		uploadImagesCollageResultAfterSelectHooks = append(uploadImagesCollageResultAfterSelectHooks, uploadImagesCollageResultHook)
		uploadImagesCollageResultAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		uploadImagesCollageResultBeforeInsertMu.Lock()
		uploadImagesCollageResultBeforeInsertHooks = append(uploadImagesCollageResultBeforeInsertHooks, uploadImagesCollageResultHook)
		uploadImagesCollageResultBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		uploadImagesCollageResultAfterInsertMu.Lock()
		uploadImagesCollageResultAfterInsertHooks = append(uploadImagesCollageResultAfterInsertHooks, uploadImagesCollageResultHook)
		uploadImagesCollageResultAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		uploadImagesCollageResultBeforeUpdateMu.Lock()
		uploadImagesCollageResultBeforeUpdateHooks = append(uploadImagesCollageResultBeforeUpdateHooks, uploadImagesCollageResultHook)
		uploadImagesCollageResultBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		uploadImagesCollageResultAfterUpdateMu.Lock()
		uploadImagesCollageResultAfterUpdateHooks = append(uploadImagesCollageResultAfterUpdateHooks, uploadImagesCollageResultHook)
		uploadImagesCollageResultAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		uploadImagesCollageResultBeforeDeleteMu.Lock()
		uploadImagesCollageResultBeforeDeleteHooks = append(uploadImagesCollageResultBeforeDeleteHooks, uploadImagesCollageResultHook)
		uploadImagesCollageResultBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		uploadImagesCollageResultAfterDeleteMu.Lock()
		uploadImagesCollageResultAfterDeleteHooks = append(uploadImagesCollageResultAfterDeleteHooks, uploadImagesCollageResultHook)
		uploadImagesCollageResultAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		uploadImagesCollageResultBeforeUpsertMu.Lock()
		uploadImagesCollageResultBeforeUpsertHooks = append(uploadImagesCollageResultBeforeUpsertHooks, uploadImagesCollageResultHook)
		uploadImagesCollageResultBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		uploadImagesCollageResultAfterUpsertMu.Lock()
		uploadImagesCollageResultAfterUpsertHooks = append(uploadImagesCollageResultAfterUpsertHooks, uploadImagesCollageResultHook)
		uploadImagesCollageResultAfterUpsertMu.Unlock()
	}
}

// One returns a single uploadImagesCollageResult record from the query.
func (q uploadImagesCollageResultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UploadImagesCollageResult, error) {
	o := &UploadImagesCollageResult{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for upload_images_collage_results")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UploadImagesCollageResult records from the query.
func (q uploadImagesCollageResultQuery) All(ctx context.Context, exec boil.ContextExecutor) (UploadImagesCollageResultSlice, error) {
	var o []*UploadImagesCollageResult

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UploadImagesCollageResult slice")
	}

	if len(uploadImagesCollageResultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UploadImagesCollageResult records in the query.
func (q uploadImagesCollageResultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count upload_images_collage_results rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q uploadImagesCollageResultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if upload_images_collage_results exists")
	}

	return count > 0, nil
}

// Image pointed to by the foreign key.
func (o *UploadImagesCollageResult) Image(mods ...qm.QueryMod) uploadImageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`image_id` = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	return UploadImages(queryMods...)
}

// Result pointed to by the foreign key.
func (o *UploadImagesCollageResult) Result(mods ...qm.QueryMod) collageResultQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`result_id` = ?", o.ResultID),
	}

	queryMods = append(queryMods, mods...)

	return CollageResults(queryMods...)
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (uploadImagesCollageResultL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUploadImagesCollageResult interface{}, mods queries.Applicator) error {
	var slice []*UploadImagesCollageResult
	var object *UploadImagesCollageResult

	if singular {
		var ok bool
		object, ok = maybeUploadImagesCollageResult.(*UploadImagesCollageResult)
		if !ok {
			object = new(UploadImagesCollageResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUploadImagesCollageResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUploadImagesCollageResult))
			}
		}
	} else {
		s, ok := maybeUploadImagesCollageResult.(*[]*UploadImagesCollageResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUploadImagesCollageResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUploadImagesCollageResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &uploadImagesCollageResultR{}
		}
		args[object.ImageID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadImagesCollageResultR{}
			}

			args[obj.ImageID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`upload_images`),
		qm.WhereIn(`upload_images.image_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UploadImage")
	}

	var resultSlice []*UploadImage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UploadImage")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for upload_images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for upload_images")
	}

	if len(uploadImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &uploadImageR{}
		}
		foreign.R.ImageUploadImagesCollageResults = append(foreign.R.ImageUploadImagesCollageResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ImageID == foreign.ImageID {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &uploadImageR{}
				}
				foreign.R.ImageUploadImagesCollageResults = append(foreign.R.ImageUploadImagesCollageResults, local)
				break
			}
		}
	}

	return nil
}

// LoadResult allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (uploadImagesCollageResultL) LoadResult(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUploadImagesCollageResult interface{}, mods queries.Applicator) error {
	var slice []*UploadImagesCollageResult
	var object *UploadImagesCollageResult

	if singular {
		var ok bool
		object, ok = maybeUploadImagesCollageResult.(*UploadImagesCollageResult)
		if !ok {
			object = new(UploadImagesCollageResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUploadImagesCollageResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUploadImagesCollageResult))
			}
		}
	} else {
		s, ok := maybeUploadImagesCollageResult.(*[]*UploadImagesCollageResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUploadImagesCollageResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUploadImagesCollageResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &uploadImagesCollageResultR{}
		}
		args[object.ResultID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadImagesCollageResultR{}
			}

			args[obj.ResultID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`collage_results`),
		qm.WhereIn(`collage_results.result_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CollageResult")
	}

	var resultSlice []*CollageResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CollageResult")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collage_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collage_results")
	}

	if len(collageResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Result = foreign
		if foreign.R == nil {
			foreign.R = &collageResultR{}
		}
		foreign.R.ResultUploadImagesCollageResults = append(foreign.R.ResultUploadImagesCollageResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ResultID == foreign.ResultID {
				local.R.Result = foreign
				if foreign.R == nil {
					foreign.R = &collageResultR{}
				}
				foreign.R.ResultUploadImagesCollageResults = append(foreign.R.ResultUploadImagesCollageResults, local)
				break
			}
		}
	}

	return nil
}

// SetImage of the uploadImagesCollageResult to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.ImageUploadImagesCollageResults.
func (o *UploadImagesCollageResult) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UploadImage) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `upload_images_collage_results` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"image_id"}),
		strmangle.WhereClause("`", "`", 0, uploadImagesCollageResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ImageID, o.ImageID, o.ResultID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ImageID = related.ImageID
	if o.R == nil {
		o.R = &uploadImagesCollageResultR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &uploadImageR{
			ImageUploadImagesCollageResults: UploadImagesCollageResultSlice{o},
		}
	} else {
		related.R.ImageUploadImagesCollageResults = append(related.R.ImageUploadImagesCollageResults, o)
	}

	return nil
}

// SetResult of the uploadImagesCollageResult to the related item.
// Sets o.R.Result to related.
// Adds o to related.R.ResultUploadImagesCollageResults.
func (o *UploadImagesCollageResult) SetResult(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CollageResult) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `upload_images_collage_results` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"result_id"}),
		strmangle.WhereClause("`", "`", 0, uploadImagesCollageResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ResultID, o.ImageID, o.ResultID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ResultID = related.ResultID
	if o.R == nil {
		o.R = &uploadImagesCollageResultR{
			Result: related,
		}
	} else {
		o.R.Result = related
	}

	if related.R == nil {
		related.R = &collageResultR{
			ResultUploadImagesCollageResults: UploadImagesCollageResultSlice{o},
		}
	} else {
		related.R.ResultUploadImagesCollageResults = append(related.R.ResultUploadImagesCollageResults, o)
	}

	return nil
}

// UploadImagesCollageResults retrieves all the records using an executor.
func UploadImagesCollageResults(mods ...qm.QueryMod) uploadImagesCollageResultQuery {
	mods = append(mods, qm.From("`upload_images_collage_results`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`upload_images_collage_results`.*"})
	}

	return uploadImagesCollageResultQuery{q}
}

// FindUploadImagesCollageResult retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUploadImagesCollageResult(ctx context.Context, exec boil.ContextExecutor, imageID string, resultID string, selectCols ...string) (*UploadImagesCollageResult, error) {
	uploadImagesCollageResultObj := &UploadImagesCollageResult{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `upload_images_collage_results` where `image_id`=? AND `result_id`=?", sel,
	)

	q := queries.Raw(query, imageID, resultID)

	err := q.Bind(ctx, exec, uploadImagesCollageResultObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from upload_images_collage_results")
	}

	if err = uploadImagesCollageResultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return uploadImagesCollageResultObj, err
	}

	return uploadImagesCollageResultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UploadImagesCollageResult) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no upload_images_collage_results provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadImagesCollageResultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uploadImagesCollageResultInsertCacheMut.RLock()
	cache, cached := uploadImagesCollageResultInsertCache[key]
	uploadImagesCollageResultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uploadImagesCollageResultAllColumns,
			uploadImagesCollageResultColumnsWithDefault,
			uploadImagesCollageResultColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uploadImagesCollageResultType, uploadImagesCollageResultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uploadImagesCollageResultType, uploadImagesCollageResultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `upload_images_collage_results` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `upload_images_collage_results` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `upload_images_collage_results` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, uploadImagesCollageResultPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into upload_images_collage_results")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ImageID,
		o.ResultID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for upload_images_collage_results")
	}

CacheNoHooks:
	if !cached {
		uploadImagesCollageResultInsertCacheMut.Lock()
		uploadImagesCollageResultInsertCache[key] = cache
		uploadImagesCollageResultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UploadImagesCollageResult.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UploadImagesCollageResult) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uploadImagesCollageResultUpdateCacheMut.RLock()
	cache, cached := uploadImagesCollageResultUpdateCache[key]
	uploadImagesCollageResultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uploadImagesCollageResultAllColumns,
			uploadImagesCollageResultPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update upload_images_collage_results, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `upload_images_collage_results` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, uploadImagesCollageResultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uploadImagesCollageResultType, uploadImagesCollageResultMapping, append(wl, uploadImagesCollageResultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update upload_images_collage_results row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for upload_images_collage_results")
	}

	if !cached {
		uploadImagesCollageResultUpdateCacheMut.Lock()
		uploadImagesCollageResultUpdateCache[key] = cache
		uploadImagesCollageResultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q uploadImagesCollageResultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for upload_images_collage_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for upload_images_collage_results")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UploadImagesCollageResultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadImagesCollageResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `upload_images_collage_results` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uploadImagesCollageResultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in uploadImagesCollageResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all uploadImagesCollageResult")
	}
	return rowsAff, nil
}

var mySQLUploadImagesCollageResultUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UploadImagesCollageResult) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no upload_images_collage_results provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadImagesCollageResultColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUploadImagesCollageResultUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uploadImagesCollageResultUpsertCacheMut.RLock()
	cache, cached := uploadImagesCollageResultUpsertCache[key]
	uploadImagesCollageResultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			uploadImagesCollageResultAllColumns,
			uploadImagesCollageResultColumnsWithDefault,
			uploadImagesCollageResultColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			uploadImagesCollageResultAllColumns,
			uploadImagesCollageResultPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert upload_images_collage_results, could not build update column list")
		}

		ret := strmangle.SetComplement(uploadImagesCollageResultAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`upload_images_collage_results`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `upload_images_collage_results` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(uploadImagesCollageResultType, uploadImagesCollageResultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uploadImagesCollageResultType, uploadImagesCollageResultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for upload_images_collage_results")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(uploadImagesCollageResultType, uploadImagesCollageResultMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for upload_images_collage_results")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for upload_images_collage_results")
	}

CacheNoHooks:
	if !cached {
		uploadImagesCollageResultUpsertCacheMut.Lock()
		uploadImagesCollageResultUpsertCache[key] = cache
		uploadImagesCollageResultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UploadImagesCollageResult record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UploadImagesCollageResult) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UploadImagesCollageResult provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uploadImagesCollageResultPrimaryKeyMapping)
	sql := "DELETE FROM `upload_images_collage_results` WHERE `image_id`=? AND `result_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from upload_images_collage_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for upload_images_collage_results")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uploadImagesCollageResultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no uploadImagesCollageResultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from upload_images_collage_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for upload_images_collage_results")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UploadImagesCollageResultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uploadImagesCollageResultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadImagesCollageResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `upload_images_collage_results` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uploadImagesCollageResultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from uploadImagesCollageResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for upload_images_collage_results")
	}

	if len(uploadImagesCollageResultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UploadImagesCollageResult) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUploadImagesCollageResult(ctx, exec, o.ImageID, o.ResultID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadImagesCollageResultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UploadImagesCollageResultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadImagesCollageResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `upload_images_collage_results`.* FROM `upload_images_collage_results` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, uploadImagesCollageResultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UploadImagesCollageResultSlice")
	}

	*o = slice

	return nil
}

// UploadImagesCollageResultExists checks if the UploadImagesCollageResult row exists.
func UploadImagesCollageResultExists(ctx context.Context, exec boil.ContextExecutor, imageID string, resultID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `upload_images_collage_results` where `image_id`=? AND `result_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, imageID, resultID)
	}
	row := exec.QueryRowContext(ctx, sql, imageID, resultID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if upload_images_collage_results exists")
	}

	return exists, nil
}

// Exists checks if the UploadImagesCollageResult row exists.
func (o *UploadImagesCollageResult) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UploadImagesCollageResultExists(ctx, exec, o.ImageID, o.ResultID)
}
