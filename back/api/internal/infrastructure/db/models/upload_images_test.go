// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUploadImages(t *testing.T) {
	t.Parallel()

	query := UploadImages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUploadImagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UploadImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadImagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UploadImages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UploadImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadImagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UploadImageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UploadImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadImagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UploadImageExists(ctx, tx, o.ImageID)
	if err != nil {
		t.Errorf("Unable to check if UploadImage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UploadImageExists to return true, but got false.")
	}
}

func testUploadImagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	uploadImageFound, err := FindUploadImage(ctx, tx, o.ImageID)
	if err != nil {
		t.Error(err)
	}

	if uploadImageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUploadImagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UploadImages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUploadImagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UploadImages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUploadImagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	uploadImageOne := &UploadImage{}
	uploadImageTwo := &UploadImage{}
	if err = randomize.Struct(seed, uploadImageOne, uploadImageDBTypes, false, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}
	if err = randomize.Struct(seed, uploadImageTwo, uploadImageDBTypes, false, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = uploadImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = uploadImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UploadImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUploadImagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	uploadImageOne := &UploadImage{}
	uploadImageTwo := &UploadImage{}
	if err = randomize.Struct(seed, uploadImageOne, uploadImageDBTypes, false, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}
	if err = randomize.Struct(seed, uploadImageTwo, uploadImageDBTypes, false, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = uploadImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = uploadImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UploadImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func uploadImageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UploadImage) error {
	*o = UploadImage{}
	return nil
}

func uploadImageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UploadImage) error {
	*o = UploadImage{}
	return nil
}

func uploadImageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UploadImage) error {
	*o = UploadImage{}
	return nil
}

func uploadImageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UploadImage) error {
	*o = UploadImage{}
	return nil
}

func uploadImageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UploadImage) error {
	*o = UploadImage{}
	return nil
}

func uploadImageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UploadImage) error {
	*o = UploadImage{}
	return nil
}

func uploadImageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UploadImage) error {
	*o = UploadImage{}
	return nil
}

func uploadImageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UploadImage) error {
	*o = UploadImage{}
	return nil
}

func uploadImageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UploadImage) error {
	*o = UploadImage{}
	return nil
}

func testUploadImagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UploadImage{}
	o := &UploadImage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, uploadImageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UploadImage object: %s", err)
	}

	AddUploadImageHook(boil.BeforeInsertHook, uploadImageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	uploadImageBeforeInsertHooks = []UploadImageHook{}

	AddUploadImageHook(boil.AfterInsertHook, uploadImageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	uploadImageAfterInsertHooks = []UploadImageHook{}

	AddUploadImageHook(boil.AfterSelectHook, uploadImageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	uploadImageAfterSelectHooks = []UploadImageHook{}

	AddUploadImageHook(boil.BeforeUpdateHook, uploadImageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	uploadImageBeforeUpdateHooks = []UploadImageHook{}

	AddUploadImageHook(boil.AfterUpdateHook, uploadImageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	uploadImageAfterUpdateHooks = []UploadImageHook{}

	AddUploadImageHook(boil.BeforeDeleteHook, uploadImageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	uploadImageBeforeDeleteHooks = []UploadImageHook{}

	AddUploadImageHook(boil.AfterDeleteHook, uploadImageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	uploadImageAfterDeleteHooks = []UploadImageHook{}

	AddUploadImageHook(boil.BeforeUpsertHook, uploadImageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	uploadImageBeforeUpsertHooks = []UploadImageHook{}

	AddUploadImageHook(boil.AfterUpsertHook, uploadImageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	uploadImageAfterUpsertHooks = []UploadImageHook{}
}

func testUploadImagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UploadImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUploadImagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(uploadImageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UploadImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUploadImageToManyImageUploadImagesCollageResults(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UploadImage
	var b, c UploadImagesCollageResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, uploadImagesCollageResultDBTypes, false, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, uploadImagesCollageResultDBTypes, false, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ImageID = a.ImageID
	c.ImageID = a.ImageID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ImageUploadImagesCollageResults().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ImageID == b.ImageID {
			bFound = true
		}
		if v.ImageID == c.ImageID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UploadImageSlice{&a}
	if err = a.L.LoadImageUploadImagesCollageResults(ctx, tx, false, (*[]*UploadImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ImageUploadImagesCollageResults); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ImageUploadImagesCollageResults = nil
	if err = a.L.LoadImageUploadImagesCollageResults(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ImageUploadImagesCollageResults); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUploadImageToManyAddOpImageUploadImagesCollageResults(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UploadImage
	var b, c, d, e UploadImagesCollageResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, uploadImageDBTypes, false, strmangle.SetComplement(uploadImagePrimaryKeyColumns, uploadImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UploadImagesCollageResult{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, uploadImagesCollageResultDBTypes, false, strmangle.SetComplement(uploadImagesCollageResultPrimaryKeyColumns, uploadImagesCollageResultColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UploadImagesCollageResult{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddImageUploadImagesCollageResults(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ImageID != first.ImageID {
			t.Error("foreign key was wrong value", a.ImageID, first.ImageID)
		}
		if a.ImageID != second.ImageID {
			t.Error("foreign key was wrong value", a.ImageID, second.ImageID)
		}

		if first.R.Image != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Image != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ImageUploadImagesCollageResults[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ImageUploadImagesCollageResults[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ImageUploadImagesCollageResults().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUploadImageToOneGroupUsingGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UploadImage
	var foreign Group

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, uploadImageDBTypes, false, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, groupDBTypes, false, groupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Group struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GroupID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddGroupHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Group) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UploadImageSlice{&local}
	if err = local.L.LoadGroup(ctx, tx, false, (*[]*UploadImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUploadImageToOneTemplatePartUsingPart(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UploadImage
	var foreign TemplatePart

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, templatePartDBTypes, false, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PartID, foreign.PartID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Part().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.PartID, foreign.PartID) {
		t.Errorf("want: %v, got %v", foreign.PartID, check.PartID)
	}

	ranAfterSelectHook := false
	AddTemplatePartHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *TemplatePart) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UploadImageSlice{&local}
	if err = local.L.LoadPart(ctx, tx, false, (*[]*UploadImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Part == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Part = nil
	if err = local.L.LoadPart(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Part == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUploadImageToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UploadImage
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, uploadImageDBTypes, false, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UploadImageSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UploadImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUploadImageToOneSetOpGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UploadImage
	var b, c Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, uploadImageDBTypes, false, strmangle.SetComplement(uploadImagePrimaryKeyColumns, uploadImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Group{&b, &c} {
		err = a.SetGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UploadImages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID, x.ID)
		}
	}
}
func testUploadImageToOneSetOpTemplatePartUsingPart(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UploadImage
	var b, c TemplatePart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, uploadImageDBTypes, false, strmangle.SetComplement(uploadImagePrimaryKeyColumns, uploadImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, templatePartDBTypes, false, strmangle.SetComplement(templatePartPrimaryKeyColumns, templatePartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, templatePartDBTypes, false, strmangle.SetComplement(templatePartPrimaryKeyColumns, templatePartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*TemplatePart{&b, &c} {
		err = a.SetPart(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Part != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PartUploadImages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PartID, x.PartID) {
			t.Error("foreign key was wrong value", a.PartID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PartID))
		reflect.Indirect(reflect.ValueOf(&a.PartID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PartID, x.PartID) {
			t.Error("foreign key was wrong value", a.PartID, x.PartID)
		}
	}
}

func testUploadImageToOneRemoveOpTemplatePartUsingPart(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UploadImage
	var b TemplatePart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, uploadImageDBTypes, false, strmangle.SetComplement(uploadImagePrimaryKeyColumns, uploadImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, templatePartDBTypes, false, strmangle.SetComplement(templatePartPrimaryKeyColumns, templatePartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPart(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePart(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Part().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Part != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PartID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PartUploadImages) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUploadImageToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UploadImage
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, uploadImageDBTypes, false, strmangle.SetComplement(uploadImagePrimaryKeyColumns, uploadImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UploadImages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUploadImagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUploadImagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UploadImageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUploadImagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UploadImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	uploadImageDBTypes = map[string]string{`ImageID`: `char`, `FileURL`: `varchar`, `GroupID`: `char`, `UserID`: `char`, `PartID`: `char`, `CollageDay`: `date`, `CreatedAt`: `timestamp`}
	_                  = bytes.MinRead
)

func testUploadImagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(uploadImagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(uploadImageAllColumns) == len(uploadImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UploadImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUploadImagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(uploadImageAllColumns) == len(uploadImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UploadImage{}
	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UploadImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, uploadImageDBTypes, true, uploadImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(uploadImageAllColumns, uploadImagePrimaryKeyColumns) {
		fields = uploadImageAllColumns
	} else {
		fields = strmangle.SetComplement(
			uploadImageAllColumns,
			uploadImagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UploadImageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUploadImagesUpsert(t *testing.T) {
	t.Parallel()

	if len(uploadImageAllColumns) == len(uploadImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUploadImageUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UploadImage{}
	if err = randomize.Struct(seed, &o, uploadImageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UploadImage: %s", err)
	}

	count, err := UploadImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, uploadImageDBTypes, false, uploadImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UploadImage: %s", err)
	}

	count, err = UploadImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
