// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
)

// TemplatePart is an object representing the database table.
type TemplatePart struct { // ãƒ‘ãƒ¼ãƒ„ID (UUID)
	PartID string `boil:"part_id" json:"part_id" toml:"part_id" yaml:"part_id"`
	// ãƒ†ãƒ³ãƒ—ãƒ¬ãƒ¼ãƒˆID
	TemplateID string `boil:"template_id" json:"template_id" toml:"template_id" yaml:"template_id"`
	// ãƒ‘ãƒ¼ãƒ„ç•ªå·ï¼ˆ1ã‹ã‚‰å§‹ã¾ã‚‹é€£ç•ªï¼‰
	PartNumber int `boil:"part_number" json:"part_number" toml:"part_number" yaml:"part_number"`
	// ãƒ‘ãƒ¼ãƒ„åï¼ˆä¾‹: "å·¦ä¸Š", "ä¸­å¤®"ï¼‰
	PartName null.String `boil:"part_name" json:"part_name,omitempty" toml:"part_name" yaml:"part_name,omitempty"`
	// Xåº§æ¨™
	PositionX int `boil:"position_x" json:"position_x" toml:"position_x" yaml:"position_x"`
	// Yåº§æ¨™
	PositionY int `boil:"position_y" json:"position_y" toml:"position_y" yaml:"position_y"`
	// å¹…
	Width int `boil:"width" json:"width" toml:"width" yaml:"width"`
	// é«˜ã•
	Height int `boil:"height" json:"height" toml:"height" yaml:"height"`
	// ãƒ‘ãƒ¼ãƒ„ã®èª¬æ˜Žï¼ˆã©ã‚“ãªå†™çœŸã‚’æ’®ã‚‹ã‹ç­‰ï¼‰
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	// ä½œæˆæ—¥æ™‚
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// æ›´æ–°æ—¥æ™‚
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *templatePartR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L templatePartL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TemplatePartColumns = struct {
	PartID      string
	TemplateID  string
	PartNumber  string
	PartName    string
	PositionX   string
	PositionY   string
	Width       string
	Height      string
	Description string
	CreatedAt   string
	UpdatedAt   string
}{
	PartID:      "part_id",
	TemplateID:  "template_id",
	PartNumber:  "part_number",
	PartName:    "part_name",
	PositionX:   "position_x",
	PositionY:   "position_y",
	Width:       "width",
	Height:      "height",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var TemplatePartTableColumns = struct {
	PartID      string
	TemplateID  string
	PartNumber  string
	PartName    string
	PositionX   string
	PositionY   string
	Width       string
	Height      string
	Description string
	CreatedAt   string
	UpdatedAt   string
}{
	PartID:      "template_parts.part_id",
	TemplateID:  "template_parts.template_id",
	PartNumber:  "template_parts.part_number",
	PartName:    "template_parts.part_name",
	PositionX:   "template_parts.position_x",
	PositionY:   "template_parts.position_y",
	Width:       "template_parts.width",
	Height:      "template_parts.height",
	Description: "template_parts.description",
	CreatedAt:   "template_parts.created_at",
	UpdatedAt:   "template_parts.updated_at",
}

// Generated where

var TemplatePartWhere = struct {
	PartID      whereHelperstring
	TemplateID  whereHelperstring
	PartNumber  whereHelperint
	PartName    whereHelpernull_String
	PositionX   whereHelperint
	PositionY   whereHelperint
	Width       whereHelperint
	Height      whereHelperint
	Description whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	PartID:      whereHelperstring{field: "`template_parts`.`part_id`"},
	TemplateID:  whereHelperstring{field: "`template_parts`.`template_id`"},
	PartNumber:  whereHelperint{field: "`template_parts`.`part_number`"},
	PartName:    whereHelpernull_String{field: "`template_parts`.`part_name`"},
	PositionX:   whereHelperint{field: "`template_parts`.`position_x`"},
	PositionY:   whereHelperint{field: "`template_parts`.`position_y`"},
	Width:       whereHelperint{field: "`template_parts`.`width`"},
	Height:      whereHelperint{field: "`template_parts`.`height`"},
	Description: whereHelpernull_String{field: "`template_parts`.`description`"},
	CreatedAt:   whereHelpertime_Time{field: "`template_parts`.`created_at`"},
	UpdatedAt:   whereHelpertime_Time{field: "`template_parts`.`updated_at`"},
}

// TemplatePartRels is where relationship names are stored.
var TemplatePartRels = struct {
	Template                 string
	PartGroupPartAssignments string
	PartUploadImages         string
}{
	Template:                 "Template",
	PartGroupPartAssignments: "PartGroupPartAssignments",
	PartUploadImages:         "PartUploadImages",
}

// templatePartR is where relationships are stored.
type templatePartR struct {
	Template                 *CollagesTemplate        `boil:"Template" json:"Template" toml:"Template" yaml:"Template"`
	PartGroupPartAssignments GroupPartAssignmentSlice `boil:"PartGroupPartAssignments" json:"PartGroupPartAssignments" toml:"PartGroupPartAssignments" yaml:"PartGroupPartAssignments"`
	PartUploadImages         UploadImageSlice         `boil:"PartUploadImages" json:"PartUploadImages" toml:"PartUploadImages" yaml:"PartUploadImages"`
}

// NewStruct creates a new relationship struct
func (*templatePartR) NewStruct() *templatePartR {
	return &templatePartR{}
}

func (r *templatePartR) GetTemplate() *CollagesTemplate {
	if r == nil {
		return nil
	}
	return r.Template
}

func (r *templatePartR) GetPartGroupPartAssignments() GroupPartAssignmentSlice {
	if r == nil {
		return nil
	}
	return r.PartGroupPartAssignments
}

func (r *templatePartR) GetPartUploadImages() UploadImageSlice {
	if r == nil {
		return nil
	}
	return r.PartUploadImages
}

// templatePartL is where Load methods for each relationship are stored.
type templatePartL struct{}

var (
	templatePartAllColumns            = []string{"part_id", "template_id", "part_number", "part_name", "position_x", "position_y", "width", "height", "description", "created_at", "updated_at"}
	templatePartColumnsWithoutDefault = []string{"part_id", "template_id", "part_number", "part_name", "position_x", "position_y", "width", "height", "description"}
	templatePartColumnsWithDefault    = []string{"created_at", "updated_at"}
	templatePartPrimaryKeyColumns     = []string{"part_id"}
	templatePartGeneratedColumns      = []string{}
)

type (
	// TemplatePartSlice is an alias for a slice of pointers to TemplatePart.
	// This should almost always be used instead of []TemplatePart.
	TemplatePartSlice []*TemplatePart
	// TemplatePartHook is the signature for custom TemplatePart hook methods
	TemplatePartHook func(context.Context, boil.ContextExecutor, *TemplatePart) error

	templatePartQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	templatePartType                 = reflect.TypeOf(&TemplatePart{})
	templatePartMapping              = queries.MakeStructMapping(templatePartType)
	templatePartPrimaryKeyMapping, _ = queries.BindMapping(templatePartType, templatePartMapping, templatePartPrimaryKeyColumns)
	templatePartInsertCacheMut       sync.RWMutex
	templatePartInsertCache          = make(map[string]insertCache)
	templatePartUpdateCacheMut       sync.RWMutex
	templatePartUpdateCache          = make(map[string]updateCache)
	templatePartUpsertCacheMut       sync.RWMutex
	templatePartUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var templatePartAfterSelectMu sync.Mutex
var templatePartAfterSelectHooks []TemplatePartHook

var templatePartBeforeInsertMu sync.Mutex
var templatePartBeforeInsertHooks []TemplatePartHook
var templatePartAfterInsertMu sync.Mutex
var templatePartAfterInsertHooks []TemplatePartHook

var templatePartBeforeUpdateMu sync.Mutex
var templatePartBeforeUpdateHooks []TemplatePartHook
var templatePartAfterUpdateMu sync.Mutex
var templatePartAfterUpdateHooks []TemplatePartHook

var templatePartBeforeDeleteMu sync.Mutex
var templatePartBeforeDeleteHooks []TemplatePartHook
var templatePartAfterDeleteMu sync.Mutex
var templatePartAfterDeleteHooks []TemplatePartHook

var templatePartBeforeUpsertMu sync.Mutex
var templatePartBeforeUpsertHooks []TemplatePartHook
var templatePartAfterUpsertMu sync.Mutex
var templatePartAfterUpsertHooks []TemplatePartHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TemplatePart) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templatePartAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TemplatePart) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templatePartBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TemplatePart) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templatePartAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TemplatePart) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templatePartBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TemplatePart) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templatePartAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TemplatePart) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templatePartBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TemplatePart) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templatePartAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TemplatePart) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templatePartBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TemplatePart) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range templatePartAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTemplatePartHook registers your hook function for all future operations.
func AddTemplatePartHook(hookPoint boil.HookPoint, templatePartHook TemplatePartHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		templatePartAfterSelectMu.Lock()
		templatePartAfterSelectHooks = append(templatePartAfterSelectHooks, templatePartHook)
		templatePartAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		templatePartBeforeInsertMu.Lock()
		templatePartBeforeInsertHooks = append(templatePartBeforeInsertHooks, templatePartHook)
		templatePartBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		templatePartAfterInsertMu.Lock()
		templatePartAfterInsertHooks = append(templatePartAfterInsertHooks, templatePartHook)
		templatePartAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		templatePartBeforeUpdateMu.Lock()
		templatePartBeforeUpdateHooks = append(templatePartBeforeUpdateHooks, templatePartHook)
		templatePartBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		templatePartAfterUpdateMu.Lock()
		templatePartAfterUpdateHooks = append(templatePartAfterUpdateHooks, templatePartHook)
		templatePartAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		templatePartBeforeDeleteMu.Lock()
		templatePartBeforeDeleteHooks = append(templatePartBeforeDeleteHooks, templatePartHook)
		templatePartBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		templatePartAfterDeleteMu.Lock()
		templatePartAfterDeleteHooks = append(templatePartAfterDeleteHooks, templatePartHook)
		templatePartAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		templatePartBeforeUpsertMu.Lock()
		templatePartBeforeUpsertHooks = append(templatePartBeforeUpsertHooks, templatePartHook)
		templatePartBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		templatePartAfterUpsertMu.Lock()
		templatePartAfterUpsertHooks = append(templatePartAfterUpsertHooks, templatePartHook)
		templatePartAfterUpsertMu.Unlock()
	}
}

// One returns a single templatePart record from the query.
func (q templatePartQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TemplatePart, error) {
	o := &TemplatePart{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for template_parts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TemplatePart records from the query.
func (q templatePartQuery) All(ctx context.Context, exec boil.ContextExecutor) (TemplatePartSlice, error) {
	var o []*TemplatePart

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TemplatePart slice")
	}

	if len(templatePartAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TemplatePart records in the query.
func (q templatePartQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count template_parts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q templatePartQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if template_parts exists")
	}

	return count > 0, nil
}

// Template pointed to by the foreign key.
func (o *TemplatePart) Template(mods ...qm.QueryMod) collagesTemplateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`template_id` = ?", o.TemplateID),
	}

	queryMods = append(queryMods, mods...)

	return CollagesTemplates(queryMods...)
}

// PartGroupPartAssignments retrieves all the group_part_assignment's GroupPartAssignments with an executor via part_id column.
func (o *TemplatePart) PartGroupPartAssignments(mods ...qm.QueryMod) groupPartAssignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`group_part_assignments`.`part_id`=?", o.PartID),
	)

	return GroupPartAssignments(queryMods...)
}

// PartUploadImages retrieves all the upload_image's UploadImages with an executor via part_id column.
func (o *TemplatePart) PartUploadImages(mods ...qm.QueryMod) uploadImageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`upload_images`.`part_id`=?", o.PartID),
	)

	return UploadImages(queryMods...)
}

// LoadTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (templatePartL) LoadTemplate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTemplatePart interface{}, mods queries.Applicator) error {
	var slice []*TemplatePart
	var object *TemplatePart

	if singular {
		var ok bool
		object, ok = maybeTemplatePart.(*TemplatePart)
		if !ok {
			object = new(TemplatePart)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTemplatePart)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTemplatePart))
			}
		}
	} else {
		s, ok := maybeTemplatePart.(*[]*TemplatePart)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTemplatePart)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTemplatePart))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &templatePartR{}
		}
		args[object.TemplateID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templatePartR{}
			}

			args[obj.TemplateID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`collages_template`),
		qm.WhereIn(`collages_template.template_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CollagesTemplate")
	}

	var resultSlice []*CollagesTemplate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CollagesTemplate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collages_template")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collages_template")
	}

	if len(collagesTemplateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Template = foreign
		if foreign.R == nil {
			foreign.R = &collagesTemplateR{}
		}
		foreign.R.TemplateTemplateParts = append(foreign.R.TemplateTemplateParts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateID == foreign.TemplateID {
				local.R.Template = foreign
				if foreign.R == nil {
					foreign.R = &collagesTemplateR{}
				}
				foreign.R.TemplateTemplateParts = append(foreign.R.TemplateTemplateParts, local)
				break
			}
		}
	}

	return nil
}

// LoadPartGroupPartAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (templatePartL) LoadPartGroupPartAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTemplatePart interface{}, mods queries.Applicator) error {
	var slice []*TemplatePart
	var object *TemplatePart

	if singular {
		var ok bool
		object, ok = maybeTemplatePart.(*TemplatePart)
		if !ok {
			object = new(TemplatePart)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTemplatePart)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTemplatePart))
			}
		}
	} else {
		s, ok := maybeTemplatePart.(*[]*TemplatePart)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTemplatePart)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTemplatePart))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &templatePartR{}
		}
		args[object.PartID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templatePartR{}
			}
			args[obj.PartID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`group_part_assignments`),
		qm.WhereIn(`group_part_assignments.part_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load group_part_assignments")
	}

	var resultSlice []*GroupPartAssignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice group_part_assignments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on group_part_assignments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for group_part_assignments")
	}

	if len(groupPartAssignmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PartGroupPartAssignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &groupPartAssignmentR{}
			}
			foreign.R.Part = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PartID == foreign.PartID {
				local.R.PartGroupPartAssignments = append(local.R.PartGroupPartAssignments, foreign)
				if foreign.R == nil {
					foreign.R = &groupPartAssignmentR{}
				}
				foreign.R.Part = local
				break
			}
		}
	}

	return nil
}

// LoadPartUploadImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (templatePartL) LoadPartUploadImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTemplatePart interface{}, mods queries.Applicator) error {
	var slice []*TemplatePart
	var object *TemplatePart

	if singular {
		var ok bool
		object, ok = maybeTemplatePart.(*TemplatePart)
		if !ok {
			object = new(TemplatePart)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTemplatePart)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTemplatePart))
			}
		}
	} else {
		s, ok := maybeTemplatePart.(*[]*TemplatePart)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTemplatePart)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTemplatePart))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &templatePartR{}
		}
		args[object.PartID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templatePartR{}
			}
			args[obj.PartID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`upload_images`),
		qm.WhereIn(`upload_images.part_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upload_images")
	}

	var resultSlice []*UploadImage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upload_images")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on upload_images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for upload_images")
	}

	if len(uploadImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PartUploadImages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &uploadImageR{}
			}
			foreign.R.Part = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PartID, foreign.PartID) {
				local.R.PartUploadImages = append(local.R.PartUploadImages, foreign)
				if foreign.R == nil {
					foreign.R = &uploadImageR{}
				}
				foreign.R.Part = local
				break
			}
		}
	}

	return nil
}

// SetTemplate of the templatePart to the related item.
// Sets o.R.Template to related.
// Adds o to related.R.TemplateTemplateParts.
func (o *TemplatePart) SetTemplate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CollagesTemplate) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `template_parts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"template_id"}),
		strmangle.WhereClause("`", "`", 0, templatePartPrimaryKeyColumns),
	)
	values := []interface{}{related.TemplateID, o.PartID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplateID = related.TemplateID
	if o.R == nil {
		o.R = &templatePartR{
			Template: related,
		}
	} else {
		o.R.Template = related
	}

	if related.R == nil {
		related.R = &collagesTemplateR{
			TemplateTemplateParts: TemplatePartSlice{o},
		}
	} else {
		related.R.TemplateTemplateParts = append(related.R.TemplateTemplateParts, o)
	}

	return nil
}

// AddPartGroupPartAssignments adds the given related objects to the existing relationships
// of the template_part, optionally inserting them as new records.
// Appends related to o.R.PartGroupPartAssignments.
// Sets related.R.Part appropriately.
func (o *TemplatePart) AddPartGroupPartAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GroupPartAssignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PartID = o.PartID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `group_part_assignments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"part_id"}),
				strmangle.WhereClause("`", "`", 0, groupPartAssignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.PartID, rel.AssignmentID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PartID = o.PartID
		}
	}

	if o.R == nil {
		o.R = &templatePartR{
			PartGroupPartAssignments: related,
		}
	} else {
		o.R.PartGroupPartAssignments = append(o.R.PartGroupPartAssignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &groupPartAssignmentR{
				Part: o,
			}
		} else {
			rel.R.Part = o
		}
	}
	return nil
}

// AddPartUploadImages adds the given related objects to the existing relationships
// of the template_part, optionally inserting them as new records.
// Appends related to o.R.PartUploadImages.
// Sets related.R.Part appropriately.
func (o *TemplatePart) AddPartUploadImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UploadImage) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PartID, o.PartID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `upload_images` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"part_id"}),
				strmangle.WhereClause("`", "`", 0, uploadImagePrimaryKeyColumns),
			)
			values := []interface{}{o.PartID, rel.ImageID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PartID, o.PartID)
		}
	}

	if o.R == nil {
		o.R = &templatePartR{
			PartUploadImages: related,
		}
	} else {
		o.R.PartUploadImages = append(o.R.PartUploadImages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &uploadImageR{
				Part: o,
			}
		} else {
			rel.R.Part = o
		}
	}
	return nil
}

// SetPartUploadImages removes all previously related items of the
// template_part replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Part's PartUploadImages accordingly.
// Replaces o.R.PartUploadImages with related.
// Sets related.R.Part's PartUploadImages accordingly.
func (o *TemplatePart) SetPartUploadImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UploadImage) error {
	query := "update `upload_images` set `part_id` = null where `part_id` = ?"
	values := []interface{}{o.PartID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PartUploadImages {
			queries.SetScanner(&rel.PartID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Part = nil
		}
		o.R.PartUploadImages = nil
	}

	return o.AddPartUploadImages(ctx, exec, insert, related...)
}

// RemovePartUploadImages relationships from objects passed in.
// Removes related items from R.PartUploadImages (uses pointer comparison, removal does not keep order)
// Sets related.R.Part.
func (o *TemplatePart) RemovePartUploadImages(ctx context.Context, exec boil.ContextExecutor, related ...*UploadImage) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PartID, nil)
		if rel.R != nil {
			rel.R.Part = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("part_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PartUploadImages {
			if rel != ri {
				continue
			}

			ln := len(o.R.PartUploadImages)
			if ln > 1 && i < ln-1 {
				o.R.PartUploadImages[i] = o.R.PartUploadImages[ln-1]
			}
			o.R.PartUploadImages = o.R.PartUploadImages[:ln-1]
			break
		}
	}

	return nil
}

// TemplateParts retrieves all the records using an executor.
func TemplateParts(mods ...qm.QueryMod) templatePartQuery {
	mods = append(mods, qm.From("`template_parts`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`template_parts`.*"})
	}

	return templatePartQuery{q}
}

// FindTemplatePart retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTemplatePart(ctx context.Context, exec boil.ContextExecutor, partID string, selectCols ...string) (*TemplatePart, error) {
	templatePartObj := &TemplatePart{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `template_parts` where `part_id`=?", sel,
	)

	q := queries.Raw(query, partID)

	err := q.Bind(ctx, exec, templatePartObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from template_parts")
	}

	if err = templatePartObj.doAfterSelectHooks(ctx, exec); err != nil {
		return templatePartObj, err
	}

	return templatePartObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TemplatePart) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no template_parts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templatePartColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	templatePartInsertCacheMut.RLock()
	cache, cached := templatePartInsertCache[key]
	templatePartInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			templatePartAllColumns,
			templatePartColumnsWithDefault,
			templatePartColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(templatePartType, templatePartMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(templatePartType, templatePartMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `template_parts` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `template_parts` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `template_parts` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, templatePartPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into template_parts")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PartID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for template_parts")
	}

CacheNoHooks:
	if !cached {
		templatePartInsertCacheMut.Lock()
		templatePartInsertCache[key] = cache
		templatePartInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TemplatePart.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TemplatePart) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	templatePartUpdateCacheMut.RLock()
	cache, cached := templatePartUpdateCache[key]
	templatePartUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			templatePartAllColumns,
			templatePartPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update template_parts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `template_parts` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, templatePartPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(templatePartType, templatePartMapping, append(wl, templatePartPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update template_parts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for template_parts")
	}

	if !cached {
		templatePartUpdateCacheMut.Lock()
		templatePartUpdateCache[key] = cache
		templatePartUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q templatePartQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for template_parts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for template_parts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TemplatePartSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatePartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `template_parts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, templatePartPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in templatePart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all templatePart")
	}
	return rowsAff, nil
}

var mySQLTemplatePartUniqueColumns = []string{
	"part_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TemplatePart) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no template_parts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templatePartColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTemplatePartUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	templatePartUpsertCacheMut.RLock()
	cache, cached := templatePartUpsertCache[key]
	templatePartUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			templatePartAllColumns,
			templatePartColumnsWithDefault,
			templatePartColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			templatePartAllColumns,
			templatePartPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert template_parts, could not build update column list")
		}

		ret := strmangle.SetComplement(templatePartAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`template_parts`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `template_parts` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(templatePartType, templatePartMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(templatePartType, templatePartMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for template_parts")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(templatePartType, templatePartMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for template_parts")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for template_parts")
	}

CacheNoHooks:
	if !cached {
		templatePartUpsertCacheMut.Lock()
		templatePartUpsertCache[key] = cache
		templatePartUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TemplatePart record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TemplatePart) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TemplatePart provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), templatePartPrimaryKeyMapping)
	sql := "DELETE FROM `template_parts` WHERE `part_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from template_parts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for template_parts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q templatePartQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no templatePartQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from template_parts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for template_parts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TemplatePartSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(templatePartBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatePartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `template_parts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, templatePartPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from templatePart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for template_parts")
	}

	if len(templatePartAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TemplatePart) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTemplatePart(ctx, exec, o.PartID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TemplatePartSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TemplatePartSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatePartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `template_parts`.* FROM `template_parts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, templatePartPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TemplatePartSlice")
	}

	*o = slice

	return nil
}

// TemplatePartExists checks if the TemplatePart row exists.
func TemplatePartExists(ctx context.Context, exec boil.ContextExecutor, partID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `template_parts` where `part_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, partID)
	}
	row := exec.QueryRowContext(ctx, sql, partID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if template_parts exists")
	}

	return exists, nil
}

// Exists checks if the TemplatePart row exists.
func (o *TemplatePart) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TemplatePartExists(ctx, exec, o.PartID)
}
