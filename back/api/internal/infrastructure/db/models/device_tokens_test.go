// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDeviceTokens(t *testing.T) {
	t.Parallel()

	query := DeviceTokens()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDeviceTokensDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeviceTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeviceTokensQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DeviceTokens().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeviceTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeviceTokensSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeviceTokenSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeviceTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeviceTokensExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeviceTokenExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DeviceToken exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeviceTokenExists to return true, but got false.")
	}
}

func testDeviceTokensFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deviceTokenFound, err := FindDeviceToken(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if deviceTokenFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDeviceTokensBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DeviceTokens().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDeviceTokensOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DeviceTokens().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDeviceTokensAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deviceTokenOne := &DeviceToken{}
	deviceTokenTwo := &DeviceToken{}
	if err = randomize.Struct(seed, deviceTokenOne, deviceTokenDBTypes, false, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}
	if err = randomize.Struct(seed, deviceTokenTwo, deviceTokenDBTypes, false, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deviceTokenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deviceTokenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeviceTokens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDeviceTokensCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deviceTokenOne := &DeviceToken{}
	deviceTokenTwo := &DeviceToken{}
	if err = randomize.Struct(seed, deviceTokenOne, deviceTokenDBTypes, false, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}
	if err = randomize.Struct(seed, deviceTokenTwo, deviceTokenDBTypes, false, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deviceTokenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deviceTokenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeviceTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deviceTokenBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeviceToken) error {
	*o = DeviceToken{}
	return nil
}

func deviceTokenAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeviceToken) error {
	*o = DeviceToken{}
	return nil
}

func deviceTokenAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DeviceToken) error {
	*o = DeviceToken{}
	return nil
}

func deviceTokenBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeviceToken) error {
	*o = DeviceToken{}
	return nil
}

func deviceTokenAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeviceToken) error {
	*o = DeviceToken{}
	return nil
}

func deviceTokenBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeviceToken) error {
	*o = DeviceToken{}
	return nil
}

func deviceTokenAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeviceToken) error {
	*o = DeviceToken{}
	return nil
}

func deviceTokenBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeviceToken) error {
	*o = DeviceToken{}
	return nil
}

func deviceTokenAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeviceToken) error {
	*o = DeviceToken{}
	return nil
}

func testDeviceTokensHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DeviceToken{}
	o := &DeviceToken{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeviceToken object: %s", err)
	}

	AddDeviceTokenHook(boil.BeforeInsertHook, deviceTokenBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deviceTokenBeforeInsertHooks = []DeviceTokenHook{}

	AddDeviceTokenHook(boil.AfterInsertHook, deviceTokenAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deviceTokenAfterInsertHooks = []DeviceTokenHook{}

	AddDeviceTokenHook(boil.AfterSelectHook, deviceTokenAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deviceTokenAfterSelectHooks = []DeviceTokenHook{}

	AddDeviceTokenHook(boil.BeforeUpdateHook, deviceTokenBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deviceTokenBeforeUpdateHooks = []DeviceTokenHook{}

	AddDeviceTokenHook(boil.AfterUpdateHook, deviceTokenAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deviceTokenAfterUpdateHooks = []DeviceTokenHook{}

	AddDeviceTokenHook(boil.BeforeDeleteHook, deviceTokenBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deviceTokenBeforeDeleteHooks = []DeviceTokenHook{}

	AddDeviceTokenHook(boil.AfterDeleteHook, deviceTokenAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deviceTokenAfterDeleteHooks = []DeviceTokenHook{}

	AddDeviceTokenHook(boil.BeforeUpsertHook, deviceTokenBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deviceTokenBeforeUpsertHooks = []DeviceTokenHook{}

	AddDeviceTokenHook(boil.AfterUpsertHook, deviceTokenAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deviceTokenAfterUpsertHooks = []DeviceTokenHook{}
}

func testDeviceTokensInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeviceTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeviceTokensInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(deviceTokenColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DeviceTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeviceTokenToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DeviceToken
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, deviceTokenDBTypes, false, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DeviceTokenSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*DeviceToken)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDeviceTokenToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeviceToken
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deviceTokenDBTypes, false, strmangle.SetComplement(deviceTokenPrimaryKeyColumns, deviceTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeviceTokens[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testDeviceTokensReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeviceTokensReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeviceTokenSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeviceTokensSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeviceTokens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deviceTokenDBTypes = map[string]string{`ID`: `char`, `UserID`: `char`, `DeviceToken`: `varchar`, `DeviceType`: `enum('ios','android')`, `DeviceName`: `varchar`, `IsActive`: `tinyint`, `LastUsedAt`: `timestamp`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                  = bytes.MinRead
)

func testDeviceTokensUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(deviceTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deviceTokenAllColumns) == len(deviceTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeviceTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDeviceTokensSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deviceTokenAllColumns) == len(deviceTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeviceToken{}
	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeviceTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deviceTokenDBTypes, true, deviceTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deviceTokenAllColumns, deviceTokenPrimaryKeyColumns) {
		fields = deviceTokenAllColumns
	} else {
		fields = strmangle.SetComplement(
			deviceTokenAllColumns,
			deviceTokenPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeviceTokenSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDeviceTokensUpsert(t *testing.T) {
	t.Parallel()

	if len(deviceTokenAllColumns) == len(deviceTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDeviceTokenUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DeviceToken{}
	if err = randomize.Struct(seed, &o, deviceTokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeviceToken: %s", err)
	}

	count, err := DeviceTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deviceTokenDBTypes, false, deviceTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeviceToken struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeviceToken: %s", err)
	}

	count, err = DeviceTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
