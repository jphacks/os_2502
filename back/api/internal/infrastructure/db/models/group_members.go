// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GroupMember is an object representing the database table.
type GroupMember struct { // ãƒ¡ãƒ³ãƒãƒ¼ID (UUID)
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ã‚°ãƒ«ãƒ¼ãƒ—ID
	GroupID string `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	// ãƒ¦ãƒ¼ã‚¶ãƒ¼ID
	UserID string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// ã‚°ãƒ«ãƒ¼ãƒ—ä½œæˆè€…ã‹ã©ã†ã‹
	IsOwner bool `boil:"is_owner" json:"is_owner" toml:"is_owner" yaml:"is_owner"`
	// æº–å‚™å®Œäº†çŠ¶æ…‹
	ReadyStatus bool `boil:"ready_status" json:"ready_status" toml:"ready_status" yaml:"ready_status"`
	// æº–å‚™å®Œäº†æ™‚åˆ»
	ReadyAt null.Time `boil:"ready_at" json:"ready_at,omitempty" toml:"ready_at" yaml:"ready_at,omitempty"`
	// å‚åŠ æ™‚åˆ»
	JoinedAt time.Time `boil:"joined_at" json:"joined_at" toml:"joined_at" yaml:"joined_at"`
	// æ›´æ–°æ—¥æ™‚
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *groupMemberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupMemberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupMemberColumns = struct {
	ID          string
	GroupID     string
	UserID      string
	IsOwner     string
	ReadyStatus string
	ReadyAt     string
	JoinedAt    string
	UpdatedAt   string
}{
	ID:          "id",
	GroupID:     "group_id",
	UserID:      "user_id",
	IsOwner:     "is_owner",
	ReadyStatus: "ready_status",
	ReadyAt:     "ready_at",
	JoinedAt:    "joined_at",
	UpdatedAt:   "updated_at",
}

var GroupMemberTableColumns = struct {
	ID          string
	GroupID     string
	UserID      string
	IsOwner     string
	ReadyStatus string
	ReadyAt     string
	JoinedAt    string
	UpdatedAt   string
}{
	ID:          "group_members.id",
	GroupID:     "group_members.group_id",
	UserID:      "group_members.user_id",
	IsOwner:     "group_members.is_owner",
	ReadyStatus: "group_members.ready_status",
	ReadyAt:     "group_members.ready_at",
	JoinedAt:    "group_members.joined_at",
	UpdatedAt:   "group_members.updated_at",
}

// Generated where

var GroupMemberWhere = struct {
	ID          whereHelperstring
	GroupID     whereHelperstring
	UserID      whereHelperstring
	IsOwner     whereHelperbool
	ReadyStatus whereHelperbool
	ReadyAt     whereHelpernull_Time
	JoinedAt    whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "`group_members`.`id`"},
	GroupID:     whereHelperstring{field: "`group_members`.`group_id`"},
	UserID:      whereHelperstring{field: "`group_members`.`user_id`"},
	IsOwner:     whereHelperbool{field: "`group_members`.`is_owner`"},
	ReadyStatus: whereHelperbool{field: "`group_members`.`ready_status`"},
	ReadyAt:     whereHelpernull_Time{field: "`group_members`.`ready_at`"},
	JoinedAt:    whereHelpertime_Time{field: "`group_members`.`joined_at`"},
	UpdatedAt:   whereHelpertime_Time{field: "`group_members`.`updated_at`"},
}

// GroupMemberRels is where relationship names are stored.
var GroupMemberRels = struct {
	Group string
	User  string
}{
	Group: "Group",
	User:  "User",
}

// groupMemberR is where relationships are stored.
type groupMemberR struct {
	Group *Group `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
	User  *User  `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*groupMemberR) NewStruct() *groupMemberR {
	return &groupMemberR{}
}

func (r *groupMemberR) GetGroup() *Group {
	if r == nil {
		return nil
	}
	return r.Group
}

func (r *groupMemberR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// groupMemberL is where Load methods for each relationship are stored.
type groupMemberL struct{}

var (
	groupMemberAllColumns            = []string{"id", "group_id", "user_id", "is_owner", "ready_status", "ready_at", "joined_at", "updated_at"}
	groupMemberColumnsWithoutDefault = []string{"id", "group_id", "user_id", "ready_at"}
	groupMemberColumnsWithDefault    = []string{"is_owner", "ready_status", "joined_at", "updated_at"}
	groupMemberPrimaryKeyColumns     = []string{"group_id", "user_id"}
	groupMemberGeneratedColumns      = []string{}
)

type (
	// GroupMemberSlice is an alias for a slice of pointers to GroupMember.
	// This should almost always be used instead of []GroupMember.
	GroupMemberSlice []*GroupMember
	// GroupMemberHook is the signature for custom GroupMember hook methods
	GroupMemberHook func(context.Context, boil.ContextExecutor, *GroupMember) error

	groupMemberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupMemberType                 = reflect.TypeOf(&GroupMember{})
	groupMemberMapping              = queries.MakeStructMapping(groupMemberType)
	groupMemberPrimaryKeyMapping, _ = queries.BindMapping(groupMemberType, groupMemberMapping, groupMemberPrimaryKeyColumns)
	groupMemberInsertCacheMut       sync.RWMutex
	groupMemberInsertCache          = make(map[string]insertCache)
	groupMemberUpdateCacheMut       sync.RWMutex
	groupMemberUpdateCache          = make(map[string]updateCache)
	groupMemberUpsertCacheMut       sync.RWMutex
	groupMemberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groupMemberAfterSelectMu sync.Mutex
var groupMemberAfterSelectHooks []GroupMemberHook

var groupMemberBeforeInsertMu sync.Mutex
var groupMemberBeforeInsertHooks []GroupMemberHook
var groupMemberAfterInsertMu sync.Mutex
var groupMemberAfterInsertHooks []GroupMemberHook

var groupMemberBeforeUpdateMu sync.Mutex
var groupMemberBeforeUpdateHooks []GroupMemberHook
var groupMemberAfterUpdateMu sync.Mutex
var groupMemberAfterUpdateHooks []GroupMemberHook

var groupMemberBeforeDeleteMu sync.Mutex
var groupMemberBeforeDeleteHooks []GroupMemberHook
var groupMemberAfterDeleteMu sync.Mutex
var groupMemberAfterDeleteHooks []GroupMemberHook

var groupMemberBeforeUpsertMu sync.Mutex
var groupMemberBeforeUpsertHooks []GroupMemberHook
var groupMemberAfterUpsertMu sync.Mutex
var groupMemberAfterUpsertHooks []GroupMemberHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GroupMember) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMemberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GroupMember) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMemberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GroupMember) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMemberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GroupMember) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMemberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GroupMember) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMemberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GroupMember) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMemberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GroupMember) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMemberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GroupMember) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMemberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GroupMember) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range groupMemberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupMemberHook registers your hook function for all future operations.
func AddGroupMemberHook(hookPoint boil.HookPoint, groupMemberHook GroupMemberHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		groupMemberAfterSelectMu.Lock()
		groupMemberAfterSelectHooks = append(groupMemberAfterSelectHooks, groupMemberHook)
		groupMemberAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		groupMemberBeforeInsertMu.Lock()
		groupMemberBeforeInsertHooks = append(groupMemberBeforeInsertHooks, groupMemberHook)
		groupMemberBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		groupMemberAfterInsertMu.Lock()
		groupMemberAfterInsertHooks = append(groupMemberAfterInsertHooks, groupMemberHook)
		groupMemberAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		groupMemberBeforeUpdateMu.Lock()
		groupMemberBeforeUpdateHooks = append(groupMemberBeforeUpdateHooks, groupMemberHook)
		groupMemberBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		groupMemberAfterUpdateMu.Lock()
		groupMemberAfterUpdateHooks = append(groupMemberAfterUpdateHooks, groupMemberHook)
		groupMemberAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		groupMemberBeforeDeleteMu.Lock()
		groupMemberBeforeDeleteHooks = append(groupMemberBeforeDeleteHooks, groupMemberHook)
		groupMemberBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		groupMemberAfterDeleteMu.Lock()
		groupMemberAfterDeleteHooks = append(groupMemberAfterDeleteHooks, groupMemberHook)
		groupMemberAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		groupMemberBeforeUpsertMu.Lock()
		groupMemberBeforeUpsertHooks = append(groupMemberBeforeUpsertHooks, groupMemberHook)
		groupMemberBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		groupMemberAfterUpsertMu.Lock()
		groupMemberAfterUpsertHooks = append(groupMemberAfterUpsertHooks, groupMemberHook)
		groupMemberAfterUpsertMu.Unlock()
	}
}

// One returns a single groupMember record from the query.
func (q groupMemberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GroupMember, error) {
	o := &GroupMember{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for group_members")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GroupMember records from the query.
func (q groupMemberQuery) All(ctx context.Context, exec boil.ContextExecutor) (GroupMemberSlice, error) {
	var o []*GroupMember

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GroupMember slice")
	}

	if len(groupMemberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GroupMember records in the query.
func (q groupMemberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count group_members rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupMemberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if group_members exists")
	}

	return count > 0, nil
}

// Group pointed to by the foreign key.
func (o *GroupMember) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// User pointed to by the foreign key.
func (o *GroupMember) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupMemberL) LoadGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupMember interface{}, mods queries.Applicator) error {
	var slice []*GroupMember
	var object *GroupMember

	if singular {
		var ok bool
		object, ok = maybeGroupMember.(*GroupMember)
		if !ok {
			object = new(GroupMember)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupMember))
			}
		}
	} else {
		s, ok := maybeGroupMember.(*[]*GroupMember)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &groupMemberR{}
		}
		args[object.GroupID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupMemberR{}
			}

			args[obj.GroupID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.GroupMembers = append(foreign.R.GroupMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupID == foreign.ID {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.GroupMembers = append(foreign.R.GroupMembers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupMemberL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGroupMember interface{}, mods queries.Applicator) error {
	var slice []*GroupMember
	var object *GroupMember

	if singular {
		var ok bool
		object, ok = maybeGroupMember.(*GroupMember)
		if !ok {
			object = new(GroupMember)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGroupMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGroupMember))
			}
		}
	} else {
		s, ok := maybeGroupMember.(*[]*GroupMember)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGroupMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGroupMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &groupMemberR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupMemberR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.GroupMembers = append(foreign.R.GroupMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.GroupMembers = append(foreign.R.GroupMembers, local)
				break
			}
		}
	}

	return nil
}

// SetGroup of the groupMember to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupMembers.
func (o *GroupMember) SetGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `group_members` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
		strmangle.WhereClause("`", "`", 0, groupMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.GroupID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupID = related.ID
	if o.R == nil {
		o.R = &groupMemberR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			GroupMembers: GroupMemberSlice{o},
		}
	} else {
		related.R.GroupMembers = append(related.R.GroupMembers, o)
	}

	return nil
}

// SetUser of the groupMember to the related item.
// Sets o.R.User to related.
// Adds o to related.R.GroupMembers.
func (o *GroupMember) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `group_members` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, groupMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.GroupID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &groupMemberR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			GroupMembers: GroupMemberSlice{o},
		}
	} else {
		related.R.GroupMembers = append(related.R.GroupMembers, o)
	}

	return nil
}

// GroupMembers retrieves all the records using an executor.
func GroupMembers(mods ...qm.QueryMod) groupMemberQuery {
	mods = append(mods, qm.From("`group_members`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`group_members`.*"})
	}

	return groupMemberQuery{q}
}

// FindGroupMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupMember(ctx context.Context, exec boil.ContextExecutor, groupID string, userID string, selectCols ...string) (*GroupMember, error) {
	groupMemberObj := &GroupMember{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `group_members` where `group_id`=? AND `user_id`=?", sel,
	)

	q := queries.Raw(query, groupID, userID)

	err := q.Bind(ctx, exec, groupMemberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from group_members")
	}

	if err = groupMemberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return groupMemberObj, err
	}

	return groupMemberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroupMember) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_members provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupMemberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupMemberInsertCacheMut.RLock()
	cache, cached := groupMemberInsertCache[key]
	groupMemberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupMemberAllColumns,
			groupMemberColumnsWithDefault,
			groupMemberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupMemberType, groupMemberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupMemberType, groupMemberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `group_members` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `group_members` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `group_members` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, groupMemberPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into group_members")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.GroupID,
		o.UserID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for group_members")
	}

CacheNoHooks:
	if !cached {
		groupMemberInsertCacheMut.Lock()
		groupMemberInsertCache[key] = cache
		groupMemberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GroupMember.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroupMember) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groupMemberUpdateCacheMut.RLock()
	cache, cached := groupMemberUpdateCache[key]
	groupMemberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupMemberAllColumns,
			groupMemberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update group_members, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `group_members` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, groupMemberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupMemberType, groupMemberMapping, append(wl, groupMemberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update group_members row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for group_members")
	}

	if !cached {
		groupMemberUpdateCacheMut.Lock()
		groupMemberUpdateCache[key] = cache
		groupMemberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q groupMemberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for group_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for group_members")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupMemberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `group_members` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupMemberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in groupMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all groupMember")
	}
	return rowsAff, nil
}

var mySQLGroupMemberUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GroupMember) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no group_members provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupMemberColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGroupMemberUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupMemberUpsertCacheMut.RLock()
	cache, cached := groupMemberUpsertCache[key]
	groupMemberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			groupMemberAllColumns,
			groupMemberColumnsWithDefault,
			groupMemberColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			groupMemberAllColumns,
			groupMemberPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert group_members, could not build update column list")
		}

		ret := strmangle.SetComplement(groupMemberAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`group_members`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `group_members` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(groupMemberType, groupMemberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupMemberType, groupMemberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for group_members")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(groupMemberType, groupMemberMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for group_members")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for group_members")
	}

CacheNoHooks:
	if !cached {
		groupMemberUpsertCacheMut.Lock()
		groupMemberUpsertCache[key] = cache
		groupMemberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GroupMember record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupMember) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GroupMember provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupMemberPrimaryKeyMapping)
	sql := "DELETE FROM `group_members` WHERE `group_id`=? AND `user_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from group_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for group_members")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupMemberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no groupMemberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from group_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_members")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupMemberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(groupMemberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `group_members` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupMemberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from groupMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for group_members")
	}

	if len(groupMemberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupMember) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGroupMember(ctx, exec, o.GroupID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupMemberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupMemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `group_members`.* FROM `group_members` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupMemberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GroupMemberSlice")
	}

	*o = slice

	return nil
}

// GroupMemberExists checks if the GroupMember row exists.
func GroupMemberExists(ctx context.Context, exec boil.ContextExecutor, groupID string, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `group_members` where `group_id`=? AND `user_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, groupID, userID)
	}
	row := exec.QueryRowContext(ctx, sql, groupID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if group_members exists")
	}

	return exists, nil
}

// Exists checks if the GroupMember row exists.
func (o *GroupMember) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GroupMemberExists(ctx, exec, o.GroupID, o.UserID)
}
