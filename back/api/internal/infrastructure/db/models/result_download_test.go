// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testResultDownloads(t *testing.T) {
	t.Parallel()

	query := ResultDownloads()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testResultDownloadsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ResultDownloads().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResultDownloadsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ResultDownloads().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ResultDownloads().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResultDownloadsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ResultDownloadSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ResultDownloads().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResultDownloadsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ResultDownloadExists(ctx, tx, o.ResultID, o.UserID)
	if err != nil {
		t.Errorf("Unable to check if ResultDownload exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ResultDownloadExists to return true, but got false.")
	}
}

func testResultDownloadsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	resultDownloadFound, err := FindResultDownload(ctx, tx, o.ResultID, o.UserID)
	if err != nil {
		t.Error(err)
	}

	if resultDownloadFound == nil {
		t.Error("want a record, got nil")
	}
}

func testResultDownloadsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ResultDownloads().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testResultDownloadsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ResultDownloads().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testResultDownloadsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resultDownloadOne := &ResultDownload{}
	resultDownloadTwo := &ResultDownload{}
	if err = randomize.Struct(seed, resultDownloadOne, resultDownloadDBTypes, false, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}
	if err = randomize.Struct(seed, resultDownloadTwo, resultDownloadDBTypes, false, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = resultDownloadOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = resultDownloadTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ResultDownloads().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testResultDownloadsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	resultDownloadOne := &ResultDownload{}
	resultDownloadTwo := &ResultDownload{}
	if err = randomize.Struct(seed, resultDownloadOne, resultDownloadDBTypes, false, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}
	if err = randomize.Struct(seed, resultDownloadTwo, resultDownloadDBTypes, false, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = resultDownloadOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = resultDownloadTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ResultDownloads().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func resultDownloadBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ResultDownload) error {
	*o = ResultDownload{}
	return nil
}

func resultDownloadAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ResultDownload) error {
	*o = ResultDownload{}
	return nil
}

func resultDownloadAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ResultDownload) error {
	*o = ResultDownload{}
	return nil
}

func resultDownloadBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ResultDownload) error {
	*o = ResultDownload{}
	return nil
}

func resultDownloadAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ResultDownload) error {
	*o = ResultDownload{}
	return nil
}

func resultDownloadBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ResultDownload) error {
	*o = ResultDownload{}
	return nil
}

func resultDownloadAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ResultDownload) error {
	*o = ResultDownload{}
	return nil
}

func resultDownloadBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ResultDownload) error {
	*o = ResultDownload{}
	return nil
}

func resultDownloadAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ResultDownload) error {
	*o = ResultDownload{}
	return nil
}

func testResultDownloadsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ResultDownload{}
	o := &ResultDownload{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ResultDownload object: %s", err)
	}

	AddResultDownloadHook(boil.BeforeInsertHook, resultDownloadBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	resultDownloadBeforeInsertHooks = []ResultDownloadHook{}

	AddResultDownloadHook(boil.AfterInsertHook, resultDownloadAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	resultDownloadAfterInsertHooks = []ResultDownloadHook{}

	AddResultDownloadHook(boil.AfterSelectHook, resultDownloadAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	resultDownloadAfterSelectHooks = []ResultDownloadHook{}

	AddResultDownloadHook(boil.BeforeUpdateHook, resultDownloadBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	resultDownloadBeforeUpdateHooks = []ResultDownloadHook{}

	AddResultDownloadHook(boil.AfterUpdateHook, resultDownloadAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	resultDownloadAfterUpdateHooks = []ResultDownloadHook{}

	AddResultDownloadHook(boil.BeforeDeleteHook, resultDownloadBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	resultDownloadBeforeDeleteHooks = []ResultDownloadHook{}

	AddResultDownloadHook(boil.AfterDeleteHook, resultDownloadAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	resultDownloadAfterDeleteHooks = []ResultDownloadHook{}

	AddResultDownloadHook(boil.BeforeUpsertHook, resultDownloadBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	resultDownloadBeforeUpsertHooks = []ResultDownloadHook{}

	AddResultDownloadHook(boil.AfterUpsertHook, resultDownloadAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	resultDownloadAfterUpsertHooks = []ResultDownloadHook{}
}

func testResultDownloadsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ResultDownloads().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testResultDownloadsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(resultDownloadColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ResultDownloads().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testResultDownloadToOneCollageResultUsingResult(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ResultDownload
	var foreign CollageResult

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, resultDownloadDBTypes, false, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, collageResultDBTypes, false, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ResultID = foreign.ResultID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Result().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ResultID != foreign.ResultID {
		t.Errorf("want: %v, got %v", foreign.ResultID, check.ResultID)
	}

	ranAfterSelectHook := false
	AddCollageResultHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *CollageResult) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ResultDownloadSlice{&local}
	if err = local.L.LoadResult(ctx, tx, false, (*[]*ResultDownload)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Result == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Result = nil
	if err = local.L.LoadResult(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Result == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testResultDownloadToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ResultDownload
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, resultDownloadDBTypes, false, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ResultDownloadSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*ResultDownload)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testResultDownloadToOneSetOpCollageResultUsingResult(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResultDownload
	var b, c CollageResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resultDownloadDBTypes, false, strmangle.SetComplement(resultDownloadPrimaryKeyColumns, resultDownloadColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, collageResultDBTypes, false, strmangle.SetComplement(collageResultPrimaryKeyColumns, collageResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collageResultDBTypes, false, strmangle.SetComplement(collageResultPrimaryKeyColumns, collageResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CollageResult{&b, &c} {
		err = a.SetResult(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Result != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ResultResultDownloads[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ResultID != x.ResultID {
			t.Error("foreign key was wrong value", a.ResultID)
		}

		if exists, err := ResultDownloadExists(ctx, tx, a.ResultID, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testResultDownloadToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResultDownload
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resultDownloadDBTypes, false, strmangle.SetComplement(resultDownloadPrimaryKeyColumns, resultDownloadColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ResultDownloads[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := ResultDownloadExists(ctx, tx, a.ResultID, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testResultDownloadsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testResultDownloadsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ResultDownloadSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testResultDownloadsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ResultDownloads().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	resultDownloadDBTypes = map[string]string{`ResultID`: `char`, `UserID`: `char`, `DownloadedAt`: `timestamp`}
	_                     = bytes.MinRead
)

func testResultDownloadsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(resultDownloadPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(resultDownloadAllColumns) == len(resultDownloadPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ResultDownloads().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testResultDownloadsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(resultDownloadAllColumns) == len(resultDownloadPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ResultDownload{}
	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ResultDownloads().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, resultDownloadDBTypes, true, resultDownloadPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(resultDownloadAllColumns, resultDownloadPrimaryKeyColumns) {
		fields = resultDownloadAllColumns
	} else {
		fields = strmangle.SetComplement(
			resultDownloadAllColumns,
			resultDownloadPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ResultDownloadSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testResultDownloadsUpsert(t *testing.T) {
	t.Parallel()

	if len(resultDownloadAllColumns) == len(resultDownloadPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLResultDownloadUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ResultDownload{}
	if err = randomize.Struct(seed, &o, resultDownloadDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ResultDownload: %s", err)
	}

	count, err := ResultDownloads().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, resultDownloadDBTypes, false, resultDownloadPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ResultDownload struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ResultDownload: %s", err)
	}

	count, err = ResultDownloads().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
