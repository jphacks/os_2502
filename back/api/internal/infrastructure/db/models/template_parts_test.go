// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTemplateParts(t *testing.T) {
	t.Parallel()

	query := TemplateParts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTemplatePartsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TemplateParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTemplatePartsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TemplateParts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TemplateParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTemplatePartsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TemplatePartSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TemplateParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTemplatePartsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TemplatePartExists(ctx, tx, o.PartID)
	if err != nil {
		t.Errorf("Unable to check if TemplatePart exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TemplatePartExists to return true, but got false.")
	}
}

func testTemplatePartsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	templatePartFound, err := FindTemplatePart(ctx, tx, o.PartID)
	if err != nil {
		t.Error(err)
	}

	if templatePartFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTemplatePartsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TemplateParts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTemplatePartsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TemplateParts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTemplatePartsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	templatePartOne := &TemplatePart{}
	templatePartTwo := &TemplatePart{}
	if err = randomize.Struct(seed, templatePartOne, templatePartDBTypes, false, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}
	if err = randomize.Struct(seed, templatePartTwo, templatePartDBTypes, false, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = templatePartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = templatePartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TemplateParts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTemplatePartsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	templatePartOne := &TemplatePart{}
	templatePartTwo := &TemplatePart{}
	if err = randomize.Struct(seed, templatePartOne, templatePartDBTypes, false, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}
	if err = randomize.Struct(seed, templatePartTwo, templatePartDBTypes, false, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = templatePartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = templatePartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TemplateParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func templatePartBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TemplatePart) error {
	*o = TemplatePart{}
	return nil
}

func templatePartAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TemplatePart) error {
	*o = TemplatePart{}
	return nil
}

func templatePartAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TemplatePart) error {
	*o = TemplatePart{}
	return nil
}

func templatePartBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TemplatePart) error {
	*o = TemplatePart{}
	return nil
}

func templatePartAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TemplatePart) error {
	*o = TemplatePart{}
	return nil
}

func templatePartBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TemplatePart) error {
	*o = TemplatePart{}
	return nil
}

func templatePartAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TemplatePart) error {
	*o = TemplatePart{}
	return nil
}

func templatePartBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TemplatePart) error {
	*o = TemplatePart{}
	return nil
}

func templatePartAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TemplatePart) error {
	*o = TemplatePart{}
	return nil
}

func testTemplatePartsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TemplatePart{}
	o := &TemplatePart{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, templatePartDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TemplatePart object: %s", err)
	}

	AddTemplatePartHook(boil.BeforeInsertHook, templatePartBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	templatePartBeforeInsertHooks = []TemplatePartHook{}

	AddTemplatePartHook(boil.AfterInsertHook, templatePartAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	templatePartAfterInsertHooks = []TemplatePartHook{}

	AddTemplatePartHook(boil.AfterSelectHook, templatePartAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	templatePartAfterSelectHooks = []TemplatePartHook{}

	AddTemplatePartHook(boil.BeforeUpdateHook, templatePartBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	templatePartBeforeUpdateHooks = []TemplatePartHook{}

	AddTemplatePartHook(boil.AfterUpdateHook, templatePartAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	templatePartAfterUpdateHooks = []TemplatePartHook{}

	AddTemplatePartHook(boil.BeforeDeleteHook, templatePartBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	templatePartBeforeDeleteHooks = []TemplatePartHook{}

	AddTemplatePartHook(boil.AfterDeleteHook, templatePartAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	templatePartAfterDeleteHooks = []TemplatePartHook{}

	AddTemplatePartHook(boil.BeforeUpsertHook, templatePartBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	templatePartBeforeUpsertHooks = []TemplatePartHook{}

	AddTemplatePartHook(boil.AfterUpsertHook, templatePartAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	templatePartAfterUpsertHooks = []TemplatePartHook{}
}

func testTemplatePartsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TemplateParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTemplatePartsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(templatePartColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TemplateParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTemplatePartToManyPartGroupPartAssignments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TemplatePart
	var b, c GroupPartAssignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, groupPartAssignmentDBTypes, false, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groupPartAssignmentDBTypes, false, groupPartAssignmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PartID = a.PartID
	c.PartID = a.PartID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PartGroupPartAssignments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PartID == b.PartID {
			bFound = true
		}
		if v.PartID == c.PartID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TemplatePartSlice{&a}
	if err = a.L.LoadPartGroupPartAssignments(ctx, tx, false, (*[]*TemplatePart)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PartGroupPartAssignments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PartGroupPartAssignments = nil
	if err = a.L.LoadPartGroupPartAssignments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PartGroupPartAssignments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTemplatePartToManyPartUploadImages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TemplatePart
	var b, c UploadImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, uploadImageDBTypes, false, uploadImageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, uploadImageDBTypes, false, uploadImageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PartID, a.PartID)
	queries.Assign(&c.PartID, a.PartID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PartUploadImages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PartID, b.PartID) {
			bFound = true
		}
		if queries.Equal(v.PartID, c.PartID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TemplatePartSlice{&a}
	if err = a.L.LoadPartUploadImages(ctx, tx, false, (*[]*TemplatePart)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PartUploadImages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PartUploadImages = nil
	if err = a.L.LoadPartUploadImages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PartUploadImages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTemplatePartToManyAddOpPartGroupPartAssignments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TemplatePart
	var b, c, d, e GroupPartAssignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, templatePartDBTypes, false, strmangle.SetComplement(templatePartPrimaryKeyColumns, templatePartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GroupPartAssignment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, groupPartAssignmentDBTypes, false, strmangle.SetComplement(groupPartAssignmentPrimaryKeyColumns, groupPartAssignmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GroupPartAssignment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPartGroupPartAssignments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PartID != first.PartID {
			t.Error("foreign key was wrong value", a.PartID, first.PartID)
		}
		if a.PartID != second.PartID {
			t.Error("foreign key was wrong value", a.PartID, second.PartID)
		}

		if first.R.Part != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Part != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PartGroupPartAssignments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PartGroupPartAssignments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PartGroupPartAssignments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTemplatePartToManyAddOpPartUploadImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TemplatePart
	var b, c, d, e UploadImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, templatePartDBTypes, false, strmangle.SetComplement(templatePartPrimaryKeyColumns, templatePartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UploadImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, uploadImageDBTypes, false, strmangle.SetComplement(uploadImagePrimaryKeyColumns, uploadImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UploadImage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPartUploadImages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.PartID, first.PartID) {
			t.Error("foreign key was wrong value", a.PartID, first.PartID)
		}
		if !queries.Equal(a.PartID, second.PartID) {
			t.Error("foreign key was wrong value", a.PartID, second.PartID)
		}

		if first.R.Part != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Part != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PartUploadImages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PartUploadImages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PartUploadImages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTemplatePartToManySetOpPartUploadImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TemplatePart
	var b, c, d, e UploadImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, templatePartDBTypes, false, strmangle.SetComplement(templatePartPrimaryKeyColumns, templatePartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UploadImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, uploadImageDBTypes, false, strmangle.SetComplement(uploadImagePrimaryKeyColumns, uploadImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPartUploadImages(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PartUploadImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPartUploadImages(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PartUploadImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PartID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PartID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.PartID, d.PartID) {
		t.Error("foreign key was wrong value", a.PartID, d.PartID)
	}
	if !queries.Equal(a.PartID, e.PartID) {
		t.Error("foreign key was wrong value", a.PartID, e.PartID)
	}

	if b.R.Part != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Part != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Part != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Part != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PartUploadImages[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PartUploadImages[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTemplatePartToManyRemoveOpPartUploadImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TemplatePart
	var b, c, d, e UploadImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, templatePartDBTypes, false, strmangle.SetComplement(templatePartPrimaryKeyColumns, templatePartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UploadImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, uploadImageDBTypes, false, strmangle.SetComplement(uploadImagePrimaryKeyColumns, uploadImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPartUploadImages(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PartUploadImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePartUploadImages(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PartUploadImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PartID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PartID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Part != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Part != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Part != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Part != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PartUploadImages) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PartUploadImages[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PartUploadImages[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTemplatePartToOneCollagesTemplateUsingTemplate(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TemplatePart
	var foreign CollagesTemplate

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, templatePartDBTypes, false, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, collagesTemplateDBTypes, false, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TemplateID = foreign.TemplateID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Template().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TemplateID != foreign.TemplateID {
		t.Errorf("want: %v, got %v", foreign.TemplateID, check.TemplateID)
	}

	ranAfterSelectHook := false
	AddCollagesTemplateHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *CollagesTemplate) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TemplatePartSlice{&local}
	if err = local.L.LoadTemplate(ctx, tx, false, (*[]*TemplatePart)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Template == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Template = nil
	if err = local.L.LoadTemplate(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Template == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTemplatePartToOneSetOpCollagesTemplateUsingTemplate(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TemplatePart
	var b, c CollagesTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, templatePartDBTypes, false, strmangle.SetComplement(templatePartPrimaryKeyColumns, templatePartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, collagesTemplateDBTypes, false, strmangle.SetComplement(collagesTemplatePrimaryKeyColumns, collagesTemplateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collagesTemplateDBTypes, false, strmangle.SetComplement(collagesTemplatePrimaryKeyColumns, collagesTemplateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CollagesTemplate{&b, &c} {
		err = a.SetTemplate(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Template != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TemplateTemplateParts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TemplateID != x.TemplateID {
			t.Error("foreign key was wrong value", a.TemplateID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TemplateID))
		reflect.Indirect(reflect.ValueOf(&a.TemplateID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TemplateID != x.TemplateID {
			t.Error("foreign key was wrong value", a.TemplateID, x.TemplateID)
		}
	}
}

func testTemplatePartsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTemplatePartsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TemplatePartSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTemplatePartsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TemplateParts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	templatePartDBTypes = map[string]string{`PartID`: `char`, `TemplateID`: `char`, `PartNumber`: `int`, `PartName`: `varchar`, `PositionX`: `int`, `PositionY`: `int`, `Width`: `int`, `Height`: `int`, `Description`: `text`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                   = bytes.MinRead
)

func testTemplatePartsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(templatePartPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(templatePartAllColumns) == len(templatePartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TemplateParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTemplatePartsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(templatePartAllColumns) == len(templatePartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TemplatePart{}
	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TemplateParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, templatePartDBTypes, true, templatePartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(templatePartAllColumns, templatePartPrimaryKeyColumns) {
		fields = templatePartAllColumns
	} else {
		fields = strmangle.SetComplement(
			templatePartAllColumns,
			templatePartPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TemplatePartSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTemplatePartsUpsert(t *testing.T) {
	t.Parallel()

	if len(templatePartAllColumns) == len(templatePartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTemplatePartUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TemplatePart{}
	if err = randomize.Struct(seed, &o, templatePartDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TemplatePart: %s", err)
	}

	count, err := TemplateParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, templatePartDBTypes, false, templatePartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TemplatePart struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TemplatePart: %s", err)
	}

	count, err = TemplateParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
