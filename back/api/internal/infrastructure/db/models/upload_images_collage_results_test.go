// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUploadImagesCollageResults(t *testing.T) {
	t.Parallel()

	query := UploadImagesCollageResults()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUploadImagesCollageResultsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UploadImagesCollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadImagesCollageResultsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UploadImagesCollageResults().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UploadImagesCollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadImagesCollageResultsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UploadImagesCollageResultSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UploadImagesCollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUploadImagesCollageResultsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UploadImagesCollageResultExists(ctx, tx, o.ImageID, o.ResultID)
	if err != nil {
		t.Errorf("Unable to check if UploadImagesCollageResult exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UploadImagesCollageResultExists to return true, but got false.")
	}
}

func testUploadImagesCollageResultsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	uploadImagesCollageResultFound, err := FindUploadImagesCollageResult(ctx, tx, o.ImageID, o.ResultID)
	if err != nil {
		t.Error(err)
	}

	if uploadImagesCollageResultFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUploadImagesCollageResultsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UploadImagesCollageResults().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUploadImagesCollageResultsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UploadImagesCollageResults().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUploadImagesCollageResultsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	uploadImagesCollageResultOne := &UploadImagesCollageResult{}
	uploadImagesCollageResultTwo := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, uploadImagesCollageResultOne, uploadImagesCollageResultDBTypes, false, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}
	if err = randomize.Struct(seed, uploadImagesCollageResultTwo, uploadImagesCollageResultDBTypes, false, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = uploadImagesCollageResultOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = uploadImagesCollageResultTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UploadImagesCollageResults().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUploadImagesCollageResultsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	uploadImagesCollageResultOne := &UploadImagesCollageResult{}
	uploadImagesCollageResultTwo := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, uploadImagesCollageResultOne, uploadImagesCollageResultDBTypes, false, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}
	if err = randomize.Struct(seed, uploadImagesCollageResultTwo, uploadImagesCollageResultDBTypes, false, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = uploadImagesCollageResultOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = uploadImagesCollageResultTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UploadImagesCollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func uploadImagesCollageResultBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UploadImagesCollageResult) error {
	*o = UploadImagesCollageResult{}
	return nil
}

func uploadImagesCollageResultAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UploadImagesCollageResult) error {
	*o = UploadImagesCollageResult{}
	return nil
}

func uploadImagesCollageResultAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UploadImagesCollageResult) error {
	*o = UploadImagesCollageResult{}
	return nil
}

func uploadImagesCollageResultBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UploadImagesCollageResult) error {
	*o = UploadImagesCollageResult{}
	return nil
}

func uploadImagesCollageResultAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UploadImagesCollageResult) error {
	*o = UploadImagesCollageResult{}
	return nil
}

func uploadImagesCollageResultBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UploadImagesCollageResult) error {
	*o = UploadImagesCollageResult{}
	return nil
}

func uploadImagesCollageResultAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UploadImagesCollageResult) error {
	*o = UploadImagesCollageResult{}
	return nil
}

func uploadImagesCollageResultBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UploadImagesCollageResult) error {
	*o = UploadImagesCollageResult{}
	return nil
}

func uploadImagesCollageResultAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UploadImagesCollageResult) error {
	*o = UploadImagesCollageResult{}
	return nil
}

func testUploadImagesCollageResultsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UploadImagesCollageResult{}
	o := &UploadImagesCollageResult{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult object: %s", err)
	}

	AddUploadImagesCollageResultHook(boil.BeforeInsertHook, uploadImagesCollageResultBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	uploadImagesCollageResultBeforeInsertHooks = []UploadImagesCollageResultHook{}

	AddUploadImagesCollageResultHook(boil.AfterInsertHook, uploadImagesCollageResultAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	uploadImagesCollageResultAfterInsertHooks = []UploadImagesCollageResultHook{}

	AddUploadImagesCollageResultHook(boil.AfterSelectHook, uploadImagesCollageResultAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	uploadImagesCollageResultAfterSelectHooks = []UploadImagesCollageResultHook{}

	AddUploadImagesCollageResultHook(boil.BeforeUpdateHook, uploadImagesCollageResultBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	uploadImagesCollageResultBeforeUpdateHooks = []UploadImagesCollageResultHook{}

	AddUploadImagesCollageResultHook(boil.AfterUpdateHook, uploadImagesCollageResultAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	uploadImagesCollageResultAfterUpdateHooks = []UploadImagesCollageResultHook{}

	AddUploadImagesCollageResultHook(boil.BeforeDeleteHook, uploadImagesCollageResultBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	uploadImagesCollageResultBeforeDeleteHooks = []UploadImagesCollageResultHook{}

	AddUploadImagesCollageResultHook(boil.AfterDeleteHook, uploadImagesCollageResultAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	uploadImagesCollageResultAfterDeleteHooks = []UploadImagesCollageResultHook{}

	AddUploadImagesCollageResultHook(boil.BeforeUpsertHook, uploadImagesCollageResultBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	uploadImagesCollageResultBeforeUpsertHooks = []UploadImagesCollageResultHook{}

	AddUploadImagesCollageResultHook(boil.AfterUpsertHook, uploadImagesCollageResultAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	uploadImagesCollageResultAfterUpsertHooks = []UploadImagesCollageResultHook{}
}

func testUploadImagesCollageResultsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UploadImagesCollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUploadImagesCollageResultsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(uploadImagesCollageResultColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UploadImagesCollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUploadImagesCollageResultToOneUploadImageUsingImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UploadImagesCollageResult
	var foreign UploadImage

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, uploadImagesCollageResultDBTypes, false, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, uploadImageDBTypes, false, uploadImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImage struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ImageID = foreign.ImageID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Image().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ImageID != foreign.ImageID {
		t.Errorf("want: %v, got %v", foreign.ImageID, check.ImageID)
	}

	ranAfterSelectHook := false
	AddUploadImageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *UploadImage) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UploadImagesCollageResultSlice{&local}
	if err = local.L.LoadImage(ctx, tx, false, (*[]*UploadImagesCollageResult)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Image == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Image = nil
	if err = local.L.LoadImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Image == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUploadImagesCollageResultToOneCollageResultUsingResult(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UploadImagesCollageResult
	var foreign CollageResult

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, uploadImagesCollageResultDBTypes, false, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, collageResultDBTypes, false, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ResultID = foreign.ResultID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Result().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ResultID != foreign.ResultID {
		t.Errorf("want: %v, got %v", foreign.ResultID, check.ResultID)
	}

	ranAfterSelectHook := false
	AddCollageResultHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *CollageResult) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UploadImagesCollageResultSlice{&local}
	if err = local.L.LoadResult(ctx, tx, false, (*[]*UploadImagesCollageResult)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Result == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Result = nil
	if err = local.L.LoadResult(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Result == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUploadImagesCollageResultToOneSetOpUploadImageUsingImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UploadImagesCollageResult
	var b, c UploadImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, uploadImagesCollageResultDBTypes, false, strmangle.SetComplement(uploadImagesCollageResultPrimaryKeyColumns, uploadImagesCollageResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, uploadImageDBTypes, false, strmangle.SetComplement(uploadImagePrimaryKeyColumns, uploadImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, uploadImageDBTypes, false, strmangle.SetComplement(uploadImagePrimaryKeyColumns, uploadImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UploadImage{&b, &c} {
		err = a.SetImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Image != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ImageUploadImagesCollageResults[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ImageID != x.ImageID {
			t.Error("foreign key was wrong value", a.ImageID)
		}

		if exists, err := UploadImagesCollageResultExists(ctx, tx, a.ImageID, a.ResultID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testUploadImagesCollageResultToOneSetOpCollageResultUsingResult(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UploadImagesCollageResult
	var b, c CollageResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, uploadImagesCollageResultDBTypes, false, strmangle.SetComplement(uploadImagesCollageResultPrimaryKeyColumns, uploadImagesCollageResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, collageResultDBTypes, false, strmangle.SetComplement(collageResultPrimaryKeyColumns, collageResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collageResultDBTypes, false, strmangle.SetComplement(collageResultPrimaryKeyColumns, collageResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CollageResult{&b, &c} {
		err = a.SetResult(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Result != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ResultUploadImagesCollageResults[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ResultID != x.ResultID {
			t.Error("foreign key was wrong value", a.ResultID)
		}

		if exists, err := UploadImagesCollageResultExists(ctx, tx, a.ImageID, a.ResultID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUploadImagesCollageResultsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUploadImagesCollageResultsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UploadImagesCollageResultSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUploadImagesCollageResultsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UploadImagesCollageResults().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	uploadImagesCollageResultDBTypes = map[string]string{`ImageID`: `char`, `ResultID`: `char`, `PositionX`: `int`, `PositionY`: `int`, `Width`: `int`, `Height`: `int`, `SortOrder`: `int`, `CreatedAt`: `timestamp`}
	_                                = bytes.MinRead
)

func testUploadImagesCollageResultsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(uploadImagesCollageResultPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(uploadImagesCollageResultAllColumns) == len(uploadImagesCollageResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UploadImagesCollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUploadImagesCollageResultsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(uploadImagesCollageResultAllColumns) == len(uploadImagesCollageResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UploadImagesCollageResult{}
	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UploadImagesCollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, uploadImagesCollageResultDBTypes, true, uploadImagesCollageResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(uploadImagesCollageResultAllColumns, uploadImagesCollageResultPrimaryKeyColumns) {
		fields = uploadImagesCollageResultAllColumns
	} else {
		fields = strmangle.SetComplement(
			uploadImagesCollageResultAllColumns,
			uploadImagesCollageResultPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UploadImagesCollageResultSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUploadImagesCollageResultsUpsert(t *testing.T) {
	t.Parallel()

	if len(uploadImagesCollageResultAllColumns) == len(uploadImagesCollageResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUploadImagesCollageResultUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UploadImagesCollageResult{}
	if err = randomize.Struct(seed, &o, uploadImagesCollageResultDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UploadImagesCollageResult: %s", err)
	}

	count, err := UploadImagesCollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, uploadImagesCollageResultDBTypes, false, uploadImagesCollageResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UploadImagesCollageResult struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UploadImagesCollageResult: %s", err)
	}

	count, err = UploadImagesCollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
