// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCollageResults(t *testing.T) {
	t.Parallel()

	query := CollageResults()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCollageResultsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollageResultsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CollageResults().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollageResultsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CollageResultSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollageResultsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CollageResultExists(ctx, tx, o.ResultID)
	if err != nil {
		t.Errorf("Unable to check if CollageResult exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CollageResultExists to return true, but got false.")
	}
}

func testCollageResultsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	collageResultFound, err := FindCollageResult(ctx, tx, o.ResultID)
	if err != nil {
		t.Error(err)
	}

	if collageResultFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCollageResultsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CollageResults().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCollageResultsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CollageResults().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCollageResultsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	collageResultOne := &CollageResult{}
	collageResultTwo := &CollageResult{}
	if err = randomize.Struct(seed, collageResultOne, collageResultDBTypes, false, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}
	if err = randomize.Struct(seed, collageResultTwo, collageResultDBTypes, false, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = collageResultOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = collageResultTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CollageResults().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCollageResultsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	collageResultOne := &CollageResult{}
	collageResultTwo := &CollageResult{}
	if err = randomize.Struct(seed, collageResultOne, collageResultDBTypes, false, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}
	if err = randomize.Struct(seed, collageResultTwo, collageResultDBTypes, false, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = collageResultOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = collageResultTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func collageResultBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CollageResult) error {
	*o = CollageResult{}
	return nil
}

func collageResultAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CollageResult) error {
	*o = CollageResult{}
	return nil
}

func collageResultAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CollageResult) error {
	*o = CollageResult{}
	return nil
}

func collageResultBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CollageResult) error {
	*o = CollageResult{}
	return nil
}

func collageResultAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CollageResult) error {
	*o = CollageResult{}
	return nil
}

func collageResultBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CollageResult) error {
	*o = CollageResult{}
	return nil
}

func collageResultAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CollageResult) error {
	*o = CollageResult{}
	return nil
}

func collageResultBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CollageResult) error {
	*o = CollageResult{}
	return nil
}

func collageResultAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CollageResult) error {
	*o = CollageResult{}
	return nil
}

func testCollageResultsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CollageResult{}
	o := &CollageResult{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, collageResultDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CollageResult object: %s", err)
	}

	AddCollageResultHook(boil.BeforeInsertHook, collageResultBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	collageResultBeforeInsertHooks = []CollageResultHook{}

	AddCollageResultHook(boil.AfterInsertHook, collageResultAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	collageResultAfterInsertHooks = []CollageResultHook{}

	AddCollageResultHook(boil.AfterSelectHook, collageResultAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	collageResultAfterSelectHooks = []CollageResultHook{}

	AddCollageResultHook(boil.BeforeUpdateHook, collageResultBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	collageResultBeforeUpdateHooks = []CollageResultHook{}

	AddCollageResultHook(boil.AfterUpdateHook, collageResultAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	collageResultAfterUpdateHooks = []CollageResultHook{}

	AddCollageResultHook(boil.BeforeDeleteHook, collageResultBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	collageResultBeforeDeleteHooks = []CollageResultHook{}

	AddCollageResultHook(boil.AfterDeleteHook, collageResultAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	collageResultAfterDeleteHooks = []CollageResultHook{}

	AddCollageResultHook(boil.BeforeUpsertHook, collageResultBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	collageResultBeforeUpsertHooks = []CollageResultHook{}

	AddCollageResultHook(boil.AfterUpsertHook, collageResultAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	collageResultAfterUpsertHooks = []CollageResultHook{}
}

func testCollageResultsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCollageResultsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(collageResultColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCollageResultToManyResultResultDownloads(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollageResult
	var b, c ResultDownload

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, resultDownloadDBTypes, false, resultDownloadColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, resultDownloadDBTypes, false, resultDownloadColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ResultID = a.ResultID
	c.ResultID = a.ResultID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResultResultDownloads().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ResultID == b.ResultID {
			bFound = true
		}
		if v.ResultID == c.ResultID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CollageResultSlice{&a}
	if err = a.L.LoadResultResultDownloads(ctx, tx, false, (*[]*CollageResult)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResultResultDownloads); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResultResultDownloads = nil
	if err = a.L.LoadResultResultDownloads(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResultResultDownloads); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCollageResultToManyResultUploadImagesCollageResults(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollageResult
	var b, c UploadImagesCollageResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, uploadImagesCollageResultDBTypes, false, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, uploadImagesCollageResultDBTypes, false, uploadImagesCollageResultColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ResultID = a.ResultID
	c.ResultID = a.ResultID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResultUploadImagesCollageResults().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ResultID == b.ResultID {
			bFound = true
		}
		if v.ResultID == c.ResultID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CollageResultSlice{&a}
	if err = a.L.LoadResultUploadImagesCollageResults(ctx, tx, false, (*[]*CollageResult)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResultUploadImagesCollageResults); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResultUploadImagesCollageResults = nil
	if err = a.L.LoadResultUploadImagesCollageResults(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResultUploadImagesCollageResults); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCollageResultToManyAddOpResultResultDownloads(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollageResult
	var b, c, d, e ResultDownload

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collageResultDBTypes, false, strmangle.SetComplement(collageResultPrimaryKeyColumns, collageResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ResultDownload{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, resultDownloadDBTypes, false, strmangle.SetComplement(resultDownloadPrimaryKeyColumns, resultDownloadColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ResultDownload{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResultResultDownloads(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ResultID != first.ResultID {
			t.Error("foreign key was wrong value", a.ResultID, first.ResultID)
		}
		if a.ResultID != second.ResultID {
			t.Error("foreign key was wrong value", a.ResultID, second.ResultID)
		}

		if first.R.Result != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Result != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResultResultDownloads[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResultResultDownloads[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResultResultDownloads().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCollageResultToManyAddOpResultUploadImagesCollageResults(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollageResult
	var b, c, d, e UploadImagesCollageResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collageResultDBTypes, false, strmangle.SetComplement(collageResultPrimaryKeyColumns, collageResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UploadImagesCollageResult{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, uploadImagesCollageResultDBTypes, false, strmangle.SetComplement(uploadImagesCollageResultPrimaryKeyColumns, uploadImagesCollageResultColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UploadImagesCollageResult{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResultUploadImagesCollageResults(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ResultID != first.ResultID {
			t.Error("foreign key was wrong value", a.ResultID, first.ResultID)
		}
		if a.ResultID != second.ResultID {
			t.Error("foreign key was wrong value", a.ResultID, second.ResultID)
		}

		if first.R.Result != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Result != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResultUploadImagesCollageResults[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResultUploadImagesCollageResults[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResultUploadImagesCollageResults().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCollageResultToOneGroupUsingGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CollageResult
	var foreign Group

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, collageResultDBTypes, false, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, groupDBTypes, false, groupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Group struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GroupID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddGroupHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Group) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CollageResultSlice{&local}
	if err = local.L.LoadGroup(ctx, tx, false, (*[]*CollageResult)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCollageResultToOneCollagesTemplateUsingTemplate(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CollageResult
	var foreign CollagesTemplate

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, collageResultDBTypes, false, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, collagesTemplateDBTypes, false, collagesTemplateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollagesTemplate struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TemplateID = foreign.TemplateID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Template().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TemplateID != foreign.TemplateID {
		t.Errorf("want: %v, got %v", foreign.TemplateID, check.TemplateID)
	}

	ranAfterSelectHook := false
	AddCollagesTemplateHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *CollagesTemplate) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CollageResultSlice{&local}
	if err = local.L.LoadTemplate(ctx, tx, false, (*[]*CollageResult)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Template == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Template = nil
	if err = local.L.LoadTemplate(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Template == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCollageResultToOneSetOpGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollageResult
	var b, c Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collageResultDBTypes, false, strmangle.SetComplement(collageResultPrimaryKeyColumns, collageResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Group{&b, &c} {
		err = a.SetGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CollageResults[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID, x.ID)
		}
	}
}
func testCollageResultToOneSetOpCollagesTemplateUsingTemplate(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollageResult
	var b, c CollagesTemplate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collageResultDBTypes, false, strmangle.SetComplement(collageResultPrimaryKeyColumns, collageResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, collagesTemplateDBTypes, false, strmangle.SetComplement(collagesTemplatePrimaryKeyColumns, collagesTemplateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collagesTemplateDBTypes, false, strmangle.SetComplement(collagesTemplatePrimaryKeyColumns, collagesTemplateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CollagesTemplate{&b, &c} {
		err = a.SetTemplate(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Template != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TemplateCollageResults[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TemplateID != x.TemplateID {
			t.Error("foreign key was wrong value", a.TemplateID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TemplateID))
		reflect.Indirect(reflect.ValueOf(&a.TemplateID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TemplateID != x.TemplateID {
			t.Error("foreign key was wrong value", a.TemplateID, x.TemplateID)
		}
	}
}

func testCollageResultsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCollageResultsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CollageResultSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCollageResultsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CollageResults().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	collageResultDBTypes = map[string]string{`ResultID`: `char`, `TemplateID`: `char`, `GroupID`: `char`, `FileURL`: `varchar`, `TargetUserNumber`: `int`, `IsNotification`: `tinyint`, `CreatedAt`: `timestamp`}
	_                    = bytes.MinRead
)

func testCollageResultsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(collageResultPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(collageResultAllColumns) == len(collageResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCollageResultsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(collageResultAllColumns) == len(collageResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CollageResult{}
	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, collageResultDBTypes, true, collageResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(collageResultAllColumns, collageResultPrimaryKeyColumns) {
		fields = collageResultAllColumns
	} else {
		fields = strmangle.SetComplement(
			collageResultAllColumns,
			collageResultPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CollageResultSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCollageResultsUpsert(t *testing.T) {
	t.Parallel()

	if len(collageResultAllColumns) == len(collageResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCollageResultUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CollageResult{}
	if err = randomize.Struct(seed, &o, collageResultDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CollageResult: %s", err)
	}

	count, err := CollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, collageResultDBTypes, false, collageResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CollageResult struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CollageResult: %s", err)
	}

	count, err = CollageResults().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
